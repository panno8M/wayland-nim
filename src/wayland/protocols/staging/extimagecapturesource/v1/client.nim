# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import wayland/protocols/staging/extForeignToplevelList/v1/client as extForeignToplevelList_client
import code
export code

## The ext_image_capture_source_v1 CLIENT protocol
## ###############################################
## 
## Interfaces
## ==========
## 
## * ext_image_capture_source_v1
## * ext_output_image_capture_source_manager_v1
## * ext_foreign_toplevel_image_capture_source_manager_v1
## 
## Copyright
## =========
## 
## Copyright © 2022 Andri Yngvason
## Copyright © 2024 Simon Ser
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(extImageCaptureSourceV1: ptr ExtImageCaptureSourceV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](extImageCaptureSourceV1).set_user_data(user_data)
proc getUserData*(extImageCaptureSourceV1: ptr ExtImageCaptureSourceV1): pointer {.inline.} =
  cast[ptr Proxy](extImageCaptureSourceV1).get_user_data()
proc getVersion*(extImageCaptureSourceV1: ptr ExtImageCaptureSourceV1): uint32 {.inline.} =
  cast[ptr Proxy](extImageCaptureSourceV1).get_version()
proc destroy*(extImageCaptureSourceV1: ptr ExtImageCaptureSourceV1) {.inline.} =
  ## delete this object
  ## 
  ## Destroys the image capture source. This request may be sent at any time
  ## by the client.
  ## 
  cast[ptr Proxy](extImageCaptureSourceV1).marshal_flags(ExtImageCaptureSourceV1Request_destroy.ord, nil, cast[ptr Proxy](extImageCaptureSourceV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setUserData*(extOutputImageCaptureSourceManagerV1: ptr ExtOutputImageCaptureSourceManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](extOutputImageCaptureSourceManagerV1).set_user_data(user_data)
proc getUserData*(extOutputImageCaptureSourceManagerV1: ptr ExtOutputImageCaptureSourceManagerV1): pointer {.inline.} =
  cast[ptr Proxy](extOutputImageCaptureSourceManagerV1).get_user_data()
proc getVersion*(extOutputImageCaptureSourceManagerV1: ptr ExtOutputImageCaptureSourceManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](extOutputImageCaptureSourceManagerV1).get_version()
proc createSource*(extOutputImageCaptureSourceManagerV1: ptr ExtOutputImageCaptureSourceManagerV1; output: ptr Output): ptr ExtImageCaptureSourceV1 {.inline.} =
  ## create source object for output
  ## 
  ## Creates a source object for an output. Images captured from this source
  ## will show the same content as the output. Some elements may be omitted,
  ## such as cursors and overlays that have been marked as transparent to
  ## capturing.
  ## 
  cast[ptr ExtImageCaptureSourceV1](cast[ptr Proxy](extOutputImageCaptureSourceManagerV1).marshal_flags(ExtOutputImageCaptureSourceManagerV1Request_create_source.ord, addr ext_image_capture_source_v1_interface, cast[ptr Proxy](extOutputImageCaptureSourceManagerV1).get_version(), 0, nil, output))
proc destroy*(extOutputImageCaptureSourceManagerV1: ptr ExtOutputImageCaptureSourceManagerV1) {.inline.} =
  ## delete this object
  ## 
  ## Destroys the manager. This request may be sent at any time by the client
  ## and objects created by the manager will remain valid after its
  ## destruction.
  ## 
  cast[ptr Proxy](extOutputImageCaptureSourceManagerV1).marshal_flags(ExtOutputImageCaptureSourceManagerV1Request_destroy.ord, nil, cast[ptr Proxy](extOutputImageCaptureSourceManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setUserData*(extForeignToplevelImageCaptureSourceManagerV1: ptr ExtForeignToplevelImageCaptureSourceManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](extForeignToplevelImageCaptureSourceManagerV1).set_user_data(user_data)
proc getUserData*(extForeignToplevelImageCaptureSourceManagerV1: ptr ExtForeignToplevelImageCaptureSourceManagerV1): pointer {.inline.} =
  cast[ptr Proxy](extForeignToplevelImageCaptureSourceManagerV1).get_user_data()
proc getVersion*(extForeignToplevelImageCaptureSourceManagerV1: ptr ExtForeignToplevelImageCaptureSourceManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](extForeignToplevelImageCaptureSourceManagerV1).get_version()
proc createSource*(extForeignToplevelImageCaptureSourceManagerV1: ptr ExtForeignToplevelImageCaptureSourceManagerV1; toplevelHandle: ptr ExtForeignToplevelHandleV1): ptr ExtImageCaptureSourceV1 {.inline.} =
  ## create source object for foreign toplevel
  ## 
  ## Creates a source object for a foreign toplevel handle. Images captured
  ## from this source will show the same content as the toplevel.
  ## 
  cast[ptr ExtImageCaptureSourceV1](cast[ptr Proxy](extForeignToplevelImageCaptureSourceManagerV1).marshal_flags(ExtForeignToplevelImageCaptureSourceManagerV1Request_create_source.ord, addr ext_image_capture_source_v1_interface, cast[ptr Proxy](extForeignToplevelImageCaptureSourceManagerV1).get_version(), 0, nil, toplevelHandle))
proc destroy*(extForeignToplevelImageCaptureSourceManagerV1: ptr ExtForeignToplevelImageCaptureSourceManagerV1) {.inline.} =
  ## delete this object
  ## 
  ## Destroys the manager. This request may be sent at any time by the client
  ## and objects created by the manager will remain valid after its
  ## destruction.
  ## 
  cast[ptr Proxy](extForeignToplevelImageCaptureSourceManagerV1).marshal_flags(ExtForeignToplevelImageCaptureSourceManagerV1Request_destroy.ord, nil, cast[ptr Proxy](extForeignToplevelImageCaptureSourceManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
