# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The alpha_modifier_v1 CLIENT protocol
## #####################################
## 
## Interfaces
## ==========
## 
## * wp_alpha_modifier_v1
## * wp_alpha_modifier_surface_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2024 Xaver Hugl
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(wpAlphaModifierV1: ptr WpAlphaModifierV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpAlphaModifierV1).set_user_data(user_data)
proc getUserData*(wpAlphaModifierV1: ptr WpAlphaModifierV1): pointer {.inline.} =
  cast[ptr Proxy](wpAlphaModifierV1).get_user_data()
proc getVersion*(wpAlphaModifierV1: ptr WpAlphaModifierV1): uint32 {.inline.} =
  cast[ptr Proxy](wpAlphaModifierV1).get_version()
proc destroy*(wpAlphaModifierV1: ptr WpAlphaModifierV1) {.inline.} =
  ## destroy the alpha modifier manager object
  ## 
  ## Destroy the alpha modifier manager. This doesn't destroy objects
  ## created with the manager.
  ## 
  cast[ptr Proxy](wpAlphaModifierV1).marshal_flags(WpAlphaModifierV1Request_destroy.ord, nil, cast[ptr Proxy](wpAlphaModifierV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getSurface*(wpAlphaModifierV1: ptr WpAlphaModifierV1; surface: ptr Surface): ptr WpAlphaModifierSurfaceV1 {.inline.} =
  ## create a new alpha modifier surface object
  ## 
  ## Create a new alpha modifier surface object associated with the
  ## given wl_surface. If there is already such an object associated with
  ## the wl_surface, the already_constructed error will be raised.
  ## 
  cast[ptr WpAlphaModifierSurfaceV1](cast[ptr Proxy](wpAlphaModifierV1).marshal_flags(WpAlphaModifierV1Request_get_surface.ord, addr wp_alpha_modifier_surface_v1_interface, cast[ptr Proxy](wpAlphaModifierV1).get_version(), 0, nil, surface))
proc setUserData*(wpAlphaModifierSurfaceV1: ptr WpAlphaModifierSurfaceV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpAlphaModifierSurfaceV1).set_user_data(user_data)
proc getUserData*(wpAlphaModifierSurfaceV1: ptr WpAlphaModifierSurfaceV1): pointer {.inline.} =
  cast[ptr Proxy](wpAlphaModifierSurfaceV1).get_user_data()
proc getVersion*(wpAlphaModifierSurfaceV1: ptr WpAlphaModifierSurfaceV1): uint32 {.inline.} =
  cast[ptr Proxy](wpAlphaModifierSurfaceV1).get_version()
proc destroy*(wpAlphaModifierSurfaceV1: ptr WpAlphaModifierSurfaceV1) {.inline.} =
  ## destroy the alpha modifier object
  ## 
  ## This destroys the object, and is equivalent to set_multiplier with
  ## a value of UINT32_MAX, with the same double-buffered semantics as
  ## set_multiplier.
  ## 
  cast[ptr Proxy](wpAlphaModifierSurfaceV1).marshal_flags(WpAlphaModifierSurfaceV1Request_destroy.ord, nil, cast[ptr Proxy](wpAlphaModifierSurfaceV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setMultiplier*(wpAlphaModifierSurfaceV1: ptr WpAlphaModifierSurfaceV1; factor: uint32) {.inline.} =
  ## specify the alpha multiplier
  ## 
  ## Sets the alpha multiplier for the surface. The alpha multiplier is
  ## double-buffered state, see wl_surface.commit for details.
  ## 
  ## This factor is applied in the compositor's blending space, as an
  ## additional step after the processing of per-pixel alpha values for the
  ## wl_surface. The exact meaning of the factor is thus undefined, unless
  ## the blending space is specified in a different extension.
  ## 
  ## This multiplier is applied even if the buffer attached to the
  ## wl_surface doesn't have an alpha channel; in that case an alpha value
  ## of one is used instead.
  ## 
  ## Zero means completely transparent, UINT32_MAX means completely opaque.
  ## 
  cast[ptr Proxy](wpAlphaModifierSurfaceV1).marshal_flags(WpAlphaModifierSurfaceV1Request_set_multiplier.ord, nil, cast[ptr Proxy](wpAlphaModifierSurfaceV1).get_version(), 0, factor)
