# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The xdg_system_bell_v1 CLIENT protocol
## ######################################
## 
## Interfaces
## ==========
## 
## * xdg_system_bell_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2016, 2023 Red Hat
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(xdgSystemBellV1: ptr XdgSystemBellV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](xdgSystemBellV1).set_user_data(user_data)
proc getUserData*(xdgSystemBellV1: ptr XdgSystemBellV1): pointer {.inline.} =
  cast[ptr Proxy](xdgSystemBellV1).get_user_data()
proc getVersion*(xdgSystemBellV1: ptr XdgSystemBellV1): uint32 {.inline.} =
  cast[ptr Proxy](xdgSystemBellV1).get_version()
proc destroy*(xdgSystemBellV1: ptr XdgSystemBellV1) {.inline.} =
  ## destroy the system bell object
  ## 
  ## Notify that the object will no longer be used.
  ## 
  cast[ptr Proxy](xdgSystemBellV1).marshal_flags(XdgSystemBellV1Request_destroy.ord, nil, cast[ptr Proxy](xdgSystemBellV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc ring*(xdgSystemBellV1: ptr XdgSystemBellV1; surface: ptr Surface) {.inline.} =
  ## ring the system bell
  ## 
  ## This requests rings the system bell on behalf of a client. How ringing
  ## 	the bell is implemented is up to the compositor. It may be an audible
  ## 	sound, a visual feedback of some kind, or any other thing including
  ## 	nothing.
  ## 
  ## The passed surface should correspond to a toplevel like surface role,
  ## or be null, meaning the client doesn't have a particular toplevel it
  ## wants to associate the bell ringing with. See the xdg-shell protocol
  ## extension for a toplevel like surface role.
  ## 
  cast[ptr Proxy](xdgSystemBellV1).marshal_flags(XdgSystemBellV1Request_ring.ord, nil, cast[ptr Proxy](xdgSystemBellV1).get_version(), 0, surface)
