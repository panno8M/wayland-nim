# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import code
export code

## The drm_lease_v1 SERVER protocol
## ################################
## 
## Interfaces
## ==========
## 
## * wp_drm_lease_device_v1
## * wp_drm_lease_connector_v1
## * wp_drm_lease_request_v1
## * wp_drm_lease_v1
## 
## Copyright
## =========
## 
## Copyright © 2018 NXP
## Copyright © 2019 Status Research 

type WpDrmLeaseDeviceV1Interface* = object
  createLeaseRequest*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
  ) {.nimcall.}
  release*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc wpDrmLeaseDeviceV1SendDrmFd*(resource: ptr Resource; fd: int32) {.inline, exportc: "wp_drm_lease_device_v1_send_drm_fd".} =
  ## Sends an drm_fd event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *fd*: DRM file descriptor
  resource.post_event(WpDrmLeaseDeviceV1Event_drm_fd.ord, fd)

proc wpDrmLeaseDeviceV1SendConnector*(resource: ptr Resource; id: ptr Resource) {.inline, exportc: "wp_drm_lease_device_v1_send_connector".} =
  ## Sends an connector event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(WpDrmLeaseDeviceV1Event_connector.ord, id)

proc wpDrmLeaseDeviceV1SendDone*(resource: ptr Resource) {.inline, exportc: "wp_drm_lease_device_v1_send_done".} =
  ## Sends an done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(WpDrmLeaseDeviceV1Event_done.ord)

proc wpDrmLeaseDeviceV1SendReleased*(resource: ptr Resource) {.inline, exportc: "wp_drm_lease_device_v1_send_released".} =
  ## Sends an released event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(WpDrmLeaseDeviceV1Event_released.ord)

type WpDrmLeaseConnectorV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc wpDrmLeaseConnectorV1SendName*(resource: ptr Resource; name: cstring) {.inline, exportc: "wp_drm_lease_connector_v1_send_name".} =
  ## Sends an name event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *name*: connector name
  resource.post_event(WpDrmLeaseConnectorV1Event_name.ord, name)

proc wpDrmLeaseConnectorV1SendDescription*(resource: ptr Resource; description: cstring) {.inline, exportc: "wp_drm_lease_connector_v1_send_description".} =
  ## Sends an description event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *description*: connector description
  resource.post_event(WpDrmLeaseConnectorV1Event_description.ord, description)

proc wpDrmLeaseConnectorV1SendConnectorId*(resource: ptr Resource; connectorId: uint32) {.inline, exportc: "wp_drm_lease_connector_v1_send_connector_id".} =
  ## Sends an connector_id event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *connector_id*: DRM connector ID
  resource.post_event(WpDrmLeaseConnectorV1Event_connector_id.ord, connectorId)

proc wpDrmLeaseConnectorV1SendDone*(resource: ptr Resource) {.inline, exportc: "wp_drm_lease_connector_v1_send_done".} =
  ## Sends an done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(WpDrmLeaseConnectorV1Event_done.ord)

proc wpDrmLeaseConnectorV1SendWithdrawn*(resource: ptr Resource) {.inline, exportc: "wp_drm_lease_connector_v1_send_withdrawn".} =
  ## Sends an withdrawn event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(WpDrmLeaseConnectorV1Event_withdrawn.ord)

type WpDrmLeaseRequestV1Interface* = object
  requestConnector*: proc(
    client: ptr Client;
    resource: ptr Resource;
    connector: ptr Resource;
  ) {.nimcall.}
  submit*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
  ) {.nimcall.}

type WpDrmLeaseV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc wpDrmLeaseV1SendLeaseFd*(resource: ptr Resource; leasedFd: int32) {.inline, exportc: "wp_drm_lease_v1_send_lease_fd".} =
  ## Sends an lease_fd event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *leased_fd*: leased DRM file descriptor
  resource.post_event(WpDrmLeaseV1Event_lease_fd.ord, leasedFd)

proc wpDrmLeaseV1SendFinished*(resource: ptr Resource) {.inline, exportc: "wp_drm_lease_v1_send_finished".} =
  ## Sends an finished event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(WpDrmLeaseV1Event_finished.ord)

