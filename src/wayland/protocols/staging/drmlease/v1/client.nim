# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The drm_lease_v1 CLIENT protocol
## ################################
## 
## Interfaces
## ==========
## 
## * wp_drm_lease_device_v1
## * wp_drm_lease_connector_v1
## * wp_drm_lease_request_v1
## * wp_drm_lease_v1
## 
## Copyright
## =========
## 
## Copyright © 2018 NXP
## Copyright © 2019 Status Research 

type WpDrmLeaseDeviceV1Listener* = object
  drmFd*: proc(
    data: pointer;
    wpDrmLeaseDeviceV1: ptr WpDrmLeaseDeviceV1;
    fd: int32;
  ) {.nimcall.}
  connector*: proc(
    data: pointer;
    wpDrmLeaseDeviceV1: ptr WpDrmLeaseDeviceV1;
    id: ptr WpDrmLeaseConnectorV1;
  ) {.nimcall.}
  done*: proc(
    data: pointer;
    wpDrmLeaseDeviceV1: ptr WpDrmLeaseDeviceV1;
  ) {.nimcall.}
  released*: proc(
    data: pointer;
    wpDrmLeaseDeviceV1: ptr WpDrmLeaseDeviceV1;
  ) {.nimcall.}
proc addListener*(wpDrmLeaseDeviceV1: ptr WpDrmLeaseDeviceV1; listener: ptr WpDrmLeaseDeviceV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](wpDrmLeaseDeviceV1).add_listener(listener, data)

proc setUserData*(wpDrmLeaseDeviceV1: ptr WpDrmLeaseDeviceV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpDrmLeaseDeviceV1).set_user_data(user_data)
proc getUserData*(wpDrmLeaseDeviceV1: ptr WpDrmLeaseDeviceV1): pointer {.inline.} =
  cast[ptr Proxy](wpDrmLeaseDeviceV1).get_user_data()
proc getVersion*(wpDrmLeaseDeviceV1: ptr WpDrmLeaseDeviceV1): uint32 {.inline.} =
  cast[ptr Proxy](wpDrmLeaseDeviceV1).get_version()
proc destroy*(wpDrmLeaseDeviceV1: ptr WpDrmLeaseDeviceV1) {.inline.} =
  destroy cast[ptr Proxy](wpDrmLeaseDeviceV1)
proc createLeaseRequest*(wpDrmLeaseDeviceV1: ptr WpDrmLeaseDeviceV1): ptr WpDrmLeaseRequestV1 {.inline.} =
  ## create a lease request object
  ## 
  ## Creates a lease request object.
  ## 
  ## See the documentation for wp_drm_lease_request_v1 for details.
  ## 
  cast[ptr WpDrmLeaseRequestV1](cast[ptr Proxy](wpDrmLeaseDeviceV1).marshal_flags(WpDrmLeaseDeviceV1Request_create_lease_request.ord, addr wp_drm_lease_request_v1_interface, cast[ptr Proxy](wpDrmLeaseDeviceV1).get_version(), 0, nil))
proc release*(wpDrmLeaseDeviceV1: ptr WpDrmLeaseDeviceV1) {.inline.} =
  ## release this object
  ## 
  ## Indicates the client no longer wishes to use this object. In response
  ## the compositor will immediately send the released event and destroy
  ## this object. It can however not guarantee that the client won't receive
  ## connector events before the released event. The client must not send any
  ## requests after this one, doing so will raise a wl_display error.
  ## Existing connectors, lease request and leases will not be affected.
  ## 
  cast[ptr Proxy](wpDrmLeaseDeviceV1).marshal_flags(WpDrmLeaseDeviceV1Request_release.ord, nil, cast[ptr Proxy](wpDrmLeaseDeviceV1).get_version(), 0)
type WpDrmLeaseConnectorV1Listener* = object
  name*: proc(
    data: pointer;
    wpDrmLeaseConnectorV1: ptr WpDrmLeaseConnectorV1;
    name: cstring;
  ) {.nimcall.}
  description*: proc(
    data: pointer;
    wpDrmLeaseConnectorV1: ptr WpDrmLeaseConnectorV1;
    description: cstring;
  ) {.nimcall.}
  connectorId*: proc(
    data: pointer;
    wpDrmLeaseConnectorV1: ptr WpDrmLeaseConnectorV1;
    connectorId: uint32;
  ) {.nimcall.}
  done*: proc(
    data: pointer;
    wpDrmLeaseConnectorV1: ptr WpDrmLeaseConnectorV1;
  ) {.nimcall.}
  withdrawn*: proc(
    data: pointer;
    wpDrmLeaseConnectorV1: ptr WpDrmLeaseConnectorV1;
  ) {.nimcall.}
proc addListener*(wpDrmLeaseConnectorV1: ptr WpDrmLeaseConnectorV1; listener: ptr WpDrmLeaseConnectorV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](wpDrmLeaseConnectorV1).add_listener(listener, data)

proc setUserData*(wpDrmLeaseConnectorV1: ptr WpDrmLeaseConnectorV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpDrmLeaseConnectorV1).set_user_data(user_data)
proc getUserData*(wpDrmLeaseConnectorV1: ptr WpDrmLeaseConnectorV1): pointer {.inline.} =
  cast[ptr Proxy](wpDrmLeaseConnectorV1).get_user_data()
proc getVersion*(wpDrmLeaseConnectorV1: ptr WpDrmLeaseConnectorV1): uint32 {.inline.} =
  cast[ptr Proxy](wpDrmLeaseConnectorV1).get_version()
proc destroy*(wpDrmLeaseConnectorV1: ptr WpDrmLeaseConnectorV1) {.inline.} =
  ## destroy connector
  ## 
  ## The client may send this request to indicate that it will not use this
  ## connector. Clients are encouraged to send this after receiving the
  ## "withdrawn" event so that the server can release the resources
  ## associated with this connector offer. Neither existing lease requests
  ## nor leases will be affected.
  ## 
  cast[ptr Proxy](wpDrmLeaseConnectorV1).marshal_flags(WpDrmLeaseConnectorV1Request_destroy.ord, nil, cast[ptr Proxy](wpDrmLeaseConnectorV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setUserData*(wpDrmLeaseRequestV1: ptr WpDrmLeaseRequestV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpDrmLeaseRequestV1).set_user_data(user_data)
proc getUserData*(wpDrmLeaseRequestV1: ptr WpDrmLeaseRequestV1): pointer {.inline.} =
  cast[ptr Proxy](wpDrmLeaseRequestV1).get_user_data()
proc getVersion*(wpDrmLeaseRequestV1: ptr WpDrmLeaseRequestV1): uint32 {.inline.} =
  cast[ptr Proxy](wpDrmLeaseRequestV1).get_version()
proc destroy*(wpDrmLeaseRequestV1: ptr WpDrmLeaseRequestV1) {.inline.} =
  destroy cast[ptr Proxy](wpDrmLeaseRequestV1)
proc requestConnector*(wpDrmLeaseRequestV1: ptr WpDrmLeaseRequestV1; connector: ptr WpDrmLeaseConnectorV1) {.inline.} =
  ## request a connector for this lease
  ## 
  ## Indicates that the client would like to lease the given connector.
  ## This is only used as a suggestion, the compositor may choose to
  ## include any resources in the lease it issues, or change the set of
  ## leased resources at any time. Compositors are however encouraged to
  ## include the requested connector and other resources necessary
  ## to drive the connected output in the lease.
  ## 
  ## Requesting a connector that was created from a different lease device
  ## than this lease request raises the wrong_device error. Requesting a
  ## connector twice will raise the duplicate_connector error.
  ## 
  cast[ptr Proxy](wpDrmLeaseRequestV1).marshal_flags(WpDrmLeaseRequestV1Request_request_connector.ord, nil, cast[ptr Proxy](wpDrmLeaseRequestV1).get_version(), 0, connector)
proc submit*(wpDrmLeaseRequestV1: ptr WpDrmLeaseRequestV1): ptr WpDrmLeaseV1 {.inline.} =
  ## submit the lease request
  ## 
  ## Submits the lease request and creates a new wp_drm_lease_v1 object.
  ## After calling submit the compositor will immediately destroy this
  ## object, issuing any more requests will cause a wl_display error.
  ## The compositor doesn't make any guarantees about the events of the
  ## lease object, clients cannot expect an immediate response.
  ## Not requesting any connectors before submitting the lease request
  ## will raise the empty_lease error.
  ## 
  cast[ptr WpDrmLeaseV1](cast[ptr Proxy](wpDrmLeaseRequestV1).marshal_flags(WpDrmLeaseRequestV1Request_submit.ord, addr wp_drm_lease_v1_interface, cast[ptr Proxy](wpDrmLeaseRequestV1).get_version(), WL_MARSHAL_FLAG_DESTROY, nil))
type WpDrmLeaseV1Listener* = object
  leaseFd*: proc(
    data: pointer;
    wpDrmLeaseV1: ptr WpDrmLeaseV1;
    leasedFd: int32;
  ) {.nimcall.}
  finished*: proc(
    data: pointer;
    wpDrmLeaseV1: ptr WpDrmLeaseV1;
  ) {.nimcall.}
proc addListener*(wpDrmLeaseV1: ptr WpDrmLeaseV1; listener: ptr WpDrmLeaseV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](wpDrmLeaseV1).add_listener(listener, data)

proc setUserData*(wpDrmLeaseV1: ptr WpDrmLeaseV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpDrmLeaseV1).set_user_data(user_data)
proc getUserData*(wpDrmLeaseV1: ptr WpDrmLeaseV1): pointer {.inline.} =
  cast[ptr Proxy](wpDrmLeaseV1).get_user_data()
proc getVersion*(wpDrmLeaseV1: ptr WpDrmLeaseV1): uint32 {.inline.} =
  cast[ptr Proxy](wpDrmLeaseV1).get_version()
proc destroy*(wpDrmLeaseV1: ptr WpDrmLeaseV1) {.inline.} =
  ## destroys the lease object
  ## 
  ## The client should send this to indicate that it no longer wishes to use
  ## this lease. The compositor should use drmModeRevokeLease on the
  ## appropriate file descriptor, if necessary.
  ## 
  ## Upon destruction, the compositor should advertise the connector for
  ## leasing again by sending the connector event through the
  ## wp_drm_lease_device_v1 interface.
  ## 
  cast[ptr Proxy](wpDrmLeaseV1).marshal_flags(WpDrmLeaseV1Request_destroy.ord, nil, cast[ptr Proxy](wpDrmLeaseV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
