# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The color_representation_v1 CLIENT protocol
## ###########################################
## 
## Interfaces
## ==========
## 
## * wp_color_representation_manager_v1
## * wp_color_representation_surface_v1
## 
## Copyright
## =========
## 
## Copyright 2022 Simon Ser
## Copyright 2022 Red Hat, Inc.
## Copyright 2022 Collabora, Ltd.
## Copyright 2022-2025 Red Hat, Inc.
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type WpColorRepresentationManagerV1Listener* = object
  supportedAlphaMode*: proc(
    data: pointer;
    wpColorRepresentationManagerV1: ptr WpColorRepresentationManagerV1;
    alphaMode: uint32;
  ) {.nimcall.}
  supportedCoefficientsAndRanges*: proc(
    data: pointer;
    wpColorRepresentationManagerV1: ptr WpColorRepresentationManagerV1;
    coefficients: uint32;
    range: uint32;
  ) {.nimcall.}
  done*: proc(
    data: pointer;
    wpColorRepresentationManagerV1: ptr WpColorRepresentationManagerV1;
  ) {.nimcall.}
proc addListener*(wpColorRepresentationManagerV1: ptr WpColorRepresentationManagerV1; listener: ptr WpColorRepresentationManagerV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](wpColorRepresentationManagerV1).add_listener(listener, data)

proc setUserData*(wpColorRepresentationManagerV1: ptr WpColorRepresentationManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpColorRepresentationManagerV1).set_user_data(user_data)
proc getUserData*(wpColorRepresentationManagerV1: ptr WpColorRepresentationManagerV1): pointer {.inline.} =
  cast[ptr Proxy](wpColorRepresentationManagerV1).get_user_data()
proc getVersion*(wpColorRepresentationManagerV1: ptr WpColorRepresentationManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](wpColorRepresentationManagerV1).get_version()
proc destroy*(wpColorRepresentationManagerV1: ptr WpColorRepresentationManagerV1) {.inline.} =
  ## destroy the manager
  ## 
  ## Destroy the wp_color_representation_manager_v1 object. This does not
  ## affect any other objects in any way.
  ## 
  cast[ptr Proxy](wpColorRepresentationManagerV1).marshal_flags(WpColorRepresentationManagerV1Request_destroy.ord, nil, cast[ptr Proxy](wpColorRepresentationManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getSurface*(wpColorRepresentationManagerV1: ptr WpColorRepresentationManagerV1; surface: ptr Surface): ptr WpColorRepresentationSurfaceV1 {.inline.} =
  ## create a color representation interface for a wl_surface
  ## 
  ## If a wp_color_representation_surface_v1 object already exists for the
  ## given wl_surface, the protocol error surface_exists is raised.
  ## 
  ## This creates a new color wp_color_representation_surface_v1 object for
  ## the given wl_surface.
  ## 
  ## See the wp_color_representation_surface_v1 interface for more details.
  ## 
  cast[ptr WpColorRepresentationSurfaceV1](cast[ptr Proxy](wpColorRepresentationManagerV1).marshal_flags(WpColorRepresentationManagerV1Request_get_surface.ord, addr wp_color_representation_surface_v1_interface, cast[ptr Proxy](wpColorRepresentationManagerV1).get_version(), 0, nil, surface))
proc setUserData*(wpColorRepresentationSurfaceV1: ptr WpColorRepresentationSurfaceV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpColorRepresentationSurfaceV1).set_user_data(user_data)
proc getUserData*(wpColorRepresentationSurfaceV1: ptr WpColorRepresentationSurfaceV1): pointer {.inline.} =
  cast[ptr Proxy](wpColorRepresentationSurfaceV1).get_user_data()
proc getVersion*(wpColorRepresentationSurfaceV1: ptr WpColorRepresentationSurfaceV1): uint32 {.inline.} =
  cast[ptr Proxy](wpColorRepresentationSurfaceV1).get_version()
proc destroy*(wpColorRepresentationSurfaceV1: ptr WpColorRepresentationSurfaceV1) {.inline.} =
  ## destroy the color representation
  ## 
  ## Destroy the wp_color_representation_surface_v1 object.
  ## 
  ## Destroying this object unsets all the color representation metadata from
  ## the surface. See the wp_color_representation_surface_v1 interface
  ## description for how a compositor handles a surface without color
  ## representation metadata. Unsetting is double-buffered state, see
  ## wl_surface.commit.
  ## 
  cast[ptr Proxy](wpColorRepresentationSurfaceV1).marshal_flags(WpColorRepresentationSurfaceV1Request_destroy.ord, nil, cast[ptr Proxy](wpColorRepresentationSurfaceV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setAlphaMode*(wpColorRepresentationSurfaceV1: ptr WpColorRepresentationSurfaceV1; alphaMode: uint32) {.inline.} =
  ## set the surface alpha mode
  ## 
  ## If this protocol object is inert, the protocol error inert is raised.
  ## 
  ## Assuming an alpha channel exists, it is always linear. The alpha mode
  ## determines whether and how the color channels include pre-multiplied
  ## alpha. Using straight alpha might have performance benefits.
  ## 
  ## Only alpha modes advertised by the compositor are allowed to be used as
  ## argument for this request. The "alpha_mode" protocol error is raised
  ## otherwise.
  ## 
  ## Alpha mode is double buffered, see wl_surface.commit.
  ## 
  cast[ptr Proxy](wpColorRepresentationSurfaceV1).marshal_flags(WpColorRepresentationSurfaceV1Request_set_alpha_mode.ord, nil, cast[ptr Proxy](wpColorRepresentationSurfaceV1).get_version(), 0, alphaMode)
proc setCoefficientsAndRange*(wpColorRepresentationSurfaceV1: ptr WpColorRepresentationSurfaceV1; coefficients: uint32; range: uint32) {.inline.} =
  ## set the matrix coefficients and range
  ## 
  ## If this protocol object is inert, the protocol error inert is raised.
  ## 
  ## Set the matrix coefficients and video range which defines the formula
  ## and the related constants used to derive red, green and blue signals.
  ## Usually coefficients correspond to MatrixCoefficients code points in
  ## H.273.
  ## 
  ## Only combinations advertised by the compositor are allowed to be used as
  ## argument for this request. The "coefficients" protocol error is raised
  ## otherwise.
  ## 
  ## A call to wl_surface.commit verifies that the pixel format and the
  ## coefficients-range combination in the committed surface contents are
  ## compatible, if contents exist. The "pixel_format" protocol error is
  ## raised otherwise.
  ## 
  ## A pixel format is compatible with the coefficients-range combination if
  ## the related equations and conventions as defined in H.273 can produce
  ## the color channels (RGB or YCbCr) of the pixel format.
  ## 
  ## For the definition of the supported combination, see the
  ## wp_color_representation_surface_v1::coefficients and
  ## wp_color_representation_surface_v1::range enums.
  ## 
  ## The coefficients-range combination is double-buffered, see
  ## wl_surface.commit.
  ## 
  cast[ptr Proxy](wpColorRepresentationSurfaceV1).marshal_flags(WpColorRepresentationSurfaceV1Request_set_coefficients_and_range.ord, nil, cast[ptr Proxy](wpColorRepresentationSurfaceV1).get_version(), 0, coefficients, range)
proc setChromaLocation*(wpColorRepresentationSurfaceV1: ptr WpColorRepresentationSurfaceV1; chromaLocation: uint32) {.inline.} =
  ## set the chroma location
  ## 
  ## If this protocol object is inert, the protocol error inert is raised.
  ## 
  ## Set the chroma location type which defines the position of downsampled
  ## chroma samples, corresponding to Chroma420SampleLocType code points in
  ## H.273.
  ## 
  ## A call to wl_surface.commit verifies that the pixel format and chroma
  ## location type in the committed surface contents are compatible, if
  ## contents exist. The "pixel_format" protocol error is raised otherwise.
  ## 
  ## For the definition of the supported chroma location types, see the
  ## wp_color_representation_surface_v1::chroma_location enum.
  ## 
  ## The chroma location type is double-buffered, see wl_surface.commit.
  ## 
  cast[ptr Proxy](wpColorRepresentationSurfaceV1).marshal_flags(WpColorRepresentationSurfaceV1Request_set_chroma_location.ord, nil, cast[ptr Proxy](wpColorRepresentationSurfaceV1).get_version(), 0, chromaLocation)
