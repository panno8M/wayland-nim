# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import code
export code

## The ext_session_lock_v1 SERVER protocol
## #######################################
## 
## Interfaces
## ==========
## 
## * ext_session_lock_manager_v1
## * ext_session_lock_v1
## * ext_session_lock_surface_v1
## 
## Copyright
## =========
## 
## Copyright 2021 Isaac Freund
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice shall be included in
## all copies or substantial portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
## THE SOFTWARE.
## 

type ExtSessionLockManagerV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  lock*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
  ) {.nimcall.}

type ExtSessionLockV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  getLockSurface*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    surface: ptr Resource;
    output: ptr Resource;
  ) {.nimcall.}
  unlockAndDestroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc extSessionLockV1SendLocked*(resource: ptr Resource) {.inline, exportc: "ext_session_lock_v1_send_locked".} =
  ## Sends an locked event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ExtSessionLockV1Event_locked.ord)

proc extSessionLockV1SendFinished*(resource: ptr Resource) {.inline, exportc: "ext_session_lock_v1_send_finished".} =
  ## Sends an finished event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ExtSessionLockV1Event_finished.ord)

type ExtSessionLockSurfaceV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  ackConfigure*: proc(
    client: ptr Client;
    resource: ptr Resource;
    serial: uint32;
  ) {.nimcall.}

proc extSessionLockSurfaceV1SendConfigure*(resource: ptr Resource; serial: uint32; width: uint32; height: uint32) {.inline, exportc: "ext_session_lock_surface_v1_send_configure".} =
  ## Sends an configure event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial for use in ack_configure
  resource.post_event(ExtSessionLockSurfaceV1Event_configure.ord, serial, width, height)

