# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import wayland/protocols/stable/xdgShell/client as xdgShell_client
import code
export code

## The xdg_dialog_v1 CLIENT protocol
## #################################
## 
## Interfaces
## ==========
## 
## * xdg_wm_dialog_v1
## * xdg_dialog_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2023 Carlos Garnacho
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(xdgWmDialogV1: ptr XdgWmDialogV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](xdgWmDialogV1).set_user_data(user_data)
proc getUserData*(xdgWmDialogV1: ptr XdgWmDialogV1): pointer {.inline.} =
  cast[ptr Proxy](xdgWmDialogV1).get_user_data()
proc getVersion*(xdgWmDialogV1: ptr XdgWmDialogV1): uint32 {.inline.} =
  cast[ptr Proxy](xdgWmDialogV1).get_version()
proc destroy*(xdgWmDialogV1: ptr XdgWmDialogV1) {.inline.} =
  ## destroy the dialog manager object
  ## 
  ## Destroys the xdg_wm_dialog_v1 object. This does not affect
  ## the xdg_dialog_v1 objects generated through it.
  ## 
  cast[ptr Proxy](xdgWmDialogV1).marshal_flags(XdgWmDialogV1Request_destroy.ord, nil, cast[ptr Proxy](xdgWmDialogV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getXdgDialog*(xdgWmDialogV1: ptr XdgWmDialogV1; toplevel: ptr XdgToplevel): ptr XdgDialogV1 {.inline.} =
  ## create a dialog object
  ## 
  ## Creates a xdg_dialog_v1 object for the given toplevel. See the interface
  ## description for more details.
  ## 
  ## 	Compositors must raise an already_used error if clients attempt to
  ## 	create multiple xdg_dialog_v1 objects for the same xdg_toplevel.
  ## 
  cast[ptr XdgDialogV1](cast[ptr Proxy](xdgWmDialogV1).marshal_flags(XdgWmDialogV1Request_get_xdg_dialog.ord, addr xdg_dialog_v1_interface, cast[ptr Proxy](xdgWmDialogV1).get_version(), 0, nil, toplevel))
proc setUserData*(xdgDialogV1: ptr XdgDialogV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](xdgDialogV1).set_user_data(user_data)
proc getUserData*(xdgDialogV1: ptr XdgDialogV1): pointer {.inline.} =
  cast[ptr Proxy](xdgDialogV1).get_user_data()
proc getVersion*(xdgDialogV1: ptr XdgDialogV1): uint32 {.inline.} =
  cast[ptr Proxy](xdgDialogV1).get_version()
proc destroy*(xdgDialogV1: ptr XdgDialogV1) {.inline.} =
  ## destroy the dialog object
  ## 
  ## Destroys the xdg_dialog_v1 object. If this object is destroyed
  ## before the related xdg_toplevel, the compositor should unapply its
  ## effects.
  ## 
  cast[ptr Proxy](xdgDialogV1).marshal_flags(XdgDialogV1Request_destroy.ord, nil, cast[ptr Proxy](xdgDialogV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setModal*(xdgDialogV1: ptr XdgDialogV1) {.inline.} =
  ## mark dialog as modal
  ## 
  ## Hints that the dialog has "modal" behavior. Modal dialogs typically
  ## require to be fully addressed by the user (i.e. closed) before resuming
  ## interaction with the parent toplevel, and may require a distinct
  ## presentation.
  ## 
  ## Clients must implement the logic to filter events in the parent
  ## toplevel on their own.
  ## 
  ## Compositors may choose any policy in event delivery to the parent
  ## toplevel, from delivering all events unfiltered to using them for
  ## internal consumption.
  ## 
  cast[ptr Proxy](xdgDialogV1).marshal_flags(XdgDialogV1Request_set_modal.ord, nil, cast[ptr Proxy](xdgDialogV1).get_version(), 0)
proc unsetModal*(xdgDialogV1: ptr XdgDialogV1) {.inline.} =
  ## mark dialog as not modal
  ## 
  ## Drops the hint that this dialog has "modal" behavior. See
  ## xdg_dialog_v1.set_modal for more details.
  ## 
  cast[ptr Proxy](xdgDialogV1).marshal_flags(XdgDialogV1Request_unset_modal.ord, nil, cast[ptr Proxy](xdgDialogV1).get_version(), 0)
