# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The ext_transient_seat_v1 CLIENT protocol
## #########################################
## 
## Interfaces
## ==========
## 
## * ext_transient_seat_manager_v1
## * ext_transient_seat_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2020 - 2023 Andri Yngvason
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(extTransientSeatManagerV1: ptr ExtTransientSeatManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](extTransientSeatManagerV1).set_user_data(user_data)
proc getUserData*(extTransientSeatManagerV1: ptr ExtTransientSeatManagerV1): pointer {.inline.} =
  cast[ptr Proxy](extTransientSeatManagerV1).get_user_data()
proc getVersion*(extTransientSeatManagerV1: ptr ExtTransientSeatManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](extTransientSeatManagerV1).get_version()
proc create*(extTransientSeatManagerV1: ptr ExtTransientSeatManagerV1): ptr ExtTransientSeatV1 {.inline.} =
  ## create a transient seat
  ## 
  ## Create a new seat that is removed when the client side transient seat
  ## object is destroyed.
  ## 
  ## The actual seat may be removed sooner, in which case the transient seat
  ## object shall become inert.
  ## 
  cast[ptr ExtTransientSeatV1](cast[ptr Proxy](extTransientSeatManagerV1).marshal_flags(ExtTransientSeatManagerV1Request_create.ord, addr ext_transient_seat_v1_interface, cast[ptr Proxy](extTransientSeatManagerV1).get_version(), 0, nil))
proc destroy*(extTransientSeatManagerV1: ptr ExtTransientSeatManagerV1) {.inline.} =
  ## destroy the manager
  ## 
  ## Destroy the manager.
  ## 
  ## All objects created by the manager will remain valid until they are
  ## destroyed themselves.
  ## 
  cast[ptr Proxy](extTransientSeatManagerV1).marshal_flags(ExtTransientSeatManagerV1Request_destroy.ord, nil, cast[ptr Proxy](extTransientSeatManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ExtTransientSeatV1Listener* = object
  ready*: proc(
    data: pointer;
    extTransientSeatV1: ptr ExtTransientSeatV1;
    globalName: uint32;
  ) {.nimcall.}
  denied*: proc(
    data: pointer;
    extTransientSeatV1: ptr ExtTransientSeatV1;
  ) {.nimcall.}
proc addListener*(extTransientSeatV1: ptr ExtTransientSeatV1; listener: ptr ExtTransientSeatV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](extTransientSeatV1).add_listener(listener, data)

proc setUserData*(extTransientSeatV1: ptr ExtTransientSeatV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](extTransientSeatV1).set_user_data(user_data)
proc getUserData*(extTransientSeatV1: ptr ExtTransientSeatV1): pointer {.inline.} =
  cast[ptr Proxy](extTransientSeatV1).get_user_data()
proc getVersion*(extTransientSeatV1: ptr ExtTransientSeatV1): uint32 {.inline.} =
  cast[ptr Proxy](extTransientSeatV1).get_version()
proc destroy*(extTransientSeatV1: ptr ExtTransientSeatV1) {.inline.} =
  ## destroy transient seat
  ## 
  ## When the transient seat object is destroyed by the client, the
  ## associated seat created by the compositor is also destroyed.
  ## 
  cast[ptr Proxy](extTransientSeatV1).marshal_flags(ExtTransientSeatV1Request_destroy.ord, nil, cast[ptr Proxy](extTransientSeatV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
