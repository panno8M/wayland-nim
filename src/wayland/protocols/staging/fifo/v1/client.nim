# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The fifo_v1 CLIENT protocol
## ###########################
## 
## Interfaces
## ==========
## 
## * wp_fifo_manager_v1
## * wp_fifo_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2023 Valve Corporation
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(wpFifoManagerV1: ptr WpFifoManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpFifoManagerV1).set_user_data(user_data)
proc getUserData*(wpFifoManagerV1: ptr WpFifoManagerV1): pointer {.inline.} =
  cast[ptr Proxy](wpFifoManagerV1).get_user_data()
proc getVersion*(wpFifoManagerV1: ptr WpFifoManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](wpFifoManagerV1).get_version()
proc destroy*(wpFifoManagerV1: ptr WpFifoManagerV1) {.inline.} =
  ## unbind from the manager interface
  ## 
  ## Informs the server that the client will no longer be using
  ## this protocol object. Existing objects created by this object
  ## are not affected.
  ## 
  cast[ptr Proxy](wpFifoManagerV1).marshal_flags(WpFifoManagerV1Request_destroy.ord, nil, cast[ptr Proxy](wpFifoManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getFifo*(wpFifoManagerV1: ptr WpFifoManagerV1; surface: ptr Surface): ptr WpFifoV1 {.inline.} =
  ## request fifo interface for surface
  ## 
  ## Establish a fifo object for a surface that may be used to add
  ## display refresh constraints to content updates.
  ## 
  ## Only one such object may exist for a surface and attempting
  ## to create more than one will result in an already_exists
  ## protocol error. If a surface is acted on by multiple software
  ## components, general best practice is that only the component
  ## performing wl_surface.attach operations should use this protocol.
  ## 
  cast[ptr WpFifoV1](cast[ptr Proxy](wpFifoManagerV1).marshal_flags(WpFifoManagerV1Request_get_fifo.ord, addr wp_fifo_v1_interface, cast[ptr Proxy](wpFifoManagerV1).get_version(), 0, nil, surface))
proc setUserData*(wpFifoV1: ptr WpFifoV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpFifoV1).set_user_data(user_data)
proc getUserData*(wpFifoV1: ptr WpFifoV1): pointer {.inline.} =
  cast[ptr Proxy](wpFifoV1).get_user_data()
proc getVersion*(wpFifoV1: ptr WpFifoV1): uint32 {.inline.} =
  cast[ptr Proxy](wpFifoV1).get_version()
proc setBarrier*(wpFifoV1: ptr WpFifoV1) {.inline.} =
  ## sets the start point for a fifo constraint
  ## 
  ## When the content update containing the "set_barrier" is applied,
  ## it sets a "fifo_barrier" condition on the surface associated with
  ## the fifo object. The condition is cleared immediately after the
  ## following latching deadline for non-tearing presentation.
  ## 
  ## The compositor may clear the condition early if it must do so to
  ## ensure client forward progress assumptions.
  ## 
  ## To wait for this condition to clear, use the "wait_barrier" request.
  ## 
  ## "set_barrier" is double-buffered state, see wl_surface.commit.
  ## 
  ## Requesting set_barrier after the fifo object's surface is
  ## destroyed will generate a "surface_destroyed" error.
  ## 
  cast[ptr Proxy](wpFifoV1).marshal_flags(WpFifoV1Request_set_barrier.ord, nil, cast[ptr Proxy](wpFifoV1).get_version(), 0)
proc waitBarrier*(wpFifoV1: ptr WpFifoV1) {.inline.} =
  ## adds a fifo constraint to a content update
  ## 
  ## Indicate that this content update is not ready while a
  ## "fifo_barrier" condition is present on the surface.
  ## 
  ## This means that when the content update containing "set_barrier"
  ## was made active at a latching deadline, it will be active for
  ## at least one refresh cycle. A content update which is allowed to
  ## tear might become active after a latching deadline if no content
  ## update became active at the deadline.
  ## 
  ## The constraint must be ignored if the surface is a subsurface in
  ## synchronized mode. If the surface is not being updated by the
  ## compositor (off-screen, occluded) the compositor may ignore the
  ## constraint. Clients must use an additional mechanism such as
  ## frame callbacks or timestamps to ensure throttling occurs under
  ## all conditions.
  ## 
  ## "wait_barrier" is double-buffered state, see wl_surface.commit.
  ## 
  ## Requesting "wait_barrier" after the fifo object's surface is
  ## destroyed will generate a "surface_destroyed" error.
  ## 
  cast[ptr Proxy](wpFifoV1).marshal_flags(WpFifoV1Request_wait_barrier.ord, nil, cast[ptr Proxy](wpFifoV1).get_version(), 0)
proc destroy*(wpFifoV1: ptr WpFifoV1) {.inline.} =
  ## destroy the fifo interface
  ## 
  ## Informs the server that the client will no longer be using
  ## this protocol object.
  ## 
  ## Surface state changes previously made by this protocol are
  ## unaffected by this object's destruction.
  ## 
  cast[ptr Proxy](wpFifoV1).marshal_flags(WpFifoV1Request_destroy.ord, nil, cast[ptr Proxy](wpFifoV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
