# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The content_type_v1 CLIENT protocol
## ###################################
## 
## Interfaces
## ==========
## 
## * wp_content_type_manager_v1
## * wp_content_type_v1
## 
## Copyright
## =========
## 
## Copyright © 2021 Emmanuel Gil Peyrot
## Copyright © 2022 Xaver Hugl
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(wpContentTypeManagerV1: ptr WpContentTypeManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpContentTypeManagerV1).set_user_data(user_data)
proc getUserData*(wpContentTypeManagerV1: ptr WpContentTypeManagerV1): pointer {.inline.} =
  cast[ptr Proxy](wpContentTypeManagerV1).get_user_data()
proc getVersion*(wpContentTypeManagerV1: ptr WpContentTypeManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](wpContentTypeManagerV1).get_version()
proc destroy*(wpContentTypeManagerV1: ptr WpContentTypeManagerV1) {.inline.} =
  ## destroy the content type manager object
  ## 
  ## Destroy the content type manager. This doesn't destroy objects created
  ## with the manager.
  ## 
  cast[ptr Proxy](wpContentTypeManagerV1).marshal_flags(WpContentTypeManagerV1Request_destroy.ord, nil, cast[ptr Proxy](wpContentTypeManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getSurfaceContentType*(wpContentTypeManagerV1: ptr WpContentTypeManagerV1; surface: ptr Surface): ptr WpContentTypeV1 {.inline.} =
  ## create a new content type object
  ## 
  ## Create a new content type object associated with the given surface.
  ## 
  ## Creating a wp_content_type_v1 from a wl_surface which already has one
  ## attached is a client error: already_constructed.
  ## 
  cast[ptr WpContentTypeV1](cast[ptr Proxy](wpContentTypeManagerV1).marshal_flags(WpContentTypeManagerV1Request_get_surface_content_type.ord, addr wp_content_type_v1_interface, cast[ptr Proxy](wpContentTypeManagerV1).get_version(), 0, nil, surface))
proc setUserData*(wpContentTypeV1: ptr WpContentTypeV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpContentTypeV1).set_user_data(user_data)
proc getUserData*(wpContentTypeV1: ptr WpContentTypeV1): pointer {.inline.} =
  cast[ptr Proxy](wpContentTypeV1).get_user_data()
proc getVersion*(wpContentTypeV1: ptr WpContentTypeV1): uint32 {.inline.} =
  cast[ptr Proxy](wpContentTypeV1).get_version()
proc destroy*(wpContentTypeV1: ptr WpContentTypeV1) {.inline.} =
  ## destroy the content type object
  ## 
  ## Switch back to not specifying the content type of this surface. This is
  ## equivalent to setting the content type to none, including double
  ## buffering semantics. See set_content_type for details.
  ## 
  cast[ptr Proxy](wpContentTypeV1).marshal_flags(WpContentTypeV1Request_destroy.ord, nil, cast[ptr Proxy](wpContentTypeV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setContentType*(wpContentTypeV1: ptr WpContentTypeV1; contentType: uint32) {.inline.} =
  ## specify the content type
  ## 
  ## Set the surface content type. This informs the compositor that the
  ## client believes it is displaying buffers matching this content type.
  ## 
  ## This is purely a hint for the compositor, which can be used to adjust
  ## its behavior or hardware settings to fit the presented content best.
  ## 
  ## The content type is double-buffered state, see wl_surface.commit for
  ## details.
  ## 
  cast[ptr Proxy](wpContentTypeV1).marshal_flags(WpContentTypeV1Request_set_content_type.ord, nil, cast[ptr Proxy](wpContentTypeV1).get_version(), 0, contentType)
