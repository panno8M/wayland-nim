# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The xdg_activation_v1 CLIENT protocol
## #####################################
## 
## Interfaces
## ==========
## 
## * xdg_activation_v1
## * xdg_activation_token_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2020 Aleix Pol Gonzalez 

proc setUserData*(xdgActivationV1: ptr XdgActivationV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](xdgActivationV1).set_user_data(user_data)
proc getUserData*(xdgActivationV1: ptr XdgActivationV1): pointer {.inline.} =
  cast[ptr Proxy](xdgActivationV1).get_user_data()
proc getVersion*(xdgActivationV1: ptr XdgActivationV1): uint32 {.inline.} =
  cast[ptr Proxy](xdgActivationV1).get_version()
proc destroy*(xdgActivationV1: ptr XdgActivationV1) {.inline.} =
  ## destroy the xdg_activation object
  ## 
  ## Notify the compositor that the xdg_activation object will no longer be
  ## used.
  ## 
  ## The child objects created via this interface are unaffected and should
  ## be destroyed separately.
  ## 
  cast[ptr Proxy](xdgActivationV1).marshal_flags(XdgActivationV1Request_destroy.ord, nil, cast[ptr Proxy](xdgActivationV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getActivationToken*(xdgActivationV1: ptr XdgActivationV1): ptr XdgActivationTokenV1 {.inline.} =
  ## requests a token
  ## 
  ## Creates an xdg_activation_token_v1 object that will provide
  ## the initiating client with a unique token for this activation. This
  ## token should be offered to the clients to be activated.
  ## 
  cast[ptr XdgActivationTokenV1](cast[ptr Proxy](xdgActivationV1).marshal_flags(XdgActivationV1Request_get_activation_token.ord, addr xdg_activation_token_v1_interface, cast[ptr Proxy](xdgActivationV1).get_version(), 0, nil))
proc activate*(xdgActivationV1: ptr XdgActivationV1; token: cstring; surface: ptr Surface) {.inline.} =
  ## notify new interaction being available
  ## 
  ## Requests surface activation. It's up to the compositor to display
  ## this information as desired, for example by placing the surface above
  ## the rest.
  ## 
  ## The compositor may know who requested this by checking the activation
  ## token and might decide not to follow through with the activation if it's
  ## considered unwanted.
  ## 
  ## Compositors can ignore unknown activation tokens when an invalid
  ## token is passed.
  ## 
  cast[ptr Proxy](xdgActivationV1).marshal_flags(XdgActivationV1Request_activate.ord, nil, cast[ptr Proxy](xdgActivationV1).get_version(), 0, token, surface)
type XdgActivationTokenV1Listener* = object
  done*: proc(
    data: pointer;
    xdgActivationTokenV1: ptr XdgActivationTokenV1;
    token: cstring;
  ) {.nimcall.}
proc addListener*(xdgActivationTokenV1: ptr XdgActivationTokenV1; listener: ptr XdgActivationTokenV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](xdgActivationTokenV1).add_listener(listener, data)

proc setUserData*(xdgActivationTokenV1: ptr XdgActivationTokenV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](xdgActivationTokenV1).set_user_data(user_data)
proc getUserData*(xdgActivationTokenV1: ptr XdgActivationTokenV1): pointer {.inline.} =
  cast[ptr Proxy](xdgActivationTokenV1).get_user_data()
proc getVersion*(xdgActivationTokenV1: ptr XdgActivationTokenV1): uint32 {.inline.} =
  cast[ptr Proxy](xdgActivationTokenV1).get_version()
proc setSerial*(xdgActivationTokenV1: ptr XdgActivationTokenV1; serial: uint32; seat: ptr Seat) {.inline.} =
  ## specifies the seat and serial of the activating event
  ## 
  ## Provides information about the seat and serial event that requested the
  ## token.
  ## 
  ## The serial can come from an input or focus event. For instance, if a
  ## click triggers the launch of a third-party client, the launcher client
  ## should send a set_serial request with the serial and seat from the
  ## wl_pointer.button event.
  ## 
  ## Some compositors might refuse to activate toplevels when the token
  ## doesn't have a valid and recent enough event serial.
  ## 
  ## Must be sent before commit. This information is optional.
  ## 
  cast[ptr Proxy](xdgActivationTokenV1).marshal_flags(XdgActivationTokenV1Request_set_serial.ord, nil, cast[ptr Proxy](xdgActivationTokenV1).get_version(), 0, serial, seat)
proc setAppId*(xdgActivationTokenV1: ptr XdgActivationTokenV1; appId: cstring) {.inline.} =
  ## specifies the application being activated
  ## 
  ## The requesting client can specify an app_id to associate the token
  ## being created with it.
  ## 
  ## Must be sent before commit. This information is optional.
  ## 
  cast[ptr Proxy](xdgActivationTokenV1).marshal_flags(XdgActivationTokenV1Request_set_app_id.ord, nil, cast[ptr Proxy](xdgActivationTokenV1).get_version(), 0, appId)
proc setSurface*(xdgActivationTokenV1: ptr XdgActivationTokenV1; surface: ptr Surface) {.inline.} =
  ## specifies the surface requesting activation
  ## 
  ## This request sets the surface requesting the activation. Note, this is
  ## different from the surface that will be activated.
  ## 
  ## Some compositors might refuse to activate toplevels when the token
  ## doesn't have a requesting surface.
  ## 
  ## Must be sent before commit. This information is optional.
  ## 
  cast[ptr Proxy](xdgActivationTokenV1).marshal_flags(XdgActivationTokenV1Request_set_surface.ord, nil, cast[ptr Proxy](xdgActivationTokenV1).get_version(), 0, surface)
proc commit*(xdgActivationTokenV1: ptr XdgActivationTokenV1) {.inline.} =
  ## issues the token request
  ## 
  ## Requests an activation token based on the different parameters that
  ## have been offered through set_serial, set_surface and set_app_id.
  ## 
  cast[ptr Proxy](xdgActivationTokenV1).marshal_flags(XdgActivationTokenV1Request_commit.ord, nil, cast[ptr Proxy](xdgActivationTokenV1).get_version(), 0)
proc destroy*(xdgActivationTokenV1: ptr XdgActivationTokenV1) {.inline.} =
  ## destroy the xdg_activation_token_v1 object
  ## 
  ## Notify the compositor that the xdg_activation_token_v1 object will no
  ## longer be used. The received token stays valid.
  ## 
  cast[ptr Proxy](xdgActivationTokenV1).marshal_flags(XdgActivationTokenV1Request_destroy.ord, nil, cast[ptr Proxy](xdgActivationTokenV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
