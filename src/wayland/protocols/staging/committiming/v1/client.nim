# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The commit_timing_v1 CLIENT protocol
## ####################################
## 
## Interfaces
## ==========
## 
## * wp_commit_timing_manager_v1
## * wp_commit_timer_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2023 Valve Corporation
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(wpCommitTimingManagerV1: ptr WpCommitTimingManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpCommitTimingManagerV1).set_user_data(user_data)
proc getUserData*(wpCommitTimingManagerV1: ptr WpCommitTimingManagerV1): pointer {.inline.} =
  cast[ptr Proxy](wpCommitTimingManagerV1).get_user_data()
proc getVersion*(wpCommitTimingManagerV1: ptr WpCommitTimingManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](wpCommitTimingManagerV1).get_version()
proc destroy*(wpCommitTimingManagerV1: ptr WpCommitTimingManagerV1) {.inline.} =
  ## unbind from the commit timing interface
  ## 
  ## Informs the server that the client will no longer be using
  ## this protocol object. Existing objects created by this object
  ## are not affected.
  ## 
  cast[ptr Proxy](wpCommitTimingManagerV1).marshal_flags(WpCommitTimingManagerV1Request_destroy.ord, nil, cast[ptr Proxy](wpCommitTimingManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getTimer*(wpCommitTimingManagerV1: ptr WpCommitTimingManagerV1; surface: ptr Surface): ptr WpCommitTimerV1 {.inline.} =
  ## request commit timer interface for surface
  ## 
  ## Establish a timing controller for a surface.
  ## 
  ## Only one commit timer can be created for a surface, or a
  ## commit_timer_exists protocol error will be generated.
  ## 
  cast[ptr WpCommitTimerV1](cast[ptr Proxy](wpCommitTimingManagerV1).marshal_flags(WpCommitTimingManagerV1Request_get_timer.ord, addr wp_commit_timer_v1_interface, cast[ptr Proxy](wpCommitTimingManagerV1).get_version(), 0, nil, surface))
proc setUserData*(wpCommitTimerV1: ptr WpCommitTimerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpCommitTimerV1).set_user_data(user_data)
proc getUserData*(wpCommitTimerV1: ptr WpCommitTimerV1): pointer {.inline.} =
  cast[ptr Proxy](wpCommitTimerV1).get_user_data()
proc getVersion*(wpCommitTimerV1: ptr WpCommitTimerV1): uint32 {.inline.} =
  cast[ptr Proxy](wpCommitTimerV1).get_version()
proc setTimestamp*(wpCommitTimerV1: ptr WpCommitTimerV1; tvSecHi: uint32; tvSecLo: uint32; tvNsec: uint32) {.inline.} =
  ## Specify time the following commit takes effect
  ## 
  ## Provide a timing constraint for a surface content update.
  ## 
  ## A set_timestamp request may be made before a wl_surface.commit to
  ## tell the compositor that the content is intended to be presented
  ## as closely as possible to, but not before, the specified time.
  ## The time is in the domain of the compositor's presentation clock.
  ## 
  ## An invalid_timestamp error will be generated for invalid tv_nsec.
  ## 
  ## If a timestamp already exists on the surface, a timestamp_exists
  ## error is generated.
  ## 
  ## Requesting set_timestamp after the commit_timer object's surface is
  ## destroyed will generate a "surface_destroyed" error.
  ## 
  cast[ptr Proxy](wpCommitTimerV1).marshal_flags(WpCommitTimerV1Request_set_timestamp.ord, nil, cast[ptr Proxy](wpCommitTimerV1).get_version(), 0, tvSecHi, tvSecLo, tvNsec)
proc destroy*(wpCommitTimerV1: ptr WpCommitTimerV1) {.inline.} =
  ## Destroy the timer
  ## 
  ## Informs the server that the client will no longer be using
  ## this protocol object.
  ## 
  ## Existing timing constraints are not affected by the destruction.
  ## 
  cast[ptr Proxy](wpCommitTimerV1).marshal_flags(WpCommitTimerV1Request_destroy.ord, nil, cast[ptr Proxy](wpCommitTimerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
