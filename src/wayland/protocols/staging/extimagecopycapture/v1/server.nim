# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import wayland/protocols/staging/extImageCaptureSource/v1/server as extImageCaptureSource_server
import code
export code

## The ext_image_copy_capture_v1 SERVER protocol
## #############################################
## 
## Interfaces
## ==========
## 
## * ext_image_copy_capture_manager_v1
## * ext_image_copy_capture_session_v1
## * ext_image_copy_capture_frame_v1
## * ext_image_copy_capture_cursor_session_v1
## 
## Copyright
## =========
## 
## Copyright © 2021-2023 Andri Yngvason
## Copyright © 2024 Simon Ser
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type ExtImageCopyCaptureManagerV1Interface* = object
  createSession*: proc(
    client: ptr Client;
    resource: ptr Resource;
    session: uint32;
    source: ptr Resource;
    options: uint32;
  ) {.nimcall.}
  createPointerCursorSession*: proc(
    client: ptr Client;
    resource: ptr Resource;
    session: uint32;
    source: ptr Resource;
    pointer: ptr Resource;
  ) {.nimcall.}
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

type ExtImageCopyCaptureSessionV1Interface* = object
  createFrame*: proc(
    client: ptr Client;
    resource: ptr Resource;
    frame: uint32;
  ) {.nimcall.}
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc extImageCopyCaptureSessionV1SendBufferSize*(resource: ptr Resource; width: uint32; height: uint32) {.inline, exportc: "ext_image_copy_capture_session_v1_send_buffer_size".} =
  ## Sends an buffer_size event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *width*: buffer width
  ## * *height*: buffer height
  resource.post_event(ExtImageCopyCaptureSessionV1Event_buffer_size.ord, width, height)

proc extImageCopyCaptureSessionV1SendShmFormat*(resource: ptr Resource; format: uint32) {.inline, exportc: "ext_image_copy_capture_session_v1_send_shm_format".} =
  ## Sends an shm_format event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *format*: shm format
  resource.post_event(ExtImageCopyCaptureSessionV1Event_shm_format.ord, format)

proc extImageCopyCaptureSessionV1SendDmabufDevice*(resource: ptr Resource; device: ptr Array) {.inline, exportc: "ext_image_copy_capture_session_v1_send_dmabuf_device".} =
  ## Sends an dmabuf_device event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *device*: device dev_t value
  resource.post_event(ExtImageCopyCaptureSessionV1Event_dmabuf_device.ord, device)

proc extImageCopyCaptureSessionV1SendDmabufFormat*(resource: ptr Resource; format: uint32; modifiers: ptr Array) {.inline, exportc: "ext_image_copy_capture_session_v1_send_dmabuf_format".} =
  ## Sends an dmabuf_format event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *format*: drm format code
  ## * *modifiers*: drm format modifiers
  resource.post_event(ExtImageCopyCaptureSessionV1Event_dmabuf_format.ord, format, modifiers)

proc extImageCopyCaptureSessionV1SendDone*(resource: ptr Resource) {.inline, exportc: "ext_image_copy_capture_session_v1_send_done".} =
  ## Sends an done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ExtImageCopyCaptureSessionV1Event_done.ord)

proc extImageCopyCaptureSessionV1SendStopped*(resource: ptr Resource) {.inline, exportc: "ext_image_copy_capture_session_v1_send_stopped".} =
  ## Sends an stopped event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ExtImageCopyCaptureSessionV1Event_stopped.ord)

type ExtImageCopyCaptureFrameV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  attachBuffer*: proc(
    client: ptr Client;
    resource: ptr Resource;
    buffer: ptr Resource;
  ) {.nimcall.}
  damageBuffer*: proc(
    client: ptr Client;
    resource: ptr Resource;
    x: int32;
    y: int32;
    width: int32;
    height: int32;
  ) {.nimcall.}
  capture*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc extImageCopyCaptureFrameV1SendTransform*(resource: ptr Resource; transform: uint32) {.inline, exportc: "ext_image_copy_capture_frame_v1_send_transform".} =
  ## Sends an transform event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ExtImageCopyCaptureFrameV1Event_transform.ord, transform)

proc extImageCopyCaptureFrameV1SendDamage*(resource: ptr Resource; x: int32; y: int32; width: int32; height: int32) {.inline, exportc: "ext_image_copy_capture_frame_v1_send_damage".} =
  ## Sends an damage event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *x*: damage x coordinate
  ## * *y*: damage y coordinate
  ## * *width*: damage width
  ## * *height*: damage height
  resource.post_event(ExtImageCopyCaptureFrameV1Event_damage.ord, x, y, width, height)

proc extImageCopyCaptureFrameV1SendPresentationTime*(resource: ptr Resource; tvSecHi: uint32; tvSecLo: uint32; tvNsec: uint32) {.inline, exportc: "ext_image_copy_capture_frame_v1_send_presentation_time".} =
  ## Sends an presentation_time event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *tv_sec_hi*: high 32 bits of the seconds part of the timestamp
  ## * *tv_sec_lo*: low 32 bits of the seconds part of the timestamp
  ## * *tv_nsec*: nanoseconds part of the timestamp
  resource.post_event(ExtImageCopyCaptureFrameV1Event_presentation_time.ord, tvSecHi, tvSecLo, tvNsec)

proc extImageCopyCaptureFrameV1SendReady*(resource: ptr Resource) {.inline, exportc: "ext_image_copy_capture_frame_v1_send_ready".} =
  ## Sends an ready event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ExtImageCopyCaptureFrameV1Event_ready.ord)

proc extImageCopyCaptureFrameV1SendFailed*(resource: ptr Resource; reason: uint32) {.inline, exportc: "ext_image_copy_capture_frame_v1_send_failed".} =
  ## Sends an failed event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ExtImageCopyCaptureFrameV1Event_failed.ord, reason)

type ExtImageCopyCaptureCursorSessionV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  getCaptureSession*: proc(
    client: ptr Client;
    resource: ptr Resource;
    session: uint32;
  ) {.nimcall.}

proc extImageCopyCaptureCursorSessionV1SendEnter*(resource: ptr Resource) {.inline, exportc: "ext_image_copy_capture_cursor_session_v1_send_enter".} =
  ## Sends an enter event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ExtImageCopyCaptureCursorSessionV1Event_enter.ord)

proc extImageCopyCaptureCursorSessionV1SendLeave*(resource: ptr Resource) {.inline, exportc: "ext_image_copy_capture_cursor_session_v1_send_leave".} =
  ## Sends an leave event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ExtImageCopyCaptureCursorSessionV1Event_leave.ord)

proc extImageCopyCaptureCursorSessionV1SendPosition*(resource: ptr Resource; x: int32; y: int32) {.inline, exportc: "ext_image_copy_capture_cursor_session_v1_send_position".} =
  ## Sends an position event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *x*: position x coordinates
  ## * *y*: position y coordinates
  resource.post_event(ExtImageCopyCaptureCursorSessionV1Event_position.ord, x, y)

proc extImageCopyCaptureCursorSessionV1SendHotspot*(resource: ptr Resource; x: int32; y: int32) {.inline, exportc: "ext_image_copy_capture_cursor_session_v1_send_hotspot".} =
  ## Sends an hotspot event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *x*: hotspot x coordinates
  ## * *y*: hotspot y coordinates
  resource.post_event(ExtImageCopyCaptureCursorSessionV1Event_hotspot.ord, x, y)

