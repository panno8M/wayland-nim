# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import wayland/protocols/stable/tablet/client as tablet_client
import code
export code

## The cursor_shape_v1 CLIENT protocol
## ###################################
## 
## Interfaces
## ==========
## 
## * wp_cursor_shape_manager_v1
## * wp_cursor_shape_device_v1
## 
## Copyright
## =========
## 
## Copyright 2018 The Chromium Authors
## Copyright 2023 Simon Ser
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(wpCursorShapeManagerV1: ptr WpCursorShapeManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpCursorShapeManagerV1).set_user_data(user_data)
proc getUserData*(wpCursorShapeManagerV1: ptr WpCursorShapeManagerV1): pointer {.inline.} =
  cast[ptr Proxy](wpCursorShapeManagerV1).get_user_data()
proc getVersion*(wpCursorShapeManagerV1: ptr WpCursorShapeManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](wpCursorShapeManagerV1).get_version()
proc destroy*(wpCursorShapeManagerV1: ptr WpCursorShapeManagerV1) {.inline.} =
  ## destroy the manager
  ## 
  ## Destroy the cursor shape manager.
  ## 
  cast[ptr Proxy](wpCursorShapeManagerV1).marshal_flags(WpCursorShapeManagerV1Request_destroy.ord, nil, cast[ptr Proxy](wpCursorShapeManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getPointer*(wpCursorShapeManagerV1: ptr WpCursorShapeManagerV1; pointer: ptr Pointer): ptr WpCursorShapeDeviceV1 {.inline.} =
  ## manage the cursor shape of a pointer device
  ## 
  ## Obtain a wp_cursor_shape_device_v1 for a wl_pointer object.
  ## 
  ## When the pointer capability is removed from the wl_seat, the
  ## wp_cursor_shape_device_v1 object becomes inert.
  ## 
  cast[ptr WpCursorShapeDeviceV1](cast[ptr Proxy](wpCursorShapeManagerV1).marshal_flags(WpCursorShapeManagerV1Request_get_pointer.ord, addr wp_cursor_shape_device_v1_interface, cast[ptr Proxy](wpCursorShapeManagerV1).get_version(), 0, nil, pointer))
proc getTabletToolV2*(wpCursorShapeManagerV1: ptr WpCursorShapeManagerV1; tabletTool: ptr ZwpTabletToolV2): ptr WpCursorShapeDeviceV1 {.inline.} =
  ## manage the cursor shape of a tablet tool device
  ## 
  ## Obtain a wp_cursor_shape_device_v1 for a zwp_tablet_tool_v2 object.
  ## 
  ## When the zwp_tablet_tool_v2 is removed, the wp_cursor_shape_device_v1
  ## object becomes inert.
  ## 
  cast[ptr WpCursorShapeDeviceV1](cast[ptr Proxy](wpCursorShapeManagerV1).marshal_flags(WpCursorShapeManagerV1Request_get_tablet_tool_v2.ord, addr wp_cursor_shape_device_v1_interface, cast[ptr Proxy](wpCursorShapeManagerV1).get_version(), 0, nil, tabletTool))
proc setUserData*(wpCursorShapeDeviceV1: ptr WpCursorShapeDeviceV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpCursorShapeDeviceV1).set_user_data(user_data)
proc getUserData*(wpCursorShapeDeviceV1: ptr WpCursorShapeDeviceV1): pointer {.inline.} =
  cast[ptr Proxy](wpCursorShapeDeviceV1).get_user_data()
proc getVersion*(wpCursorShapeDeviceV1: ptr WpCursorShapeDeviceV1): uint32 {.inline.} =
  cast[ptr Proxy](wpCursorShapeDeviceV1).get_version()
proc destroy*(wpCursorShapeDeviceV1: ptr WpCursorShapeDeviceV1) {.inline.} =
  ## destroy the cursor shape device
  ## 
  ## Destroy the cursor shape device.
  ## 
  ## The device cursor shape remains unchanged.
  ## 
  cast[ptr Proxy](wpCursorShapeDeviceV1).marshal_flags(WpCursorShapeDeviceV1Request_destroy.ord, nil, cast[ptr Proxy](wpCursorShapeDeviceV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setShape*(wpCursorShapeDeviceV1: ptr WpCursorShapeDeviceV1; serial: uint32; shape: uint32) {.inline.} =
  ## set device cursor to the shape
  ## 
  ## Sets the device cursor to the specified shape. The compositor will
  ## change the cursor image based on the specified shape.
  ## 
  ## The cursor actually changes only if the input device focus is one of
  ## the requesting client's surfaces. If any, the previous cursor image
  ## (surface or shape) is replaced.
  ## 
  ## The "shape" argument must be a valid enum entry, otherwise the
  ## invalid_shape protocol error is raised.
  ## 
  ## This is similar to the wl_pointer.set_cursor and
  ## zwp_tablet_tool_v2.set_cursor requests, but this request accepts a
  ## shape instead of contents in the form of a surface. Clients can mix
  ## set_cursor and set_shape requests.
  ## 
  ## The serial parameter must match the latest wl_pointer.enter or
  ## zwp_tablet_tool_v2.proximity_in serial number sent to the client.
  ## Otherwise the request will be ignored.
  ## 
  cast[ptr Proxy](wpCursorShapeDeviceV1).marshal_flags(WpCursorShapeDeviceV1Request_set_shape.ord, nil, cast[ptr Proxy](wpCursorShapeDeviceV1).get_version(), 0, serial, shape)
