# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The xwayland_shell_v1 CLIENT protocol
## #####################################
## 
## Interfaces
## ==========
## 
## * xwayland_shell_v1
## * xwayland_surface_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2022 Joshua Ashton
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(xwaylandShellV1: ptr XwaylandShellV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](xwaylandShellV1).set_user_data(user_data)
proc getUserData*(xwaylandShellV1: ptr XwaylandShellV1): pointer {.inline.} =
  cast[ptr Proxy](xwaylandShellV1).get_user_data()
proc getVersion*(xwaylandShellV1: ptr XwaylandShellV1): uint32 {.inline.} =
  cast[ptr Proxy](xwaylandShellV1).get_version()
proc destroy*(xwaylandShellV1: ptr XwaylandShellV1) {.inline.} =
  ## destroy the Xwayland shell object
  ## 
  ## Destroy the xwayland_shell_v1 object.
  ## 
  ## The child objects created via this interface are unaffected.
  ## 
  cast[ptr Proxy](xwaylandShellV1).marshal_flags(XwaylandShellV1Request_destroy.ord, nil, cast[ptr Proxy](xwaylandShellV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getXwaylandSurface*(xwaylandShellV1: ptr XwaylandShellV1; surface: ptr Surface): ptr XwaylandSurfaceV1 {.inline.} =
  ## assign the xwayland_surface surface role
  ## 
  ## Create an xwayland_surface_v1 interface for a given wl_surface
  ## object and gives it the xwayland_surface role.
  ## 
  ## It is illegal to create an xwayland_surface_v1 for a wl_surface
  ## which already has an assigned role and this will result in the
  ## `role` protocol error.
  ## 
  ## See the documentation of xwayland_surface_v1 for more details
  ## about what an xwayland_surface_v1 is and how it is used.
  ## 
  cast[ptr XwaylandSurfaceV1](cast[ptr Proxy](xwaylandShellV1).marshal_flags(XwaylandShellV1Request_get_xwayland_surface.ord, addr xwayland_surface_v1_interface, cast[ptr Proxy](xwaylandShellV1).get_version(), 0, nil, surface))
proc setUserData*(xwaylandSurfaceV1: ptr XwaylandSurfaceV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](xwaylandSurfaceV1).set_user_data(user_data)
proc getUserData*(xwaylandSurfaceV1: ptr XwaylandSurfaceV1): pointer {.inline.} =
  cast[ptr Proxy](xwaylandSurfaceV1).get_user_data()
proc getVersion*(xwaylandSurfaceV1: ptr XwaylandSurfaceV1): uint32 {.inline.} =
  cast[ptr Proxy](xwaylandSurfaceV1).get_version()
proc setSerial*(xwaylandSurfaceV1: ptr XwaylandSurfaceV1; serialLo: uint32; serialHi: uint32) {.inline.} =
  ## associates a Xwayland window to a wl_surface
  ## 
  ## Associates an Xwayland window to a wl_surface.
  ## The association state is double-buffered, see wl_surface.commit.
  ## 
  ## The `serial_lo` and `serial_hi` parameters specify a non-zero
  ## monotonic serial number which is entirely unique and provided by the
  ## Xwayland server equal to the serial value provided by a client message
  ## with a message type of the `WL_SURFACE_SERIAL` atom on the X11 window
  ## for this surface to be associated to.
  ## 
  ## The serial value in the `WL_SURFACE_SERIAL` client message is specified
  ## as having the lo-bits specified in `l[0]` and the hi-bits specified
  ## in `l[1]`.
  ## 
  ## If the serial value provided by `serial_lo` and `serial_hi` is not
  ## valid, the `invalid_serial` protocol error will be raised.
  ## 
  ## An X11 window may be associated with multiple surfaces throughout its
  ## lifespan. (eg. unmapping and remapping a window).
  ## 
  ## For each wl_surface, this state must not be committed more than once,
  ## otherwise the `already_associated` protocol error will be raised.
  ## 
  cast[ptr Proxy](xwaylandSurfaceV1).marshal_flags(XwaylandSurfaceV1Request_set_serial.ord, nil, cast[ptr Proxy](xwaylandSurfaceV1).get_version(), 0, serialLo, serialHi)
proc destroy*(xwaylandSurfaceV1: ptr XwaylandSurfaceV1) {.inline.} =
  ## destroy the Xwayland surface object
  ## 
  ## Destroy the xwayland_surface_v1 object.
  ## 
  ## Any already existing associations are unaffected by this action.
  ## 
  cast[ptr Proxy](xwaylandSurfaceV1).marshal_flags(XwaylandSurfaceV1Request_destroy.ord, nil, cast[ptr Proxy](xwaylandSurfaceV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
