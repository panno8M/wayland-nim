# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import code
export code

## The ext_data_control_v1 SERVER protocol
## #######################################
## 
## Interfaces
## ==========
## 
## * ext_data_control_manager_v1
## * ext_data_control_device_v1
## * ext_data_control_source_v1
## * ext_data_control_offer_v1
## 
## Copyright
## =========
## 
## Copyright © 2018 Simon Ser
## Copyright © 2019 Ivan Molodetskikh
## Copyright © 2024 Neal Gompa
## 
## Permission to use, copy, modify, distribute, and sell this
## software and its documentation for any purpose is hereby granted
## without fee, provided that the above copyright notice appear in
## all copies and that both that copyright notice and this permission
## notice appear in supporting documentation, and that the name of
## the copyright holders not be used in advertising or publicity
## pertaining to distribution of the software without specific,
## written prior permission.  The copyright holders make no
## representations about the suitability of this software for any
## purpose.  It is provided "as is" without express or implied
## warranty.
## 
## THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
## SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
## FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
## SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
## WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
## AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
## ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
## THIS SOFTWARE.
## 

type ExtDataControlManagerV1Interface* = object
  createDataSource*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
  ) {.nimcall.}
  getDataDevice*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    seat: ptr Resource;
  ) {.nimcall.}
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

type ExtDataControlDeviceV1Interface* = object
  setSelection*: proc(
    client: ptr Client;
    resource: ptr Resource;
    source: ptr Resource;
  ) {.nimcall.}
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  setPrimarySelection*: proc(
    client: ptr Client;
    resource: ptr Resource;
    source: ptr Resource;
  ) {.nimcall.}

proc extDataControlDeviceV1SendDataOffer*(resource: ptr Resource; id: ptr Resource) {.inline, exportc: "ext_data_control_device_v1_send_data_offer".} =
  ## Sends an data_offer event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ExtDataControlDeviceV1Event_data_offer.ord, id)

proc extDataControlDeviceV1SendSelection*(resource: ptr Resource; id: ptr Resource) {.inline, exportc: "ext_data_control_device_v1_send_selection".} =
  ## Sends an selection event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ExtDataControlDeviceV1Event_selection.ord, id)

proc extDataControlDeviceV1SendFinished*(resource: ptr Resource) {.inline, exportc: "ext_data_control_device_v1_send_finished".} =
  ## Sends an finished event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ExtDataControlDeviceV1Event_finished.ord)

proc extDataControlDeviceV1SendPrimarySelection*(resource: ptr Resource; id: ptr Resource) {.inline, exportc: "ext_data_control_device_v1_send_primary_selection".} =
  ## Sends an primary_selection event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ExtDataControlDeviceV1Event_primary_selection.ord, id)

type ExtDataControlSourceV1Interface* = object
  offer*: proc(
    client: ptr Client;
    resource: ptr Resource;
    mimeType: cstring;
  ) {.nimcall.}
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc extDataControlSourceV1SendSend*(resource: ptr Resource; mimeType: cstring; fd: int32) {.inline, exportc: "ext_data_control_source_v1_send_send".} =
  ## Sends an send event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *mime_type*: MIME type for the data
  ## * *fd*: file descriptor for the data
  resource.post_event(ExtDataControlSourceV1Event_send.ord, mimeType, fd)

proc extDataControlSourceV1SendCancelled*(resource: ptr Resource) {.inline, exportc: "ext_data_control_source_v1_send_cancelled".} =
  ## Sends an cancelled event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ExtDataControlSourceV1Event_cancelled.ord)

type ExtDataControlOfferV1Interface* = object
  receive*: proc(
    client: ptr Client;
    resource: ptr Resource;
    mimeType: cstring;
    fd: int32;
  ) {.nimcall.}
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc extDataControlOfferV1SendOffer*(resource: ptr Resource; mimeType: cstring) {.inline, exportc: "ext_data_control_offer_v1_send_offer".} =
  ## Sends an offer event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *mime_type*: offered MIME type
  resource.post_event(ExtDataControlOfferV1Event_offer.ord, mimeType)

