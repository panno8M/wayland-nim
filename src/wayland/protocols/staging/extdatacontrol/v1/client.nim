# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The ext_data_control_v1 CLIENT protocol
## #######################################
## 
## Interfaces
## ==========
## 
## * ext_data_control_manager_v1
## * ext_data_control_device_v1
## * ext_data_control_source_v1
## * ext_data_control_offer_v1
## 
## Copyright
## =========
## 
## Copyright © 2018 Simon Ser
## Copyright © 2019 Ivan Molodetskikh
## Copyright © 2024 Neal Gompa
## 
## Permission to use, copy, modify, distribute, and sell this
## software and its documentation for any purpose is hereby granted
## without fee, provided that the above copyright notice appear in
## all copies and that both that copyright notice and this permission
## notice appear in supporting documentation, and that the name of
## the copyright holders not be used in advertising or publicity
## pertaining to distribution of the software without specific,
## written prior permission.  The copyright holders make no
## representations about the suitability of this software for any
## purpose.  It is provided "as is" without express or implied
## warranty.
## 
## THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
## SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
## FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
## SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
## WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
## AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
## ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
## THIS SOFTWARE.
## 

proc setUserData*(extDataControlManagerV1: ptr ExtDataControlManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](extDataControlManagerV1).set_user_data(user_data)
proc getUserData*(extDataControlManagerV1: ptr ExtDataControlManagerV1): pointer {.inline.} =
  cast[ptr Proxy](extDataControlManagerV1).get_user_data()
proc getVersion*(extDataControlManagerV1: ptr ExtDataControlManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](extDataControlManagerV1).get_version()
proc createDataSource*(extDataControlManagerV1: ptr ExtDataControlManagerV1): ptr ExtDataControlSourceV1 {.inline.} =
  ## create a new data source
  ## 
  ## Create a new data source.
  ## 
  cast[ptr ExtDataControlSourceV1](cast[ptr Proxy](extDataControlManagerV1).marshal_flags(ExtDataControlManagerV1Request_create_data_source.ord, addr ext_data_control_source_v1_interface, cast[ptr Proxy](extDataControlManagerV1).get_version(), 0, nil))
proc getDataDevice*(extDataControlManagerV1: ptr ExtDataControlManagerV1; seat: ptr Seat): ptr ExtDataControlDeviceV1 {.inline.} =
  ## get a data device for a seat
  ## 
  ## Create a data device that can be used to manage a seat's selection.
  ## 
  cast[ptr ExtDataControlDeviceV1](cast[ptr Proxy](extDataControlManagerV1).marshal_flags(ExtDataControlManagerV1Request_get_data_device.ord, addr ext_data_control_device_v1_interface, cast[ptr Proxy](extDataControlManagerV1).get_version(), 0, nil, seat))
proc destroy*(extDataControlManagerV1: ptr ExtDataControlManagerV1) {.inline.} =
  ## destroy the manager
  ## 
  ## All objects created by the manager will still remain valid, until their
  ## appropriate destroy request has been called.
  ## 
  cast[ptr Proxy](extDataControlManagerV1).marshal_flags(ExtDataControlManagerV1Request_destroy.ord, nil, cast[ptr Proxy](extDataControlManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ExtDataControlDeviceV1Listener* = object
  dataOffer*: proc(
    data: pointer;
    extDataControlDeviceV1: ptr ExtDataControlDeviceV1;
    id: ptr ExtDataControlOfferV1;
  ) {.nimcall.}
  selection*: proc(
    data: pointer;
    extDataControlDeviceV1: ptr ExtDataControlDeviceV1;
    id: ptr ExtDataControlOfferV1;
  ) {.nimcall.}
  finished*: proc(
    data: pointer;
    extDataControlDeviceV1: ptr ExtDataControlDeviceV1;
  ) {.nimcall.}
  primarySelection*: proc(
    data: pointer;
    extDataControlDeviceV1: ptr ExtDataControlDeviceV1;
    id: ptr ExtDataControlOfferV1;
  ) {.nimcall.}
proc addListener*(extDataControlDeviceV1: ptr ExtDataControlDeviceV1; listener: ptr ExtDataControlDeviceV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](extDataControlDeviceV1).add_listener(listener, data)

proc setUserData*(extDataControlDeviceV1: ptr ExtDataControlDeviceV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](extDataControlDeviceV1).set_user_data(user_data)
proc getUserData*(extDataControlDeviceV1: ptr ExtDataControlDeviceV1): pointer {.inline.} =
  cast[ptr Proxy](extDataControlDeviceV1).get_user_data()
proc getVersion*(extDataControlDeviceV1: ptr ExtDataControlDeviceV1): uint32 {.inline.} =
  cast[ptr Proxy](extDataControlDeviceV1).get_version()
proc setSelection*(extDataControlDeviceV1: ptr ExtDataControlDeviceV1; source: ptr ExtDataControlSourceV1) {.inline.} =
  ## copy data to the selection
  ## 
  ## This request asks the compositor to set the selection to the data from
  ## the source on behalf of the client.
  ## 
  ## The given source may not be used in any further set_selection or
  ## set_primary_selection requests. Attempting to use a previously used
  ## source triggers the used_source protocol error.
  ## 
  ## To unset the selection, set the source to NULL.
  ## 
  cast[ptr Proxy](extDataControlDeviceV1).marshal_flags(ExtDataControlDeviceV1Request_set_selection.ord, nil, cast[ptr Proxy](extDataControlDeviceV1).get_version(), 0, source)
proc destroy*(extDataControlDeviceV1: ptr ExtDataControlDeviceV1) {.inline.} =
  ## destroy this data device
  ## 
  ## Destroys the data device object.
  ## 
  cast[ptr Proxy](extDataControlDeviceV1).marshal_flags(ExtDataControlDeviceV1Request_destroy.ord, nil, cast[ptr Proxy](extDataControlDeviceV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setPrimarySelection*(extDataControlDeviceV1: ptr ExtDataControlDeviceV1; source: ptr ExtDataControlSourceV1) {.inline.} =
  ## copy data to the primary selection
  ## 
  ## This request asks the compositor to set the primary selection to the
  ## data from the source on behalf of the client.
  ## 
  ## The given source may not be used in any further set_selection or
  ## set_primary_selection requests. Attempting to use a previously used
  ## source triggers the used_source protocol error.
  ## 
  ## To unset the primary selection, set the source to NULL.
  ## 
  ## The compositor will ignore this request if it does not support primary
  ## selection.
  ## 
  cast[ptr Proxy](extDataControlDeviceV1).marshal_flags(ExtDataControlDeviceV1Request_set_primary_selection.ord, nil, cast[ptr Proxy](extDataControlDeviceV1).get_version(), 0, source)
type ExtDataControlSourceV1Listener* = object
  send*: proc(
    data: pointer;
    extDataControlSourceV1: ptr ExtDataControlSourceV1;
    mimeType: cstring;
    fd: int32;
  ) {.nimcall.}
  cancelled*: proc(
    data: pointer;
    extDataControlSourceV1: ptr ExtDataControlSourceV1;
  ) {.nimcall.}
proc addListener*(extDataControlSourceV1: ptr ExtDataControlSourceV1; listener: ptr ExtDataControlSourceV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](extDataControlSourceV1).add_listener(listener, data)

proc setUserData*(extDataControlSourceV1: ptr ExtDataControlSourceV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](extDataControlSourceV1).set_user_data(user_data)
proc getUserData*(extDataControlSourceV1: ptr ExtDataControlSourceV1): pointer {.inline.} =
  cast[ptr Proxy](extDataControlSourceV1).get_user_data()
proc getVersion*(extDataControlSourceV1: ptr ExtDataControlSourceV1): uint32 {.inline.} =
  cast[ptr Proxy](extDataControlSourceV1).get_version()
proc offer*(extDataControlSourceV1: ptr ExtDataControlSourceV1; mimeType: cstring) {.inline.} =
  ## add an offered MIME type
  ## 
  ## This request adds a MIME type to the set of MIME types advertised to
  ## targets. Can be called several times to offer multiple types.
  ## 
  ## Calling this after ext_data_control_device.set_selection is a protocol
  ## error.
  ## 
  cast[ptr Proxy](extDataControlSourceV1).marshal_flags(ExtDataControlSourceV1Request_offer.ord, nil, cast[ptr Proxy](extDataControlSourceV1).get_version(), 0, mimeType)
proc destroy*(extDataControlSourceV1: ptr ExtDataControlSourceV1) {.inline.} =
  ## destroy this source
  ## 
  ## Destroys the data source object.
  ## 
  cast[ptr Proxy](extDataControlSourceV1).marshal_flags(ExtDataControlSourceV1Request_destroy.ord, nil, cast[ptr Proxy](extDataControlSourceV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ExtDataControlOfferV1Listener* = object
  offer*: proc(
    data: pointer;
    extDataControlOfferV1: ptr ExtDataControlOfferV1;
    mimeType: cstring;
  ) {.nimcall.}
proc addListener*(extDataControlOfferV1: ptr ExtDataControlOfferV1; listener: ptr ExtDataControlOfferV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](extDataControlOfferV1).add_listener(listener, data)

proc setUserData*(extDataControlOfferV1: ptr ExtDataControlOfferV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](extDataControlOfferV1).set_user_data(user_data)
proc getUserData*(extDataControlOfferV1: ptr ExtDataControlOfferV1): pointer {.inline.} =
  cast[ptr Proxy](extDataControlOfferV1).get_user_data()
proc getVersion*(extDataControlOfferV1: ptr ExtDataControlOfferV1): uint32 {.inline.} =
  cast[ptr Proxy](extDataControlOfferV1).get_version()
proc receive*(extDataControlOfferV1: ptr ExtDataControlOfferV1; mimeType: cstring; fd: int32) {.inline.} =
  ## request that the data is transferred
  ## 
  ## To transfer the offered data, the client issues this request and
  ## indicates the MIME type it wants to receive. The transfer happens
  ## through the passed file descriptor (typically created with the pipe
  ## system call). The source client writes the data in the MIME type
  ## representation requested and then closes the file descriptor.
  ## 
  ## The receiving client reads from the read end of the pipe until EOF and
  ## then closes its end, at which point the transfer is complete.
  ## 
  ## This request may happen multiple times for different MIME types.
  ## 
  cast[ptr Proxy](extDataControlOfferV1).marshal_flags(ExtDataControlOfferV1Request_receive.ord, nil, cast[ptr Proxy](extDataControlOfferV1).get_version(), 0, mimeType, fd)
proc destroy*(extDataControlOfferV1: ptr ExtDataControlOfferV1) {.inline.} =
  ## destroy this offer
  ## 
  ## Destroys the data offer object.
  ## 
  cast[ptr Proxy](extDataControlOfferV1).marshal_flags(ExtDataControlOfferV1Request_destroy.ord, nil, cast[ptr Proxy](extDataControlOfferV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
