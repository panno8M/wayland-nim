# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The security_context_v1 CLIENT protocol
## #######################################
## 
## Interfaces
## ==========
## 
## * wp_security_context_manager_v1
## * wp_security_context_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2021 Simon Ser
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(wpSecurityContextManagerV1: ptr WpSecurityContextManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpSecurityContextManagerV1).set_user_data(user_data)
proc getUserData*(wpSecurityContextManagerV1: ptr WpSecurityContextManagerV1): pointer {.inline.} =
  cast[ptr Proxy](wpSecurityContextManagerV1).get_user_data()
proc getVersion*(wpSecurityContextManagerV1: ptr WpSecurityContextManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](wpSecurityContextManagerV1).get_version()
proc destroy*(wpSecurityContextManagerV1: ptr WpSecurityContextManagerV1) {.inline.} =
  ## destroy the manager object
  ## 
  ## Destroy the manager. This doesn't destroy objects created with the
  ## manager.
  ## 
  cast[ptr Proxy](wpSecurityContextManagerV1).marshal_flags(WpSecurityContextManagerV1Request_destroy.ord, nil, cast[ptr Proxy](wpSecurityContextManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc createListener*(wpSecurityContextManagerV1: ptr WpSecurityContextManagerV1; listenFd: int32; closeFd: int32): ptr WpSecurityContextV1 {.inline.} =
  ## create a new security context
  ## 
  ## Creates a new security context with a socket listening FD.
  ## 
  ## The compositor will accept new client connections on listen_fd.
  ## listen_fd must be ready to accept new connections when this request is
  ## sent by the client. In other words, the client must call bind(2) and
  ## listen(2) before sending the FD.
  ## 
  ## close_fd is a FD that will signal hangup when the compositor should stop
  ## accepting new connections on listen_fd.
  ## 
  ## The compositor must continue to accept connections on listen_fd when
  ## the Wayland client which created the security context disconnects.
  ## 
  ## After sending this request, closing listen_fd and close_fd remains the
  ## only valid operation on them.
  ## 
  cast[ptr WpSecurityContextV1](cast[ptr Proxy](wpSecurityContextManagerV1).marshal_flags(WpSecurityContextManagerV1Request_create_listener.ord, addr wp_security_context_v1_interface, cast[ptr Proxy](wpSecurityContextManagerV1).get_version(), 0, nil, listenFd, closeFd))
proc setUserData*(wpSecurityContextV1: ptr WpSecurityContextV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpSecurityContextV1).set_user_data(user_data)
proc getUserData*(wpSecurityContextV1: ptr WpSecurityContextV1): pointer {.inline.} =
  cast[ptr Proxy](wpSecurityContextV1).get_user_data()
proc getVersion*(wpSecurityContextV1: ptr WpSecurityContextV1): uint32 {.inline.} =
  cast[ptr Proxy](wpSecurityContextV1).get_version()
proc destroy*(wpSecurityContextV1: ptr WpSecurityContextV1) {.inline.} =
  ## destroy the security context object
  ## 
  ## Destroy the security context object.
  ## 
  cast[ptr Proxy](wpSecurityContextV1).marshal_flags(WpSecurityContextV1Request_destroy.ord, nil, cast[ptr Proxy](wpSecurityContextV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setSandboxEngine*(wpSecurityContextV1: ptr WpSecurityContextV1; name: cstring) {.inline.} =
  ## set the sandbox engine
  ## 
  ## Attach a unique sandbox engine name to the security context. The name
  ## should follow the reverse-DNS style (e.g. "org.flatpak").
  ## 
  ## A list of well-known engines is maintained at:
  ## https://gitlab.freedesktop.org/wayland/wayland-protocols/-/blob/main/staging/security-context/engines.md
  ## 
  ## It is a protocol error to call this request twice. The already_set
  ## error is sent in this case.
  ## 
  cast[ptr Proxy](wpSecurityContextV1).marshal_flags(WpSecurityContextV1Request_set_sandbox_engine.ord, nil, cast[ptr Proxy](wpSecurityContextV1).get_version(), 0, name)
proc setAppId*(wpSecurityContextV1: ptr WpSecurityContextV1; appId: cstring) {.inline.} =
  ## set the application ID
  ## 
  ## Attach an application ID to the security context.
  ## 
  ## The application ID is an opaque, sandbox-specific identifier for an
  ## application. See the well-known engines document for more details:
  ## https://gitlab.freedesktop.org/wayland/wayland-protocols/-/blob/main/staging/security-context/engines.md
  ## 
  ## The compositor may use the application ID to group clients belonging to
  ## the same security context application.
  ## 
  ## Whether this request is optional or not depends on the sandbox engine used.
  ## 
  ## It is a protocol error to call this request twice. The already_set
  ## error is sent in this case.
  ## 
  cast[ptr Proxy](wpSecurityContextV1).marshal_flags(WpSecurityContextV1Request_set_app_id.ord, nil, cast[ptr Proxy](wpSecurityContextV1).get_version(), 0, appId)
proc setInstanceId*(wpSecurityContextV1: ptr WpSecurityContextV1; instanceId: cstring) {.inline.} =
  ## set the instance ID
  ## 
  ## Attach an instance ID to the security context.
  ## 
  ## The instance ID is an opaque, sandbox-specific identifier for a running
  ## instance of an application. See the well-known engines document for
  ## more details:
  ## https://gitlab.freedesktop.org/wayland/wayland-protocols/-/blob/main/staging/security-context/engines.md
  ## 
  ## Whether this request is optional or not depends on the sandbox engine used.
  ## 
  ## It is a protocol error to call this request twice. The already_set
  ## error is sent in this case.
  ## 
  cast[ptr Proxy](wpSecurityContextV1).marshal_flags(WpSecurityContextV1Request_set_instance_id.ord, nil, cast[ptr Proxy](wpSecurityContextV1).get_version(), 0, instanceId)
proc commit*(wpSecurityContextV1: ptr WpSecurityContextV1) {.inline.} =
  ## register the security context
  ## 
  ## Atomically register the new client and attach the security context
  ## metadata.
  ## 
  ## If the provided metadata is inconsistent or does not match with out of
  ## band metadata (see
  ## https://gitlab.freedesktop.org/wayland/wayland-protocols/-/blob/main/staging/security-context/engines.md),
  ## the invalid_metadata error may be sent eventually.
  ## 
  ## It's a protocol error to send any request other than "destroy" after
  ## this request. In this case, the already_used error is sent.
  ## 
  cast[ptr Proxy](wpSecurityContextV1).marshal_flags(WpSecurityContextV1Request_commit.ord, nil, cast[ptr Proxy](wpSecurityContextV1).get_version(), 0)
