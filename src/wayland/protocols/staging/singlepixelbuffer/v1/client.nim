# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The single_pixel_buffer_v1 CLIENT protocol
## ##########################################
## 
## Interfaces
## ==========
## 
## * wp_single_pixel_buffer_manager_v1
## 
## Copyright
## =========
## 
## Copyright © 2022 Simon Ser
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(wpSinglePixelBufferManagerV1: ptr WpSinglePixelBufferManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpSinglePixelBufferManagerV1).set_user_data(user_data)
proc getUserData*(wpSinglePixelBufferManagerV1: ptr WpSinglePixelBufferManagerV1): pointer {.inline.} =
  cast[ptr Proxy](wpSinglePixelBufferManagerV1).get_user_data()
proc getVersion*(wpSinglePixelBufferManagerV1: ptr WpSinglePixelBufferManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](wpSinglePixelBufferManagerV1).get_version()
proc destroy*(wpSinglePixelBufferManagerV1: ptr WpSinglePixelBufferManagerV1) {.inline.} =
  ## destroy the manager
  ## 
  ## Destroy the wp_single_pixel_buffer_manager_v1 object.
  ## 
  ## The child objects created via this interface are unaffected.
  ## 
  cast[ptr Proxy](wpSinglePixelBufferManagerV1).marshal_flags(WpSinglePixelBufferManagerV1Request_destroy.ord, nil, cast[ptr Proxy](wpSinglePixelBufferManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc createU32RgbaBuffer*(wpSinglePixelBufferManagerV1: ptr WpSinglePixelBufferManagerV1; r: uint32; g: uint32; b: uint32; a: uint32): ptr Buffer {.inline.} =
  ## create a 1×1 buffer from 32-bit RGBA values
  ## 
  ## Create a single-pixel buffer from four 32-bit RGBA values.
  ## 
  ## Unless specified in another protocol extension, the RGBA values use
  ## pre-multiplied alpha.
  ## 
  ## The width and height of the buffer are 1.
  ## 
  cast[ptr Buffer](cast[ptr Proxy](wpSinglePixelBufferManagerV1).marshal_flags(WpSinglePixelBufferManagerV1Request_create_u32_rgba_buffer.ord, addr wl_buffer_interface, cast[ptr Proxy](wpSinglePixelBufferManagerV1).get_version(), 0, nil, r, g, b, a))
