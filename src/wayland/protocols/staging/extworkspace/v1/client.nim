# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The ext_workspace_v1 CLIENT protocol
## ####################################
## 
## Interfaces
## ==========
## 
## * ext_workspace_manager_v1
## * ext_workspace_group_handle_v1
## * ext_workspace_handle_v1
## 
## Copyright
## =========
## 
## Copyright © 2019 Christopher Billington
## Copyright © 2020 Ilia Bozhinov
## Copyright © 2022 Victoria Brekenfeld
## 
## Permission to use, copy, modify, distribute, and sell this
## software and its documentation for any purpose is hereby granted
## without fee, provided that the above copyright notice appear in
## all copies and that both that copyright notice and this permission
## notice appear in supporting documentation, and that the name of
## the copyright holders not be used in advertising or publicity
## pertaining to distribution of the software without specific,
## written prior permission.  The copyright holders make no
## representations about the suitability of this software for any
## purpose.  It is provided "as is" without express or implied
## warranty.
## 
## THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
## SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
## FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
## SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
## WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
## AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
## ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
## THIS SOFTWARE.
## 

type ExtWorkspaceManagerV1Listener* = object
  workspaceGroup*: proc(
    data: pointer;
    extWorkspaceManagerV1: ptr ExtWorkspaceManagerV1;
    workspaceGroup: ptr ExtWorkspaceGroupHandleV1;
  ) {.nimcall.}
  workspace*: proc(
    data: pointer;
    extWorkspaceManagerV1: ptr ExtWorkspaceManagerV1;
    workspace: ptr ExtWorkspaceHandleV1;
  ) {.nimcall.}
  done*: proc(
    data: pointer;
    extWorkspaceManagerV1: ptr ExtWorkspaceManagerV1;
  ) {.nimcall.}
  finished*: proc(
    data: pointer;
    extWorkspaceManagerV1: ptr ExtWorkspaceManagerV1;
  ) {.nimcall.}
proc addListener*(extWorkspaceManagerV1: ptr ExtWorkspaceManagerV1; listener: ptr ExtWorkspaceManagerV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](extWorkspaceManagerV1).add_listener(listener, data)

proc setUserData*(extWorkspaceManagerV1: ptr ExtWorkspaceManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](extWorkspaceManagerV1).set_user_data(user_data)
proc getUserData*(extWorkspaceManagerV1: ptr ExtWorkspaceManagerV1): pointer {.inline.} =
  cast[ptr Proxy](extWorkspaceManagerV1).get_user_data()
proc getVersion*(extWorkspaceManagerV1: ptr ExtWorkspaceManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](extWorkspaceManagerV1).get_version()
proc destroy*(extWorkspaceManagerV1: ptr ExtWorkspaceManagerV1) {.inline.} =
  destroy cast[ptr Proxy](extWorkspaceManagerV1)
proc commit*(extWorkspaceManagerV1: ptr ExtWorkspaceManagerV1) {.inline.} =
  ## all requests about the workspaces have been sent
  ## 
  ## The client must send this request after it has finished sending other
  ## requests. The compositor must process a series of requests preceding a
  ## commit request atomically.
  ## 
  ## This allows changes to the workspace properties to be seen as atomic,
  ## even if they happen via multiple events, and even if they involve
  ## multiple ext_workspace_handle_v1 objects, for example, deactivating one
  ## workspace and activating another.
  ## 
  cast[ptr Proxy](extWorkspaceManagerV1).marshal_flags(ExtWorkspaceManagerV1Request_commit.ord, nil, cast[ptr Proxy](extWorkspaceManagerV1).get_version(), 0)
proc stop*(extWorkspaceManagerV1: ptr ExtWorkspaceManagerV1) {.inline.} =
  ## stop sending events
  ## 
  ## Indicates the client no longer wishes to receive events for new
  ## workspace groups. However the compositor may emit further workspace
  ## events, until the finished event is emitted. The compositor is expected
  ## to send the finished event eventually once the stop request has been processed.
  ## 
  ## The client must not send any requests after this one, doing so will raise a wl_display
  ## invalid_object error.
  ## 
  cast[ptr Proxy](extWorkspaceManagerV1).marshal_flags(ExtWorkspaceManagerV1Request_stop.ord, nil, cast[ptr Proxy](extWorkspaceManagerV1).get_version(), 0)
type ExtWorkspaceGroupHandleV1Listener* = object
  capabilities*: proc(
    data: pointer;
    extWorkspaceGroupHandleV1: ptr ExtWorkspaceGroupHandleV1;
    capabilities: uint32;
  ) {.nimcall.}
  outputEnter*: proc(
    data: pointer;
    extWorkspaceGroupHandleV1: ptr ExtWorkspaceGroupHandleV1;
    output: ptr Output;
  ) {.nimcall.}
  outputLeave*: proc(
    data: pointer;
    extWorkspaceGroupHandleV1: ptr ExtWorkspaceGroupHandleV1;
    output: ptr Output;
  ) {.nimcall.}
  workspaceEnter*: proc(
    data: pointer;
    extWorkspaceGroupHandleV1: ptr ExtWorkspaceGroupHandleV1;
    workspace: ptr ExtWorkspaceHandleV1;
  ) {.nimcall.}
  workspaceLeave*: proc(
    data: pointer;
    extWorkspaceGroupHandleV1: ptr ExtWorkspaceGroupHandleV1;
    workspace: ptr ExtWorkspaceHandleV1;
  ) {.nimcall.}
  removed*: proc(
    data: pointer;
    extWorkspaceGroupHandleV1: ptr ExtWorkspaceGroupHandleV1;
  ) {.nimcall.}
proc addListener*(extWorkspaceGroupHandleV1: ptr ExtWorkspaceGroupHandleV1; listener: ptr ExtWorkspaceGroupHandleV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](extWorkspaceGroupHandleV1).add_listener(listener, data)

proc setUserData*(extWorkspaceGroupHandleV1: ptr ExtWorkspaceGroupHandleV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](extWorkspaceGroupHandleV1).set_user_data(user_data)
proc getUserData*(extWorkspaceGroupHandleV1: ptr ExtWorkspaceGroupHandleV1): pointer {.inline.} =
  cast[ptr Proxy](extWorkspaceGroupHandleV1).get_user_data()
proc getVersion*(extWorkspaceGroupHandleV1: ptr ExtWorkspaceGroupHandleV1): uint32 {.inline.} =
  cast[ptr Proxy](extWorkspaceGroupHandleV1).get_version()
proc createWorkspace*(extWorkspaceGroupHandleV1: ptr ExtWorkspaceGroupHandleV1; workspace: cstring) {.inline.} =
  ## create a new workspace
  ## 
  ## Request that the compositor create a new workspace with the given name
  ## and assign it to this group.
  ## 
  ## There is no guarantee that the compositor will create a new workspace,
  ## or that the created workspace will have the provided name.
  ## 
  cast[ptr Proxy](extWorkspaceGroupHandleV1).marshal_flags(ExtWorkspaceGroupHandleV1Request_create_workspace.ord, nil, cast[ptr Proxy](extWorkspaceGroupHandleV1).get_version(), 0, workspace)
proc destroy*(extWorkspaceGroupHandleV1: ptr ExtWorkspaceGroupHandleV1) {.inline.} =
  ## destroy the ext_workspace_group_handle_v1 object
  ## 
  ## Destroys the ext_workspace_group_handle_v1 object.
  ## 
  ## This request should be send either when the client does not want to
  ## use the workspace group object any more or after the removed event to finalize
  ## the destruction of the object.
  ## 
  cast[ptr Proxy](extWorkspaceGroupHandleV1).marshal_flags(ExtWorkspaceGroupHandleV1Request_destroy.ord, nil, cast[ptr Proxy](extWorkspaceGroupHandleV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ExtWorkspaceHandleV1Listener* = object
  id*: proc(
    data: pointer;
    extWorkspaceHandleV1: ptr ExtWorkspaceHandleV1;
    id: cstring;
  ) {.nimcall.}
  name*: proc(
    data: pointer;
    extWorkspaceHandleV1: ptr ExtWorkspaceHandleV1;
    name: cstring;
  ) {.nimcall.}
  coordinates*: proc(
    data: pointer;
    extWorkspaceHandleV1: ptr ExtWorkspaceHandleV1;
    coordinates: ptr Array;
  ) {.nimcall.}
  state*: proc(
    data: pointer;
    extWorkspaceHandleV1: ptr ExtWorkspaceHandleV1;
    state: uint32;
  ) {.nimcall.}
  capabilities*: proc(
    data: pointer;
    extWorkspaceHandleV1: ptr ExtWorkspaceHandleV1;
    capabilities: uint32;
  ) {.nimcall.}
  removed*: proc(
    data: pointer;
    extWorkspaceHandleV1: ptr ExtWorkspaceHandleV1;
  ) {.nimcall.}
proc addListener*(extWorkspaceHandleV1: ptr ExtWorkspaceHandleV1; listener: ptr ExtWorkspaceHandleV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](extWorkspaceHandleV1).add_listener(listener, data)

proc setUserData*(extWorkspaceHandleV1: ptr ExtWorkspaceHandleV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](extWorkspaceHandleV1).set_user_data(user_data)
proc getUserData*(extWorkspaceHandleV1: ptr ExtWorkspaceHandleV1): pointer {.inline.} =
  cast[ptr Proxy](extWorkspaceHandleV1).get_user_data()
proc getVersion*(extWorkspaceHandleV1: ptr ExtWorkspaceHandleV1): uint32 {.inline.} =
  cast[ptr Proxy](extWorkspaceHandleV1).get_version()
proc destroy*(extWorkspaceHandleV1: ptr ExtWorkspaceHandleV1) {.inline.} =
  ## destroy the ext_workspace_handle_v1 object
  ## 
  ## Destroys the ext_workspace_handle_v1 object.
  ## 
  ## This request should be made either when the client does not want to
  ## use the workspace object any more or after the remove event to finalize
  ## the destruction of the object.
  ## 
  cast[ptr Proxy](extWorkspaceHandleV1).marshal_flags(ExtWorkspaceHandleV1Request_destroy.ord, nil, cast[ptr Proxy](extWorkspaceHandleV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc activate*(extWorkspaceHandleV1: ptr ExtWorkspaceHandleV1) {.inline.} =
  ## activate the workspace
  ## 
  ## Request that this workspace be activated.
  ## 
  ## There is no guarantee the workspace will be actually activated, and
  ## behaviour may be compositor-dependent. For example, activating a
  ## workspace may or may not deactivate all other workspaces in the same
  ## group.
  ## 
  cast[ptr Proxy](extWorkspaceHandleV1).marshal_flags(ExtWorkspaceHandleV1Request_activate.ord, nil, cast[ptr Proxy](extWorkspaceHandleV1).get_version(), 0)
proc deactivate*(extWorkspaceHandleV1: ptr ExtWorkspaceHandleV1) {.inline.} =
  ## deactivate the workspace
  ## 
  ## Request that this workspace be deactivated.
  ## 
  ## There is no guarantee the workspace will be actually deactivated.
  ## 
  cast[ptr Proxy](extWorkspaceHandleV1).marshal_flags(ExtWorkspaceHandleV1Request_deactivate.ord, nil, cast[ptr Proxy](extWorkspaceHandleV1).get_version(), 0)
proc assign*(extWorkspaceHandleV1: ptr ExtWorkspaceHandleV1; workspaceGroup: ptr ExtWorkspaceGroupHandleV1) {.inline.} =
  ## assign workspace to group
  ## 
  ## Requests that this workspace is assigned to the given workspace group.
  ## 
  ## There is no guarantee the workspace will be assigned.
  ## 
  cast[ptr Proxy](extWorkspaceHandleV1).marshal_flags(ExtWorkspaceHandleV1Request_assign.ord, nil, cast[ptr Proxy](extWorkspaceHandleV1).get_version(), 0, workspaceGroup)
proc remove*(extWorkspaceHandleV1: ptr ExtWorkspaceHandleV1) {.inline.} =
  ## remove the workspace
  ## 
  ## Request that this workspace be removed.
  ## 
  ## There is no guarantee the workspace will be actually removed.
  ## 
  cast[ptr Proxy](extWorkspaceHandleV1).marshal_flags(ExtWorkspaceHandleV1Request_remove.ord, nil, cast[ptr Proxy](extWorkspaceHandleV1).get_version(), 0)
