# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import wayland/protocols/stable/xdgShell/client as xdgShell_client
import code
export code

## The xdg_toplevel_drag_v1 CLIENT protocol
## ########################################
## 
## Interfaces
## ==========
## 
## * xdg_toplevel_drag_manager_v1
## * xdg_toplevel_drag_v1
## 
## Copyright
## =========
## 
## Copyright 2023 David Redondo
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(xdgToplevelDragManagerV1: ptr XdgToplevelDragManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](xdgToplevelDragManagerV1).set_user_data(user_data)
proc getUserData*(xdgToplevelDragManagerV1: ptr XdgToplevelDragManagerV1): pointer {.inline.} =
  cast[ptr Proxy](xdgToplevelDragManagerV1).get_user_data()
proc getVersion*(xdgToplevelDragManagerV1: ptr XdgToplevelDragManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](xdgToplevelDragManagerV1).get_version()
proc destroy*(xdgToplevelDragManagerV1: ptr XdgToplevelDragManagerV1) {.inline.} =
  ## destroy the xdg_toplevel_drag_manager_v1 object
  ## 
  ## Destroy this xdg_toplevel_drag_manager_v1 object. Other objects,
  ## including xdg_toplevel_drag_v1 objects created by this factory, are not
  ## affected by this request.
  ## 
  cast[ptr Proxy](xdgToplevelDragManagerV1).marshal_flags(XdgToplevelDragManagerV1Request_destroy.ord, nil, cast[ptr Proxy](xdgToplevelDragManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getXdgToplevelDrag*(xdgToplevelDragManagerV1: ptr XdgToplevelDragManagerV1; dataSource: ptr DataSource): ptr XdgToplevelDragV1 {.inline.} =
  ## get an xdg_toplevel_drag for a wl_data_source
  ## 
  ## Create an xdg_toplevel_drag for a drag and drop operation that is going
  ## to be started with data_source.
  ## 
  ## This request can only be made on sources used in drag-and-drop, so it
  ## must be performed before wl_data_device.start_drag. Attempting to use
  ## the source other than for drag-and-drop such as in
  ## wl_data_device.set_selection will raise an invalid_source error.
  ## 
  ## Destroying data_source while a toplevel is attached to the
  ## xdg_toplevel_drag is undefined.
  ## 
  cast[ptr XdgToplevelDragV1](cast[ptr Proxy](xdgToplevelDragManagerV1).marshal_flags(XdgToplevelDragManagerV1Request_get_xdg_toplevel_drag.ord, addr xdg_toplevel_drag_v1_interface, cast[ptr Proxy](xdgToplevelDragManagerV1).get_version(), 0, nil, dataSource))
proc setUserData*(xdgToplevelDragV1: ptr XdgToplevelDragV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](xdgToplevelDragV1).set_user_data(user_data)
proc getUserData*(xdgToplevelDragV1: ptr XdgToplevelDragV1): pointer {.inline.} =
  cast[ptr Proxy](xdgToplevelDragV1).get_user_data()
proc getVersion*(xdgToplevelDragV1: ptr XdgToplevelDragV1): uint32 {.inline.} =
  cast[ptr Proxy](xdgToplevelDragV1).get_version()
proc destroy*(xdgToplevelDragV1: ptr XdgToplevelDragV1) {.inline.} =
  ## destroy an xdg_toplevel_drag_v1 object
  ## 
  ## Destroy this xdg_toplevel_drag_v1 object. This request must only be
  ## called after the underlying wl_data_source drag has ended, as indicated
  ## by the dnd_drop_performed or cancelled events. In any other case an
  ## ongoing_drag error is raised.
  ## 
  cast[ptr Proxy](xdgToplevelDragV1).marshal_flags(XdgToplevelDragV1Request_destroy.ord, nil, cast[ptr Proxy](xdgToplevelDragV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc attach*(xdgToplevelDragV1: ptr XdgToplevelDragV1; toplevel: ptr XdgToplevel; xOffset: int32; yOffset: int32) {.inline.} =
  ## Move a toplevel with the drag operation
  ## 
  ## Request that the window will be moved with the cursor during the drag
  ## operation. The offset is a hint to the compositor how the toplevel
  ## should be positioned relative to the cursor hotspot in surface local
  ## coordinates and relative to the geometry of the toplevel being attached.
  ## See xdg_surface.set_window_geometry. For example it might only
  ## be used when an unmapped window is attached. The attached window
  ## does not participate in the selection of the drag target.
  ## 
  ## If the toplevel is unmapped while it is attached, it is automatically
  ## detached from the drag. In this case this request has to be called again
  ## if the window should be attached after it is remapped.
  ## 
  ## This request can be called multiple times but issuing it while a
  ## toplevel with an active role is attached raises a toplevel_attached
  ## error.
  ## 
  cast[ptr Proxy](xdgToplevelDragV1).marshal_flags(XdgToplevelDragV1Request_attach.ord, nil, cast[ptr Proxy](xdgToplevelDragV1).get_version(), 0, toplevel, xOffset, yOffset)
