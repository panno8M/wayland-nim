# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The color_management_v1 CLIENT protocol
## #######################################
## 
## Interfaces
## ==========
## 
## * wp_color_manager_v1
## * wp_color_management_output_v1
## * wp_color_management_surface_v1
## * wp_color_management_surface_feedback_v1
## * wp_image_description_creator_icc_v1
## * wp_image_description_creator_params_v1
## * wp_image_description_v1
## * wp_image_description_info_v1
## 
## Copyright
## =========
## 
## Copyright 2019 Sebastian Wick
## Copyright 2019 Erwin Burema
## Copyright 2020 AMD
## Copyright 2020-2024 Collabora, Ltd.
## Copyright 2024 Xaver Hugl
## Copyright 2022-2025 Red Hat, Inc.
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type WpColorManagerV1Listener* = object
  supportedIntent*: proc(
    data: pointer;
    wpColorManagerV1: ptr WpColorManagerV1;
    renderIntent: uint32;
  ) {.nimcall.}
  supportedFeature*: proc(
    data: pointer;
    wpColorManagerV1: ptr WpColorManagerV1;
    feature: uint32;
  ) {.nimcall.}
  supportedTfNamed*: proc(
    data: pointer;
    wpColorManagerV1: ptr WpColorManagerV1;
    tf: uint32;
  ) {.nimcall.}
  supportedPrimariesNamed*: proc(
    data: pointer;
    wpColorManagerV1: ptr WpColorManagerV1;
    primaries: uint32;
  ) {.nimcall.}
  done*: proc(
    data: pointer;
    wpColorManagerV1: ptr WpColorManagerV1;
  ) {.nimcall.}
proc addListener*(wpColorManagerV1: ptr WpColorManagerV1; listener: ptr WpColorManagerV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](wpColorManagerV1).add_listener(listener, data)

proc setUserData*(wpColorManagerV1: ptr WpColorManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpColorManagerV1).set_user_data(user_data)
proc getUserData*(wpColorManagerV1: ptr WpColorManagerV1): pointer {.inline.} =
  cast[ptr Proxy](wpColorManagerV1).get_user_data()
proc getVersion*(wpColorManagerV1: ptr WpColorManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](wpColorManagerV1).get_version()
proc destroy*(wpColorManagerV1: ptr WpColorManagerV1) {.inline.} =
  ## destroy the color manager
  ## 
  ## Destroy the wp_color_manager_v1 object. This does not affect any other
  ## objects in any way.
  ## 
  cast[ptr Proxy](wpColorManagerV1).marshal_flags(WpColorManagerV1Request_destroy.ord, nil, cast[ptr Proxy](wpColorManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getOutput*(wpColorManagerV1: ptr WpColorManagerV1; output: ptr Output): ptr WpColorManagementOutputV1 {.inline.} =
  ## create a color management interface for a wl_output
  ## 
  ## This creates a new wp_color_management_output_v1 object for the
  ## given wl_output.
  ## 
  ## See the wp_color_management_output_v1 interface for more details.
  ## 
  cast[ptr WpColorManagementOutputV1](cast[ptr Proxy](wpColorManagerV1).marshal_flags(WpColorManagerV1Request_get_output.ord, addr wp_color_management_output_v1_interface, cast[ptr Proxy](wpColorManagerV1).get_version(), 0, nil, output))
proc getSurface*(wpColorManagerV1: ptr WpColorManagerV1; surface: ptr Surface): ptr WpColorManagementSurfaceV1 {.inline.} =
  ## create a color management interface for a wl_surface
  ## 
  ## If a wp_color_management_surface_v1 object already exists for the given
  ## wl_surface, the protocol error surface_exists is raised.
  ## 
  ## This creates a new color wp_color_management_surface_v1 object for the
  ## given wl_surface.
  ## 
  ## See the wp_color_management_surface_v1 interface for more details.
  ## 
  cast[ptr WpColorManagementSurfaceV1](cast[ptr Proxy](wpColorManagerV1).marshal_flags(WpColorManagerV1Request_get_surface.ord, addr wp_color_management_surface_v1_interface, cast[ptr Proxy](wpColorManagerV1).get_version(), 0, nil, surface))
proc getSurfaceFeedback*(wpColorManagerV1: ptr WpColorManagerV1; surface: ptr Surface): ptr WpColorManagementSurfaceFeedbackV1 {.inline.} =
  ## create a color management feedback interface
  ## 
  ## This creates a new color wp_color_management_surface_feedback_v1 object
  ## for the given wl_surface.
  ## 
  ## See the wp_color_management_surface_feedback_v1 interface for more
  ## details.
  ## 
  cast[ptr WpColorManagementSurfaceFeedbackV1](cast[ptr Proxy](wpColorManagerV1).marshal_flags(WpColorManagerV1Request_get_surface_feedback.ord, addr wp_color_management_surface_feedback_v1_interface, cast[ptr Proxy](wpColorManagerV1).get_version(), 0, nil, surface))
proc createIccCreator*(wpColorManagerV1: ptr WpColorManagerV1): ptr WpImageDescriptionCreatorIccV1 {.inline.} =
  ## make a new ICC-based image description creator object
  ## 
  ## Makes a new ICC-based image description creator object with all
  ## properties initially unset. The client can then use the object's
  ## interface to define all the required properties for an image description
  ## and finally create a wp_image_description_v1 object.
  ## 
  ## This request can be used when the compositor advertises
  ## wp_color_manager_v1.feature.icc_v2_v4.
  ## Otherwise this request raises the protocol error unsupported_feature.
  ## 
  cast[ptr WpImageDescriptionCreatorIccV1](cast[ptr Proxy](wpColorManagerV1).marshal_flags(WpColorManagerV1Request_create_icc_creator.ord, addr wp_image_description_creator_icc_v1_interface, cast[ptr Proxy](wpColorManagerV1).get_version(), 0, nil))
proc createParametricCreator*(wpColorManagerV1: ptr WpColorManagerV1): ptr WpImageDescriptionCreatorParamsV1 {.inline.} =
  ## make a new parametric image description creator object
  ## 
  ## Makes a new parametric image description creator object with all
  ## properties initially unset. The client can then use the object's
  ## interface to define all the required properties for an image description
  ## and finally create a wp_image_description_v1 object.
  ## 
  ## This request can be used when the compositor advertises
  ## wp_color_manager_v1.feature.parametric.
  ## Otherwise this request raises the protocol error unsupported_feature.
  ## 
  cast[ptr WpImageDescriptionCreatorParamsV1](cast[ptr Proxy](wpColorManagerV1).marshal_flags(WpColorManagerV1Request_create_parametric_creator.ord, addr wp_image_description_creator_params_v1_interface, cast[ptr Proxy](wpColorManagerV1).get_version(), 0, nil))
proc createWindowsScrgb*(wpColorManagerV1: ptr WpColorManagerV1): ptr WpImageDescriptionV1 {.inline.} =
  ## create Windows-scRGB image description object
  ## 
  ## This creates a pre-defined image description for the so-called
  ## Windows-scRGB stimulus encoding. This comes from the Windows 10 handling
  ## of its own definition of an scRGB color space for an HDR screen
  ## driven in BT.2100/PQ signalling mode.
  ## 
  ## Windows-scRGB uses sRGB (BT.709) color primaries and white point.
  ## The transfer characteristic is extended linear.
  ## 
  ## The nominal color channel value range is extended, meaning it includes
  ## negative and greater than 1.0 values. Negative values are used to
  ## escape the sRGB color gamut boundaries. To make use of the extended
  ## range, the client needs to use a pixel format that can represent those
  ## values, e.g. floating-point 16 bits per channel.
  ## 
  ## Nominal color value R=G=B=0.0 corresponds to BT.2100/PQ system
  ## 0 cd/m², and R=G=B=1.0 corresponds to BT.2100/PQ system 80 cd/m².
  ## The maximum is R=G=B=125.0 corresponding to 10k cd/m².
  ## 
  ## Windows-scRGB is displayed by Windows 10 by converting it to
  ## BT.2100/PQ, maintaining the CIE 1931 chromaticity and mapping the
  ## luminance as above. No adjustment is made to the signal to account
  ## for the viewing conditions.
  ## 
  ## The reference white level of Windows-scRGB is unknown. If a
  ## reference white level must be assumed for compositor processing, it
  ## should be R=G=B=2.5375 corresponding to 203 cd/m² of Report ITU-R
  ## BT.2408-7.
  ## 
  ## The target color volume of Windows-scRGB is unknown. The color gamut
  ## may be anything between sRGB and BT.2100.
  ## 
  ## Note: EGL_EXT_gl_colorspace_scrgb_linear definition differs from
  ## Windows-scRGB by using R=G=B=1.0 as the reference white level, while
  ## Windows-scRGB reference white level is unknown or varies. However,
  ## it seems probable that Windows implements both
  ## EGL_EXT_gl_colorspace_scrgb_linear and Vulkan
  ## VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT as Windows-scRGB.
  ## 
  ## This request can be used when the compositor advertises
  ## wp_color_manager_v1.feature.windows_scrgb.
  ## Otherwise this request raises the protocol error unsupported_feature.
  ## 
  ## The resulting image description object does not allow get_information
  ## request. The wp_image_description_v1.ready event shall be sent.
  ## 
  cast[ptr WpImageDescriptionV1](cast[ptr Proxy](wpColorManagerV1).marshal_flags(WpColorManagerV1Request_create_windows_scrgb.ord, addr wp_image_description_v1_interface, cast[ptr Proxy](wpColorManagerV1).get_version(), 0, nil))
type WpColorManagementOutputV1Listener* = object
  imageDescriptionChanged*: proc(
    data: pointer;
    wpColorManagementOutputV1: ptr WpColorManagementOutputV1;
  ) {.nimcall.}
proc addListener*(wpColorManagementOutputV1: ptr WpColorManagementOutputV1; listener: ptr WpColorManagementOutputV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](wpColorManagementOutputV1).add_listener(listener, data)

proc setUserData*(wpColorManagementOutputV1: ptr WpColorManagementOutputV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpColorManagementOutputV1).set_user_data(user_data)
proc getUserData*(wpColorManagementOutputV1: ptr WpColorManagementOutputV1): pointer {.inline.} =
  cast[ptr Proxy](wpColorManagementOutputV1).get_user_data()
proc getVersion*(wpColorManagementOutputV1: ptr WpColorManagementOutputV1): uint32 {.inline.} =
  cast[ptr Proxy](wpColorManagementOutputV1).get_version()
proc destroy*(wpColorManagementOutputV1: ptr WpColorManagementOutputV1) {.inline.} =
  ## destroy the color management output
  ## 
  ## Destroy the color wp_color_management_output_v1 object. This does not
  ## affect any remaining protocol objects.
  ## 
  cast[ptr Proxy](wpColorManagementOutputV1).marshal_flags(WpColorManagementOutputV1Request_destroy.ord, nil, cast[ptr Proxy](wpColorManagementOutputV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getImageDescription*(wpColorManagementOutputV1: ptr WpColorManagementOutputV1): ptr WpImageDescriptionV1 {.inline.} =
  ## get the image description of the output
  ## 
  ## This creates a new wp_image_description_v1 object for the current image
  ## description of the output. There always is exactly one image description
  ## active for an output so the client should destroy the image description
  ## created by earlier invocations of this request. This request is usually
  ## sent as a reaction to the image_description_changed event or when
  ## creating a wp_color_management_output_v1 object.
  ## 
  ## The image description of an output represents the color encoding the
  ## output expects. There might be performance and power advantages, as well
  ## as improved color reproduction, if a content update matches the image
  ## description of the output it is being shown on. If a content update is
  ## shown on any other output than the one it matches the image description
  ## of, then the color reproduction on those outputs might be considerably
  ## worse.
  ## 
  ## The created wp_image_description_v1 object preserves the image
  ## description of the output from the time the object was created.
  ## 
  ## The resulting image description object allows get_information request.
  ## 
  ## If this protocol object is inert, the resulting image description object
  ## shall immediately deliver the wp_image_description_v1.failed event with
  ## the no_output cause.
  ## 
  ## If the interface version is inadequate for the output's image
  ## description, meaning that the client does not support all the events
  ## needed to deliver the crucial information, the resulting image
  ## description object shall immediately deliver the
  ## wp_image_description_v1.failed event with the low_version cause.
  ## 
  ## Otherwise the object shall immediately deliver the ready event.
  ## 
  cast[ptr WpImageDescriptionV1](cast[ptr Proxy](wpColorManagementOutputV1).marshal_flags(WpColorManagementOutputV1Request_get_image_description.ord, addr wp_image_description_v1_interface, cast[ptr Proxy](wpColorManagementOutputV1).get_version(), 0, nil))
proc setUserData*(wpColorManagementSurfaceV1: ptr WpColorManagementSurfaceV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpColorManagementSurfaceV1).set_user_data(user_data)
proc getUserData*(wpColorManagementSurfaceV1: ptr WpColorManagementSurfaceV1): pointer {.inline.} =
  cast[ptr Proxy](wpColorManagementSurfaceV1).get_user_data()
proc getVersion*(wpColorManagementSurfaceV1: ptr WpColorManagementSurfaceV1): uint32 {.inline.} =
  cast[ptr Proxy](wpColorManagementSurfaceV1).get_version()
proc destroy*(wpColorManagementSurfaceV1: ptr WpColorManagementSurfaceV1) {.inline.} =
  ## destroy the color management interface for a surface
  ## 
  ## Destroy the wp_color_management_surface_v1 object and do the same as
  ## unset_image_description.
  ## 
  cast[ptr Proxy](wpColorManagementSurfaceV1).marshal_flags(WpColorManagementSurfaceV1Request_destroy.ord, nil, cast[ptr Proxy](wpColorManagementSurfaceV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setImageDescription*(wpColorManagementSurfaceV1: ptr WpColorManagementSurfaceV1; imageDescription: ptr WpImageDescriptionV1; renderIntent: uint32) {.inline.} =
  ## set the surface image description
  ## 
  ## If this protocol object is inert, the protocol error inert is raised.
  ## 
  ## Set the image description of the underlying surface. The image
  ## description and rendering intent are double-buffered state, see
  ## wl_surface.commit.
  ## 
  ## It is the client's responsibility to understand the image description
  ## it sets on a surface, and to provide content that matches that image
  ## description. Compositors might convert images to match their own or any
  ## other image descriptions.
  ## 
  ## Image descriptions which are not ready (see wp_image_description_v1)
  ## are forbidden in this request, and in such case the protocol error
  ## image_description is raised.
  ## 
  ## All image descriptions which are ready (see wp_image_description_v1)
  ## are allowed and must always be accepted by the compositor.
  ## 
  ## A rendering intent provides the client's preference on how content
  ## colors should be mapped to each output. The render_intent value must
  ## be one advertised by the compositor with
  ## wp_color_manager_v1.render_intent event, otherwise the protocol error
  ## render_intent is raised.
  ## 
  ## When an image description is set on a surface, the Transfer
  ## Characteristics of the image description defines the valid range of
  ## the nominal (real-valued) color channel values. The processing of
  ## out-of-range color channel values is undefined, but compositors are
  ## recommended to clamp the values to the valid range when possible.
  ## 
  ## By default, a surface does not have an associated image description
  ## nor a rendering intent. The handling of color on such surfaces is
  ## compositor implementation defined. Compositors should handle such
  ## surfaces as sRGB, but may handle them differently if they have specific
  ## requirements.
  ## 
  ## Setting the image description has copy semantics; after this request,
  ## the image description can be immediately destroyed without affecting
  ## the pending state of the surface.
  ## 
  cast[ptr Proxy](wpColorManagementSurfaceV1).marshal_flags(WpColorManagementSurfaceV1Request_set_image_description.ord, nil, cast[ptr Proxy](wpColorManagementSurfaceV1).get_version(), 0, imageDescription, renderIntent)
proc unsetImageDescription*(wpColorManagementSurfaceV1: ptr WpColorManagementSurfaceV1) {.inline.} =
  ## remove the surface image description
  ## 
  ## If this protocol object is inert, the protocol error inert is raised.
  ## 
  ## This request removes any image description from the surface. See
  ## set_image_description for how a compositor handles a surface without
  ## an image description. This is double-buffered state, see
  ## wl_surface.commit.
  ## 
  cast[ptr Proxy](wpColorManagementSurfaceV1).marshal_flags(WpColorManagementSurfaceV1Request_unset_image_description.ord, nil, cast[ptr Proxy](wpColorManagementSurfaceV1).get_version(), 0)
type WpColorManagementSurfaceFeedbackV1Listener* = object
  preferredChanged*: proc(
    data: pointer;
    wpColorManagementSurfaceFeedbackV1: ptr WpColorManagementSurfaceFeedbackV1;
    identity: uint32;
  ) {.nimcall.}
proc addListener*(wpColorManagementSurfaceFeedbackV1: ptr WpColorManagementSurfaceFeedbackV1; listener: ptr WpColorManagementSurfaceFeedbackV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](wpColorManagementSurfaceFeedbackV1).add_listener(listener, data)

proc setUserData*(wpColorManagementSurfaceFeedbackV1: ptr WpColorManagementSurfaceFeedbackV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpColorManagementSurfaceFeedbackV1).set_user_data(user_data)
proc getUserData*(wpColorManagementSurfaceFeedbackV1: ptr WpColorManagementSurfaceFeedbackV1): pointer {.inline.} =
  cast[ptr Proxy](wpColorManagementSurfaceFeedbackV1).get_user_data()
proc getVersion*(wpColorManagementSurfaceFeedbackV1: ptr WpColorManagementSurfaceFeedbackV1): uint32 {.inline.} =
  cast[ptr Proxy](wpColorManagementSurfaceFeedbackV1).get_version()
proc destroy*(wpColorManagementSurfaceFeedbackV1: ptr WpColorManagementSurfaceFeedbackV1) {.inline.} =
  ## destroy the color management interface for a surface
  ## 
  ## Destroy the wp_color_management_surface_feedback_v1 object.
  ## 
  cast[ptr Proxy](wpColorManagementSurfaceFeedbackV1).marshal_flags(WpColorManagementSurfaceFeedbackV1Request_destroy.ord, nil, cast[ptr Proxy](wpColorManagementSurfaceFeedbackV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getPreferred*(wpColorManagementSurfaceFeedbackV1: ptr WpColorManagementSurfaceFeedbackV1): ptr WpImageDescriptionV1 {.inline.} =
  ## get the preferred image description
  ## 
  ## If this protocol object is inert, the protocol error inert is raised.
  ## 
  ## The preferred image description represents the compositor's preferred
  ## color encoding for this wl_surface at the current time. There might be
  ## performance and power advantages, as well as improved color
  ## reproduction, if the image description of a content update matches the
  ## preferred image description.
  ## 
  ## This creates a new wp_image_description_v1 object for the currently
  ## preferred image description for the wl_surface. The client should
  ## stop using and destroy the image descriptions created by earlier
  ## invocations of this request for the associated wl_surface.
  ## This request is usually sent as a reaction to the preferred_changed
  ## event or when creating a wp_color_management_surface_feedback_v1 object
  ## if the client is capable of adapting to image descriptions.
  ## 
  ## The created wp_image_description_v1 object preserves the preferred image
  ## description of the wl_surface from the time the object was created.
  ## 
  ## The resulting image description object allows get_information request.
  ## 
  ## If the image description is parametric, the client should set it on its
  ## wl_surface only if the image description is an exact match with the
  ## client content. Particularly if everything else matches, but the target
  ## color volume is greater than what the client needs, the client should
  ## create its own parameric image description with its exact parameters.
  ## 
  ## If the interface version is inadequate for the preferred image
  ## description, meaning that the client does not support all the
  ## events needed to deliver the crucial information, the resulting image
  ## description object shall immediately deliver the
  ## wp_image_description_v1.failed event with the low_version cause,
  ## otherwise the object shall immediately deliver the ready event.
  ## 
  cast[ptr WpImageDescriptionV1](cast[ptr Proxy](wpColorManagementSurfaceFeedbackV1).marshal_flags(WpColorManagementSurfaceFeedbackV1Request_get_preferred.ord, addr wp_image_description_v1_interface, cast[ptr Proxy](wpColorManagementSurfaceFeedbackV1).get_version(), 0, nil))
proc getPreferredParametric*(wpColorManagementSurfaceFeedbackV1: ptr WpColorManagementSurfaceFeedbackV1): ptr WpImageDescriptionV1 {.inline.} =
  ## get the preferred image description
  ## 
  ## The same description as for get_preferred applies, except the returned
  ## image description is guaranteed to be parametric. This is meant for
  ## clients that can only deal with parametric image descriptions.
  ## 
  ## If the compositor doesn't support parametric image descriptions, the
  ## unsupported_feature error is emitted.
  ## 
  cast[ptr WpImageDescriptionV1](cast[ptr Proxy](wpColorManagementSurfaceFeedbackV1).marshal_flags(WpColorManagementSurfaceFeedbackV1Request_get_preferred_parametric.ord, addr wp_image_description_v1_interface, cast[ptr Proxy](wpColorManagementSurfaceFeedbackV1).get_version(), 0, nil))
proc setUserData*(wpImageDescriptionCreatorIccV1: ptr WpImageDescriptionCreatorIccV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpImageDescriptionCreatorIccV1).set_user_data(user_data)
proc getUserData*(wpImageDescriptionCreatorIccV1: ptr WpImageDescriptionCreatorIccV1): pointer {.inline.} =
  cast[ptr Proxy](wpImageDescriptionCreatorIccV1).get_user_data()
proc getVersion*(wpImageDescriptionCreatorIccV1: ptr WpImageDescriptionCreatorIccV1): uint32 {.inline.} =
  cast[ptr Proxy](wpImageDescriptionCreatorIccV1).get_version()
proc destroy*(wpImageDescriptionCreatorIccV1: ptr WpImageDescriptionCreatorIccV1) {.inline.} =
  destroy cast[ptr Proxy](wpImageDescriptionCreatorIccV1)
proc create*(wpImageDescriptionCreatorIccV1: ptr WpImageDescriptionCreatorIccV1): ptr WpImageDescriptionV1 {.inline.} =
  ## Create the image description object from ICC data
  ## 
  ## Create an image description object based on the ICC information
  ## previously set on this object. A compositor must parse the ICC data in
  ## some undefined but finite amount of time.
  ## 
  ## The completeness of the parameter set is verified. If the set is not
  ## complete, the protocol error incomplete_set is raised. For the
  ## definition of a complete set, see the description of this interface.
  ## 
  ## If the particular combination of the information is not supported
  ## by the compositor, the resulting image description object shall
  ## immediately deliver the wp_image_description_v1.failed event with the
  ## 'unsupported' cause. If a valid image description was created from the
  ## information, the wp_image_description_v1.ready event will eventually
  ## be sent instead.
  ## 
  ## This request destroys the wp_image_description_creator_icc_v1 object.
  ## 
  ## The resulting image description object does not allow get_information
  ## request.
  ## 
  cast[ptr WpImageDescriptionV1](cast[ptr Proxy](wpImageDescriptionCreatorIccV1).marshal_flags(WpImageDescriptionCreatorIccV1Request_create.ord, addr wp_image_description_v1_interface, cast[ptr Proxy](wpImageDescriptionCreatorIccV1).get_version(), WL_MARSHAL_FLAG_DESTROY, nil))
proc setIccFile*(wpImageDescriptionCreatorIccV1: ptr WpImageDescriptionCreatorIccV1; iccProfile: int32; offset: uint32; length: uint32) {.inline.} =
  ## set the ICC profile file
  ## 
  ## Sets the ICC profile file to be used as the basis of the image
  ## description.
  ## 
  ## The data shall be found through the given fd at the given offset, having
  ## the given length. The fd must be seekable and readable. Violating these
  ## requirements raises the bad_fd protocol error.
  ## 
  ## If reading the data fails due to an error independent of the client, the
  ## compositor shall send the wp_image_description_v1.failed event on the
  ## created wp_image_description_v1 with the 'operating_system' cause.
  ## 
  ## The maximum size of the ICC profile is 32 MB. If length is greater than
  ## that or zero, the protocol error bad_size is raised. If offset + length
  ## exceeds the file size, the protocol error out_of_file is raised.
  ## 
  ## A compositor may read the file at any time starting from this request
  ## and only until whichever happens first:
  ## - If create request was issued, the wp_image_description_v1 object
  ## delivers either failed or ready event; or
  ## - if create request was not issued, this
  ## wp_image_description_creator_icc_v1 object is destroyed.
  ## 
  ## A compositor shall not modify the contents of the file, and the fd may
  ## be sealed for writes and size changes. The client must ensure to its
  ## best ability that the data does not change while the compositor is
  ## reading it.
  ## 
  ## The data must represent a valid ICC profile. The ICC profile version
  ## must be 2 or 4, it must be a 3 channel profile and the class must be
  ## Display or ColorSpace. Violating these requirements will not result in a
  ## protocol error, but will eventually send the
  ## wp_image_description_v1.failed event on the created
  ## wp_image_description_v1 with the 'unsupported' cause.
  ## 
  ## See the International Color Consortium specification ICC.1:2022 for more
  ## details about ICC profiles.
  ## 
  ## If ICC file has already been set on this object, the protocol error
  ## already_set is raised.
  ## 
  cast[ptr Proxy](wpImageDescriptionCreatorIccV1).marshal_flags(WpImageDescriptionCreatorIccV1Request_set_icc_file.ord, nil, cast[ptr Proxy](wpImageDescriptionCreatorIccV1).get_version(), 0, iccProfile, offset, length)
proc setUserData*(wpImageDescriptionCreatorParamsV1: ptr WpImageDescriptionCreatorParamsV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).set_user_data(user_data)
proc getUserData*(wpImageDescriptionCreatorParamsV1: ptr WpImageDescriptionCreatorParamsV1): pointer {.inline.} =
  cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).get_user_data()
proc getVersion*(wpImageDescriptionCreatorParamsV1: ptr WpImageDescriptionCreatorParamsV1): uint32 {.inline.} =
  cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).get_version()
proc destroy*(wpImageDescriptionCreatorParamsV1: ptr WpImageDescriptionCreatorParamsV1) {.inline.} =
  destroy cast[ptr Proxy](wpImageDescriptionCreatorParamsV1)
proc create*(wpImageDescriptionCreatorParamsV1: ptr WpImageDescriptionCreatorParamsV1): ptr WpImageDescriptionV1 {.inline.} =
  ## Create the image description object using params
  ## 
  ## Create an image description object based on the parameters previously
  ## set on this object.
  ## 
  ## The completeness of the parameter set is verified. If the set is not
  ## complete, the protocol error incomplete_set is raised. For the
  ## definition of a complete set, see the description of this interface.
  ## 
  ## The protocol error invalid_luminance is raised if any of the following
  ## requirements is not met:
  ## - When max_cll is set, it must be greater than min L and less or equal
  ## to max L of the mastering luminance range.
  ## - When max_fall is set, it must be greater than min L and less or equal
  ## to max L of the mastering luminance range.
  ## - When both max_cll and max_fall are set, max_fall must be less or equal
  ## to max_cll.
  ## 
  ## If the particular combination of the parameter set is not supported
  ## by the compositor, the resulting image description object shall
  ## immediately deliver the wp_image_description_v1.failed event with the
  ## 'unsupported' cause. If a valid image description was created from the
  ## parameter set, the wp_image_description_v1.ready event will eventually
  ## be sent instead.
  ## 
  ## This request destroys the wp_image_description_creator_params_v1
  ## object.
  ## 
  ## The resulting image description object does not allow get_information
  ## request.
  ## 
  cast[ptr WpImageDescriptionV1](cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).marshal_flags(WpImageDescriptionCreatorParamsV1Request_create.ord, addr wp_image_description_v1_interface, cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).get_version(), WL_MARSHAL_FLAG_DESTROY, nil))
proc setTfNamed*(wpImageDescriptionCreatorParamsV1: ptr WpImageDescriptionCreatorParamsV1; tf: uint32) {.inline.} =
  ## named transfer characteristic
  ## 
  ## Sets the transfer characteristic using explicitly enumerated named
  ## functions.
  ## 
  ## When the resulting image description is attached to an image, the
  ## content should be encoded and decoded according to the industry standard
  ## practices for the transfer characteristic.
  ## 
  ## Only names advertised with wp_color_manager_v1 event supported_tf_named
  ## are allowed. Other values shall raise the protocol error invalid_tf.
  ## 
  ## If transfer characteristic has already been set on this object, the
  ## protocol error already_set is raised.
  ## 
  cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).marshal_flags(WpImageDescriptionCreatorParamsV1Request_set_tf_named.ord, nil, cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).get_version(), 0, tf)
proc setTfPower*(wpImageDescriptionCreatorParamsV1: ptr WpImageDescriptionCreatorParamsV1; eexp: uint32) {.inline.} =
  ## transfer characteristic as a power curve
  ## 
  ## Sets the color component transfer characteristic to a power curve with
  ## the given exponent. Negative values are handled by mirroring the
  ## positive half of the curve through the origin. The valid domain and
  ## range of the curve are all finite real numbers. This curve represents
  ## the conversion from electrical to optical color channel values.
  ## 
  ## When the resulting image description is attached to an image, the
  ## content should be encoded with the inverse of the power curve.
  ## 
  ## The curve exponent shall be multiplied by 10000 to get the argument eexp
  ## value to carry the precision of 4 decimals.
  ## 
  ## The curve exponent must be at least 1.0 and at most 10.0. Otherwise the
  ## protocol error invalid_tf is raised.
  ## 
  ## If transfer characteristic has already been set on this object, the
  ## protocol error already_set is raised.
  ## 
  ## This request can be used when the compositor advertises
  ## wp_color_manager_v1.feature.set_tf_power. Otherwise this request raises
  ## the protocol error unsupported_feature.
  ## 
  cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).marshal_flags(WpImageDescriptionCreatorParamsV1Request_set_tf_power.ord, nil, cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).get_version(), 0, eexp)
proc setPrimariesNamed*(wpImageDescriptionCreatorParamsV1: ptr WpImageDescriptionCreatorParamsV1; primaries: uint32) {.inline.} =
  ## named primaries
  ## 
  ## Sets the color primaries and white point using explicitly named sets.
  ## This describes the primary color volume which is the basis for color
  ## value encoding.
  ## 
  ## Only names advertised with wp_color_manager_v1 event
  ## supported_primaries_named are allowed. Other values shall raise the
  ## protocol error invalid_primaries_named.
  ## 
  ## If primaries have already been set on this object, the protocol error
  ## already_set is raised.
  ## 
  cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).marshal_flags(WpImageDescriptionCreatorParamsV1Request_set_primaries_named.ord, nil, cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).get_version(), 0, primaries)
proc setPrimaries*(wpImageDescriptionCreatorParamsV1: ptr WpImageDescriptionCreatorParamsV1; rX: int32; rY: int32; gX: int32; gY: int32; bX: int32; bY: int32; wX: int32; wY: int32) {.inline.} =
  ## primaries as chromaticity coordinates
  ## 
  ## Sets the color primaries and white point using CIE 1931 xy chromaticity
  ## coordinates. This describes the primary color volume which is the basis
  ## for color value encoding.
  ## 
  ## Each coordinate value is multiplied by 1 million to get the argument
  ## value to carry precision of 6 decimals.
  ## 
  ## If primaries have already been set on this object, the protocol error
  ## already_set is raised.
  ## 
  ## This request can be used if the compositor advertises
  ## wp_color_manager_v1.feature.set_primaries. Otherwise this request raises
  ## the protocol error unsupported_feature.
  ## 
  cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).marshal_flags(WpImageDescriptionCreatorParamsV1Request_set_primaries.ord, nil, cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).get_version(), 0, rX, rY, gX, gY, bX, bY, wX, wY)
proc setLuminances*(wpImageDescriptionCreatorParamsV1: ptr WpImageDescriptionCreatorParamsV1; minLum: uint32; maxLum: uint32; referenceLum: uint32) {.inline.} =
  ## primary color volume luminance range and reference white
  ## 
  ## Sets the primary color volume luminance range and the reference white
  ## luminance level. These values include the minimum display emission
  ## and ambient flare luminances, assumed to be optically additive and have
  ## the chromaticity of the primary color volume white point.
  ## 
  ## The default luminances from
  ## https://www.color.org/chardata/rgb/srgb.xalter are
  ## - primary color volume minimum: 0.2 cd/m²
  ## - primary color volume maximum: 80 cd/m²
  ## - reference white: 80 cd/m²
  ## 
  ## Setting a named transfer characteristic can imply other default
  ## luminances.
  ## 
  ## The default luminances get overwritten when this request is used.
  ## With transfer_function.st2084_pq the given 'max_lum' value is ignored,
  ## and 'max_lum' is taken as 'min_lum' + 10000 cd/m².
  ## 
  ## 'min_lum' and 'max_lum' specify the minimum and maximum luminances of
  ## the primary color volume as reproduced by the targeted display.
  ## 
  ## 'reference_lum' specifies the luminance of the reference white as
  ## reproduced by the targeted display, and reflects the targeted viewing
  ## environment.
  ## 
  ## Compositors should make sure that all content is anchored, meaning that
  ## an input signal level of 'reference_lum' on one image description and
  ## another input signal level of 'reference_lum' on another image
  ## description should produce the same output level, even though the
  ## 'reference_lum' on both image representations can be different.
  ## 
  ## 'reference_lum' may be higher than 'max_lum'. In that case reaching
  ## the reference white output level in image content requires the
  ## 'extended_target_volume' feature support.
  ## 
  ## If 'max_lum' or 'reference_lum' are less than or equal to 'min_lum',
  ## the protocol error invalid_luminance is raised.
  ## 
  ## The minimum luminance is multiplied by 10000 to get the argument
  ## 'min_lum' value and carries precision of 4 decimals. The maximum
  ## luminance and reference white luminance values are unscaled.
  ## 
  ## If the primary color volume luminance range and the reference white
  ## luminance level have already been set on this object, the protocol error
  ## already_set is raised.
  ## 
  ## This request can be used if the compositor advertises
  ## wp_color_manager_v1.feature.set_luminances. Otherwise this request
  ## raises the protocol error unsupported_feature.
  ## 
  cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).marshal_flags(WpImageDescriptionCreatorParamsV1Request_set_luminances.ord, nil, cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).get_version(), 0, minLum, maxLum, referenceLum)
proc setMasteringDisplayPrimaries*(wpImageDescriptionCreatorParamsV1: ptr WpImageDescriptionCreatorParamsV1; rX: int32; rY: int32; gX: int32; gY: int32; bX: int32; bY: int32; wX: int32; wY: int32) {.inline.} =
  ## mastering display primaries as chromaticity coordinates
  ## 
  ## Provides the color primaries and white point of the mastering display
  ## using CIE 1931 xy chromaticity coordinates. This is compatible with the
  ## SMPTE ST 2086 definition of HDR static metadata.
  ## 
  ## The mastering display primaries and mastering display luminances define
  ## the target color volume.
  ## 
  ## If mastering display primaries are not explicitly set, the target color
  ## volume is assumed to have the same primaries as the primary color volume.
  ## 
  ## The target color volume is defined by all tristimulus values between 0.0
  ## and 1.0 (inclusive) of the color space defined by the given mastering
  ## display primaries and white point. The colorimetry is identical between
  ## the container color space and the mastering display color space,
  ## including that no chromatic adaptation is applied even if the white
  ## points differ.
  ## 
  ## The target color volume can exceed the primary color volume to allow for
  ## a greater color volume with an existing color space definition (for
  ## example scRGB). It can be smaller than the primary color volume to
  ## minimize gamut and tone mapping distances for big color spaces (HDR
  ## metadata).
  ## 
  ## To make use of the entire target color volume a suitable pixel format
  ## has to be chosen (e.g. floating point to exceed the primary color
  ## volume, or abusing limited quantization range as with xvYCC).
  ## 
  ## Each coordinate value is multiplied by 1 million to get the argument
  ## value to carry precision of 6 decimals.
  ## 
  ## If mastering display primaries have already been set on this object, the
  ## protocol error already_set is raised.
  ## 
  ## This request can be used if the compositor advertises
  ## wp_color_manager_v1.feature.set_mastering_display_primaries. Otherwise
  ## this request raises the protocol error unsupported_feature. The
  ## advertisement implies support only for target color volumes fully
  ## contained within the primary color volume.
  ## 
  ## If a compositor additionally supports target color volume exceeding the
  ## primary color volume, it must advertise
  ## wp_color_manager_v1.feature.extended_target_volume. If a client uses
  ## target color volume exceeding the primary color volume and the
  ## compositor does not support it, the result is implementation defined.
  ## Compositors are recommended to detect this case and fail the image
  ## description gracefully, but it may as well result in color artifacts.
  ## 
  cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).marshal_flags(WpImageDescriptionCreatorParamsV1Request_set_mastering_display_primaries.ord, nil, cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).get_version(), 0, rX, rY, gX, gY, bX, bY, wX, wY)
proc setMasteringLuminance*(wpImageDescriptionCreatorParamsV1: ptr WpImageDescriptionCreatorParamsV1; minLum: uint32; maxLum: uint32) {.inline.} =
  ## display mastering luminance range
  ## 
  ## Sets the luminance range that was used during the content mastering
  ## process as the minimum and maximum absolute luminance L. These values
  ## include the minimum display emission and ambient flare luminances,
  ## assumed to be optically additive and have the chromaticity of the
  ## primary color volume white point. This should be
  ## compatible with the SMPTE ST 2086 definition of HDR static metadata.
  ## 
  ## The mastering display primaries and mastering display luminances define
  ## the target color volume.
  ## 
  ## If mastering luminances are not explicitly set, the target color volume
  ## is assumed to have the same min and max luminances as the primary color
  ## volume.
  ## 
  ## If max L is less than or equal to min L, the protocol error
  ## invalid_luminance is raised.
  ## 
  ## Min L value is multiplied by 10000 to get the argument min_lum value
  ## and carry precision of 4 decimals. Max L value is unscaled for max_lum.
  ## 
  ## This request can be used if the compositor advertises
  ## wp_color_manager_v1.feature.set_mastering_display_primaries. Otherwise
  ## this request raises the protocol error unsupported_feature. The
  ## advertisement implies support only for target color volumes fully
  ## contained within the primary color volume.
  ## 
  ## If a compositor additionally supports target color volume exceeding the
  ## primary color volume, it must advertise
  ## wp_color_manager_v1.feature.extended_target_volume. If a client uses
  ## target color volume exceeding the primary color volume and the
  ## compositor does not support it, the result is implementation defined.
  ## Compositors are recommended to detect this case and fail the image
  ## description gracefully, but it may as well result in color artifacts.
  ## 
  cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).marshal_flags(WpImageDescriptionCreatorParamsV1Request_set_mastering_luminance.ord, nil, cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).get_version(), 0, minLum, maxLum)
proc setMaxCll*(wpImageDescriptionCreatorParamsV1: ptr WpImageDescriptionCreatorParamsV1; maxCll: uint32) {.inline.} =
  ## maximum content light level
  ## 
  ## Sets the maximum content light level (max_cll) as defined by CTA-861-H.
  ## 
  ## max_cll is undefined by default.
  ## 
  cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).marshal_flags(WpImageDescriptionCreatorParamsV1Request_set_max_cll.ord, nil, cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).get_version(), 0, maxCll)
proc setMaxFall*(wpImageDescriptionCreatorParamsV1: ptr WpImageDescriptionCreatorParamsV1; maxFall: uint32) {.inline.} =
  ## maximum frame-average light level
  ## 
  ## Sets the maximum frame-average light level (max_fall) as defined by
  ## CTA-861-H.
  ## 
  ## max_fall is undefined by default.
  ## 
  cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).marshal_flags(WpImageDescriptionCreatorParamsV1Request_set_max_fall.ord, nil, cast[ptr Proxy](wpImageDescriptionCreatorParamsV1).get_version(), 0, maxFall)
type WpImageDescriptionV1Listener* = object
  failed*: proc(
    data: pointer;
    wpImageDescriptionV1: ptr WpImageDescriptionV1;
    cause: uint32;
    msg: cstring;
  ) {.nimcall.}
  ready*: proc(
    data: pointer;
    wpImageDescriptionV1: ptr WpImageDescriptionV1;
    identity: uint32;
  ) {.nimcall.}
proc addListener*(wpImageDescriptionV1: ptr WpImageDescriptionV1; listener: ptr WpImageDescriptionV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](wpImageDescriptionV1).add_listener(listener, data)

proc setUserData*(wpImageDescriptionV1: ptr WpImageDescriptionV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpImageDescriptionV1).set_user_data(user_data)
proc getUserData*(wpImageDescriptionV1: ptr WpImageDescriptionV1): pointer {.inline.} =
  cast[ptr Proxy](wpImageDescriptionV1).get_user_data()
proc getVersion*(wpImageDescriptionV1: ptr WpImageDescriptionV1): uint32 {.inline.} =
  cast[ptr Proxy](wpImageDescriptionV1).get_version()
proc destroy*(wpImageDescriptionV1: ptr WpImageDescriptionV1) {.inline.} =
  ## destroy the image description
  ## 
  ## Destroy this object. It is safe to destroy an object which is not ready.
  ## 
  ## Destroying a wp_image_description_v1 object has no side-effects, not
  ## even if a wp_color_management_surface_v1.set_image_description has not
  ## yet been followed by a wl_surface.commit.
  ## 
  cast[ptr Proxy](wpImageDescriptionV1).marshal_flags(WpImageDescriptionV1Request_destroy.ord, nil, cast[ptr Proxy](wpImageDescriptionV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getInformation*(wpImageDescriptionV1: ptr WpImageDescriptionV1): ptr WpImageDescriptionInfoV1 {.inline.} =
  ## get information about the image description
  ## 
  ## Creates a wp_image_description_info_v1 object which delivers the
  ## information that makes up the image description.
  ## 
  ## Not all image description protocol objects allow get_information
  ## request. Whether it is allowed or not is defined by the request that
  ## created the object. If get_information is not allowed, the protocol
  ## error no_information is raised.
  ## 
  cast[ptr WpImageDescriptionInfoV1](cast[ptr Proxy](wpImageDescriptionV1).marshal_flags(WpImageDescriptionV1Request_get_information.ord, addr wp_image_description_info_v1_interface, cast[ptr Proxy](wpImageDescriptionV1).get_version(), 0, nil))
type WpImageDescriptionInfoV1Listener* = object
  done*: proc(
    data: pointer;
    wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1;
  ) {.nimcall.}
  iccFile*: proc(
    data: pointer;
    wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1;
    icc: int32;
    iccSize: uint32;
  ) {.nimcall.}
  primaries*: proc(
    data: pointer;
    wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1;
    rX: int32;
    rY: int32;
    gX: int32;
    gY: int32;
    bX: int32;
    bY: int32;
    wX: int32;
    wY: int32;
  ) {.nimcall.}
  primariesNamed*: proc(
    data: pointer;
    wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1;
    primaries: uint32;
  ) {.nimcall.}
  tfPower*: proc(
    data: pointer;
    wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1;
    eexp: uint32;
  ) {.nimcall.}
  tfNamed*: proc(
    data: pointer;
    wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1;
    tf: uint32;
  ) {.nimcall.}
  luminances*: proc(
    data: pointer;
    wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1;
    minLum: uint32;
    maxLum: uint32;
    referenceLum: uint32;
  ) {.nimcall.}
  targetPrimaries*: proc(
    data: pointer;
    wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1;
    rX: int32;
    rY: int32;
    gX: int32;
    gY: int32;
    bX: int32;
    bY: int32;
    wX: int32;
    wY: int32;
  ) {.nimcall.}
  targetLuminance*: proc(
    data: pointer;
    wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1;
    minLum: uint32;
    maxLum: uint32;
  ) {.nimcall.}
  targetMaxCll*: proc(
    data: pointer;
    wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1;
    maxCll: uint32;
  ) {.nimcall.}
  targetMaxFall*: proc(
    data: pointer;
    wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1;
    maxFall: uint32;
  ) {.nimcall.}
proc addListener*(wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1; listener: ptr WpImageDescriptionInfoV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](wpImageDescriptionInfoV1).add_listener(listener, data)

proc setUserData*(wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpImageDescriptionInfoV1).set_user_data(user_data)
proc getUserData*(wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1): pointer {.inline.} =
  cast[ptr Proxy](wpImageDescriptionInfoV1).get_user_data()
proc getVersion*(wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1): uint32 {.inline.} =
  cast[ptr Proxy](wpImageDescriptionInfoV1).get_version()
proc destroy*(wpImageDescriptionInfoV1: ptr WpImageDescriptionInfoV1) {.inline.} =
  destroy cast[ptr Proxy](wpImageDescriptionInfoV1)
