# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import code
export code

## The color_management_v1 SERVER protocol
## #######################################
## 
## Interfaces
## ==========
## 
## * wp_color_manager_v1
## * wp_color_management_output_v1
## * wp_color_management_surface_v1
## * wp_color_management_surface_feedback_v1
## * wp_image_description_creator_icc_v1
## * wp_image_description_creator_params_v1
## * wp_image_description_v1
## * wp_image_description_info_v1
## 
## Copyright
## =========
## 
## Copyright 2019 Sebastian Wick
## Copyright 2019 Erwin Burema
## Copyright 2020 AMD
## Copyright 2020-2024 Collabora, Ltd.
## Copyright 2024 Xaver Hugl
## Copyright 2022-2025 Red Hat, Inc.
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type WpColorManagerV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  getOutput*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    output: ptr Resource;
  ) {.nimcall.}
  getSurface*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    surface: ptr Resource;
  ) {.nimcall.}
  getSurfaceFeedback*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    surface: ptr Resource;
  ) {.nimcall.}
  createIccCreator*: proc(
    client: ptr Client;
    resource: ptr Resource;
    obj: uint32;
  ) {.nimcall.}
  createParametricCreator*: proc(
    client: ptr Client;
    resource: ptr Resource;
    obj: uint32;
  ) {.nimcall.}
  createWindowsScrgb*: proc(
    client: ptr Client;
    resource: ptr Resource;
    imageDescription: uint32;
  ) {.nimcall.}

proc wpColorManagerV1SendSupportedIntent*(resource: ptr Resource; renderIntent: uint32) {.inline, exportc: "wp_color_manager_v1_send_supported_intent".} =
  ## Sends an supported_intent event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *render_intent*: rendering intent
  resource.post_event(WpColorManagerV1Event_supported_intent.ord, renderIntent)

proc wpColorManagerV1SendSupportedFeature*(resource: ptr Resource; feature: uint32) {.inline, exportc: "wp_color_manager_v1_send_supported_feature".} =
  ## Sends an supported_feature event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *feature*: supported feature
  resource.post_event(WpColorManagerV1Event_supported_feature.ord, feature)

proc wpColorManagerV1SendSupportedTfNamed*(resource: ptr Resource; tf: uint32) {.inline, exportc: "wp_color_manager_v1_send_supported_tf_named".} =
  ## Sends an supported_tf_named event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *tf*: Named transfer function
  resource.post_event(WpColorManagerV1Event_supported_tf_named.ord, tf)

proc wpColorManagerV1SendSupportedPrimariesNamed*(resource: ptr Resource; primaries: uint32) {.inline, exportc: "wp_color_manager_v1_send_supported_primaries_named".} =
  ## Sends an supported_primaries_named event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *primaries*: Named color primaries
  resource.post_event(WpColorManagerV1Event_supported_primaries_named.ord, primaries)

proc wpColorManagerV1SendDone*(resource: ptr Resource) {.inline, exportc: "wp_color_manager_v1_send_done".} =
  ## Sends an done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(WpColorManagerV1Event_done.ord)

type WpColorManagementOutputV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  getImageDescription*: proc(
    client: ptr Client;
    resource: ptr Resource;
    imageDescription: uint32;
  ) {.nimcall.}

proc wpColorManagementOutputV1SendImageDescriptionChanged*(resource: ptr Resource) {.inline, exportc: "wp_color_management_output_v1_send_image_description_changed".} =
  ## Sends an image_description_changed event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(WpColorManagementOutputV1Event_image_description_changed.ord)

type WpColorManagementSurfaceV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  setImageDescription*: proc(
    client: ptr Client;
    resource: ptr Resource;
    imageDescription: ptr Resource;
    renderIntent: uint32;
  ) {.nimcall.}
  unsetImageDescription*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

type WpColorManagementSurfaceFeedbackV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  getPreferred*: proc(
    client: ptr Client;
    resource: ptr Resource;
    imageDescription: uint32;
  ) {.nimcall.}
  getPreferredParametric*: proc(
    client: ptr Client;
    resource: ptr Resource;
    imageDescription: uint32;
  ) {.nimcall.}

proc wpColorManagementSurfaceFeedbackV1SendPreferredChanged*(resource: ptr Resource; identity: uint32) {.inline, exportc: "wp_color_management_surface_feedback_v1_send_preferred_changed".} =
  ## Sends an preferred_changed event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *identity*: image description id number
  resource.post_event(WpColorManagementSurfaceFeedbackV1Event_preferred_changed.ord, identity)

type WpImageDescriptionCreatorIccV1Interface* = object
  create*: proc(
    client: ptr Client;
    resource: ptr Resource;
    imageDescription: uint32;
  ) {.nimcall.}
  setIccFile*: proc(
    client: ptr Client;
    resource: ptr Resource;
    iccProfile: int32;
    offset: uint32;
    length: uint32;
  ) {.nimcall.}

type WpImageDescriptionCreatorParamsV1Interface* = object
  create*: proc(
    client: ptr Client;
    resource: ptr Resource;
    imageDescription: uint32;
  ) {.nimcall.}
  setTfNamed*: proc(
    client: ptr Client;
    resource: ptr Resource;
    tf: uint32;
  ) {.nimcall.}
  setTfPower*: proc(
    client: ptr Client;
    resource: ptr Resource;
    eexp: uint32;
  ) {.nimcall.}
  setPrimariesNamed*: proc(
    client: ptr Client;
    resource: ptr Resource;
    primaries: uint32;
  ) {.nimcall.}
  setPrimaries*: proc(
    client: ptr Client;
    resource: ptr Resource;
    rX: int32;
    rY: int32;
    gX: int32;
    gY: int32;
    bX: int32;
    bY: int32;
    wX: int32;
    wY: int32;
  ) {.nimcall.}
  setLuminances*: proc(
    client: ptr Client;
    resource: ptr Resource;
    minLum: uint32;
    maxLum: uint32;
    referenceLum: uint32;
  ) {.nimcall.}
  setMasteringDisplayPrimaries*: proc(
    client: ptr Client;
    resource: ptr Resource;
    rX: int32;
    rY: int32;
    gX: int32;
    gY: int32;
    bX: int32;
    bY: int32;
    wX: int32;
    wY: int32;
  ) {.nimcall.}
  setMasteringLuminance*: proc(
    client: ptr Client;
    resource: ptr Resource;
    minLum: uint32;
    maxLum: uint32;
  ) {.nimcall.}
  setMaxCll*: proc(
    client: ptr Client;
    resource: ptr Resource;
    maxCll: uint32;
  ) {.nimcall.}
  setMaxFall*: proc(
    client: ptr Client;
    resource: ptr Resource;
    maxFall: uint32;
  ) {.nimcall.}

type WpImageDescriptionV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  getInformation*: proc(
    client: ptr Client;
    resource: ptr Resource;
    information: uint32;
  ) {.nimcall.}

proc wpImageDescriptionV1SendFailed*(resource: ptr Resource; cause: uint32; msg: cstring) {.inline, exportc: "wp_image_description_v1_send_failed".} =
  ## Sends an failed event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *cause*: generic reason
  ## * *msg*: ad hoc human-readable explanation
  resource.post_event(WpImageDescriptionV1Event_failed.ord, cause, msg)

proc wpImageDescriptionV1SendReady*(resource: ptr Resource; identity: uint32) {.inline, exportc: "wp_image_description_v1_send_ready".} =
  ## Sends an ready event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *identity*: image description id number
  resource.post_event(WpImageDescriptionV1Event_ready.ord, identity)

proc wpImageDescriptionInfoV1SendDone*(resource: ptr Resource) {.inline, exportc: "wp_image_description_info_v1_send_done".} =
  ## Sends an done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(WpImageDescriptionInfoV1Event_done.ord)

proc wpImageDescriptionInfoV1SendIccFile*(resource: ptr Resource; icc: int32; iccSize: uint32) {.inline, exportc: "wp_image_description_info_v1_send_icc_file".} =
  ## Sends an icc_file event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *icc*: ICC profile file descriptor
  ## * *icc_size*: ICC profile size, in bytes
  resource.post_event(WpImageDescriptionInfoV1Event_icc_file.ord, icc, iccSize)

proc wpImageDescriptionInfoV1SendPrimaries*(resource: ptr Resource; rX: int32; rY: int32; gX: int32; gY: int32; bX: int32; bY: int32; wX: int32; wY: int32) {.inline, exportc: "wp_image_description_info_v1_send_primaries".} =
  ## Sends an primaries event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *r_x*: Red x * 1M
  ## * *r_y*: Red y * 1M
  ## * *g_x*: Green x * 1M
  ## * *g_y*: Green y * 1M
  ## * *b_x*: Blue x * 1M
  ## * *b_y*: Blue y * 1M
  ## * *w_x*: White x * 1M
  ## * *w_y*: White y * 1M
  resource.post_event(WpImageDescriptionInfoV1Event_primaries.ord, rX, rY, gX, gY, bX, bY, wX, wY)

proc wpImageDescriptionInfoV1SendPrimariesNamed*(resource: ptr Resource; primaries: uint32) {.inline, exportc: "wp_image_description_info_v1_send_primaries_named".} =
  ## Sends an primaries_named event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *primaries*: named primaries
  resource.post_event(WpImageDescriptionInfoV1Event_primaries_named.ord, primaries)

proc wpImageDescriptionInfoV1SendTfPower*(resource: ptr Resource; eexp: uint32) {.inline, exportc: "wp_image_description_info_v1_send_tf_power".} =
  ## Sends an tf_power event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *eexp*: the exponent * 10000
  resource.post_event(WpImageDescriptionInfoV1Event_tf_power.ord, eexp)

proc wpImageDescriptionInfoV1SendTfNamed*(resource: ptr Resource; tf: uint32) {.inline, exportc: "wp_image_description_info_v1_send_tf_named".} =
  ## Sends an tf_named event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *tf*: named transfer function
  resource.post_event(WpImageDescriptionInfoV1Event_tf_named.ord, tf)

proc wpImageDescriptionInfoV1SendLuminances*(resource: ptr Resource; minLum: uint32; maxLum: uint32; referenceLum: uint32) {.inline, exportc: "wp_image_description_info_v1_send_luminances".} =
  ## Sends an luminances event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *min_lum*: minimum luminance (cd/m²) * 10000
  ## * *max_lum*: maximum luminance (cd/m²)
  ## * *reference_lum*: reference white luminance (cd/m²)
  resource.post_event(WpImageDescriptionInfoV1Event_luminances.ord, minLum, maxLum, referenceLum)

proc wpImageDescriptionInfoV1SendTargetPrimaries*(resource: ptr Resource; rX: int32; rY: int32; gX: int32; gY: int32; bX: int32; bY: int32; wX: int32; wY: int32) {.inline, exportc: "wp_image_description_info_v1_send_target_primaries".} =
  ## Sends an target_primaries event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *r_x*: Red x * 1M
  ## * *r_y*: Red y * 1M
  ## * *g_x*: Green x * 1M
  ## * *g_y*: Green y * 1M
  ## * *b_x*: Blue x * 1M
  ## * *b_y*: Blue y * 1M
  ## * *w_x*: White x * 1M
  ## * *w_y*: White y * 1M
  resource.post_event(WpImageDescriptionInfoV1Event_target_primaries.ord, rX, rY, gX, gY, bX, bY, wX, wY)

proc wpImageDescriptionInfoV1SendTargetLuminance*(resource: ptr Resource; minLum: uint32; maxLum: uint32) {.inline, exportc: "wp_image_description_info_v1_send_target_luminance".} =
  ## Sends an target_luminance event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *min_lum*: min L (cd/m²) * 10000
  ## * *max_lum*: max L (cd/m²)
  resource.post_event(WpImageDescriptionInfoV1Event_target_luminance.ord, minLum, maxLum)

proc wpImageDescriptionInfoV1SendTargetMaxCll*(resource: ptr Resource; maxCll: uint32) {.inline, exportc: "wp_image_description_info_v1_send_target_max_cll".} =
  ## Sends an target_max_cll event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *max_cll*: Maximum content light-level (cd/m²)
  resource.post_event(WpImageDescriptionInfoV1Event_target_max_cll.ord, maxCll)

proc wpImageDescriptionInfoV1SendTargetMaxFall*(resource: ptr Resource; maxFall: uint32) {.inline, exportc: "wp_image_description_info_v1_send_target_max_fall".} =
  ## Sends an target_max_fall event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *max_fall*: Maximum frame-average light level (cd/m²)
  resource.post_event(WpImageDescriptionInfoV1Event_target_max_fall.ord, maxFall)

