# Generated by wayland-nim-scanner 1.23.1
import wayland/native/client
import wayland/native/common
import code
export code

## The presentation_time CLIENT protocol
## #####################################
## 
## Interfaces
## ==========
## 
## * wp_presentation
## * wp_presentation_feedback
## 
## Copyright
## =========
## 
## Copyright Â© 2013-2014 Collabora, Ltd.
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type WpPresentationListener* = object
  clockId*: proc(
    data: pointer;
    wpPresentation: ptr WpPresentation;
    clkId: uint32;
  ) {.nimcall.}
proc addListener*(wpPresentation: ptr WpPresentation; listener: ptr WpPresentationListener; data: pointer): int {.inline.} =
  cast[ptr Proxy](wpPresentation).add_listener(listener, data)

proc setUserData*(wpPresentation: ptr WpPresentation; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpPresentation).set_user_data(user_data)
proc getUserData*(wpPresentation: ptr WpPresentation): pointer {.inline.} =
  cast[ptr Proxy](wpPresentation).get_user_data()
proc getVersion*(wpPresentation: ptr WpPresentation): uint32 {.inline.} =
  cast[ptr Proxy](wpPresentation).get_version()
proc destroy*(wpPresentation: ptr WpPresentation) {.inline.} =
  ## unbind from the presentation interface
  ## 
  ## Informs the server that the client will no longer be using
  ## this protocol object. Existing objects created by this object
  ## are not affected.
  ## 
  cast[ptr Proxy](wpPresentation).marshal_flags(WpPresentationRequest_destroy.ord, nil, cast[ptr Proxy](wpPresentation).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc feedback*(wpPresentation: ptr WpPresentation; surface: ptr Surface): ptr WpPresentationFeedback {.inline.} =
  ## request presentation feedback information
  ## 
  ## Request presentation feedback for the current content submission
  ## on the given surface. This creates a new presentation_feedback
  ## object, which will deliver the feedback information once. If
  ## multiple presentation_feedback objects are created for the same
  ## submission, they will all deliver the same information.
  ## 
  ## For details on what information is returned, see the
  ## presentation_feedback interface.
  ## 
  cast[ptr WpPresentationFeedback](cast[ptr Proxy](wpPresentation).marshal_flags(WpPresentationRequest_feedback.ord, addr wp_presentation_feedback_interface, cast[ptr Proxy](wpPresentation).get_version(), 0, surface, nil))
type WpPresentationFeedbackListener* = object
  syncOutput*: proc(
    data: pointer;
    wpPresentationFeedback: ptr WpPresentationFeedback;
    output: ptr Output;
  ) {.nimcall.}
  presented*: proc(
    data: pointer;
    wpPresentationFeedback: ptr WpPresentationFeedback;
    tvSecHi: uint32;
    tvSecLo: uint32;
    tvNsec: uint32;
    refresh: uint32;
    seqHi: uint32;
    seqLo: uint32;
    flags: uint32;
  ) {.nimcall.}
  discarded*: proc(
    data: pointer;
    wpPresentationFeedback: ptr WpPresentationFeedback;
  ) {.nimcall.}
proc addListener*(wpPresentationFeedback: ptr WpPresentationFeedback; listener: ptr WpPresentationFeedbackListener; data: pointer): int {.inline.} =
  cast[ptr Proxy](wpPresentationFeedback).add_listener(listener, data)

proc setUserData*(wpPresentationFeedback: ptr WpPresentationFeedback; userData: pointer) {.inline.} =
  cast[ptr Proxy](wpPresentationFeedback).set_user_data(user_data)
proc getUserData*(wpPresentationFeedback: ptr WpPresentationFeedback): pointer {.inline.} =
  cast[ptr Proxy](wpPresentationFeedback).get_user_data()
proc getVersion*(wpPresentationFeedback: ptr WpPresentationFeedback): uint32 {.inline.} =
  cast[ptr Proxy](wpPresentationFeedback).get_version()
proc destroy*(wpPresentationFeedback: ptr WpPresentationFeedback) {.inline.} =
  destroy cast[ptr Proxy](wpPresentationFeedback)
