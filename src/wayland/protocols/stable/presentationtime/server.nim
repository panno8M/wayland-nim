# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import code
export code

## The presentation_time SERVER protocol
## #####################################
## 
## Interfaces
## ==========
## 
## * wp_presentation
## * wp_presentation_feedback
## 
## Copyright
## =========
## 
## Copyright Â© 2013-2014 Collabora, Ltd.
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type WpPresentationInterface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  feedback*: proc(
    client: ptr Client;
    resource: ptr Resource;
    surface: ptr Resource;
    callback: uint32;
  ) {.nimcall.}

proc wpPresentationSendClockId*(resource: ptr Resource; clkId: uint32) {.inline, exportc: "wp_presentation_send_clock_id".} =
  ## Sends an clock_id event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *clk_id*: platform clock identifier
  resource.post_event(WpPresentationEvent_clock_id.ord, clkId)

proc wpPresentationFeedbackSendSyncOutput*(resource: ptr Resource; output: ptr Resource) {.inline, exportc: "wp_presentation_feedback_send_sync_output".} =
  ## Sends an sync_output event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *output*: presentation output
  resource.post_event(WpPresentationFeedbackEvent_sync_output.ord, output)

proc wpPresentationFeedbackSendPresented*(resource: ptr Resource; tvSecHi: uint32; tvSecLo: uint32; tvNsec: uint32; refresh: uint32; seqHi: uint32; seqLo: uint32; flags: uint32) {.inline, exportc: "wp_presentation_feedback_send_presented".} =
  ## Sends an presented event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *tv_sec_hi*: high 32 bits of the seconds part of the presentation timestamp
  ## * *tv_sec_lo*: low 32 bits of the seconds part of the presentation timestamp
  ## * *tv_nsec*: nanoseconds part of the presentation timestamp
  ## * *refresh*: nanoseconds till next refresh
  ## * *seq_hi*: high 32 bits of refresh counter
  ## * *seq_lo*: low 32 bits of refresh counter
  ## * *flags*: combination of 'kind' values
  resource.post_event(WpPresentationFeedbackEvent_presented.ord, tvSecHi, tvSecLo, tvNsec, refresh, seqHi, seqLo, flags)

proc wpPresentationFeedbackSendDiscarded*(resource: ptr Resource) {.inline, exportc: "wp_presentation_feedback_send_discarded".} =
  ## Sends an discarded event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(WpPresentationFeedbackEvent_discarded.ord)

