# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The tablet_v2 CLIENT protocol
## #############################
## 
## Interfaces
## ==========
## 
## * zwp_tablet_manager_v2
## * zwp_tablet_seat_v2
## * zwp_tablet_tool_v2
## * zwp_tablet_v2
## * zwp_tablet_pad_ring_v2
## * zwp_tablet_pad_strip_v2
## * zwp_tablet_pad_group_v2
## * zwp_tablet_pad_v2
## * zwp_tablet_pad_dial_v2
## 
## Copyright
## =========
## 
## Copyright 2014 © Stephen "Lyude" Chandler Paul
## Copyright 2015-2024 © Red Hat, Inc.
## 
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation files
## (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software,
## and to permit persons to whom the Software is furnished to do so,
## subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the
## next paragraph) shall be included in all copies or substantial
## portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
## NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
## BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
## ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
## CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
## 

proc setUserData*(zwpTabletManagerV2: ptr ZwpTabletManagerV2; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTabletManagerV2).set_user_data(user_data)
proc getUserData*(zwpTabletManagerV2: ptr ZwpTabletManagerV2): pointer {.inline.} =
  cast[ptr Proxy](zwpTabletManagerV2).get_user_data()
proc getVersion*(zwpTabletManagerV2: ptr ZwpTabletManagerV2): uint32 {.inline.} =
  cast[ptr Proxy](zwpTabletManagerV2).get_version()
proc getTabletSeat*(zwpTabletManagerV2: ptr ZwpTabletManagerV2; seat: ptr Seat): ptr ZwpTabletSeatV2 {.inline.} =
  ## get the tablet seat
  ## 
  ## Get the wp_tablet_seat object for the given seat. This object
  ## 	provides access to all graphics tablets in this seat.
  ## 
  cast[ptr ZwpTabletSeatV2](cast[ptr Proxy](zwpTabletManagerV2).marshal_flags(ZwpTabletManagerV2Request_get_tablet_seat.ord, addr zwp_tablet_seat_v2_interface, cast[ptr Proxy](zwpTabletManagerV2).get_version(), 0, nil, seat))
proc destroy*(zwpTabletManagerV2: ptr ZwpTabletManagerV2) {.inline.} =
  ## release the memory for the tablet manager object
  ## 
  ## Destroy the wp_tablet_manager object. Objects created from this
  ## 	object are unaffected and should be destroyed separately.
  ## 
  cast[ptr Proxy](zwpTabletManagerV2).marshal_flags(ZwpTabletManagerV2Request_destroy.ord, nil, cast[ptr Proxy](zwpTabletManagerV2).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ZwpTabletSeatV2Listener* = object
  tabletAdded*: proc(
    data: pointer;
    zwpTabletSeatV2: ptr ZwpTabletSeatV2;
    id: ptr ZwpTabletV2;
  ) {.nimcall.}
  toolAdded*: proc(
    data: pointer;
    zwpTabletSeatV2: ptr ZwpTabletSeatV2;
    id: ptr ZwpTabletToolV2;
  ) {.nimcall.}
  padAdded*: proc(
    data: pointer;
    zwpTabletSeatV2: ptr ZwpTabletSeatV2;
    id: ptr ZwpTabletPadV2;
  ) {.nimcall.}
proc addListener*(zwpTabletSeatV2: ptr ZwpTabletSeatV2; listener: ptr ZwpTabletSeatV2Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpTabletSeatV2).add_listener(listener, data)

proc setUserData*(zwpTabletSeatV2: ptr ZwpTabletSeatV2; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTabletSeatV2).set_user_data(user_data)
proc getUserData*(zwpTabletSeatV2: ptr ZwpTabletSeatV2): pointer {.inline.} =
  cast[ptr Proxy](zwpTabletSeatV2).get_user_data()
proc getVersion*(zwpTabletSeatV2: ptr ZwpTabletSeatV2): uint32 {.inline.} =
  cast[ptr Proxy](zwpTabletSeatV2).get_version()
proc destroy*(zwpTabletSeatV2: ptr ZwpTabletSeatV2) {.inline.} =
  ## release the memory for the tablet seat object
  ## 
  ## Destroy the wp_tablet_seat object. Objects created from this
  ## 	object are unaffected and should be destroyed separately.
  ## 
  cast[ptr Proxy](zwpTabletSeatV2).marshal_flags(ZwpTabletSeatV2Request_destroy.ord, nil, cast[ptr Proxy](zwpTabletSeatV2).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ZwpTabletToolV2Listener* = object
  `type`*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
    toolType: uint32;
  ) {.nimcall.}
  hardwareSerial*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
    hardwareSerialHi: uint32;
    hardwareSerialLo: uint32;
  ) {.nimcall.}
  hardwareIdWacom*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
    hardwareIdHi: uint32;
    hardwareIdLo: uint32;
  ) {.nimcall.}
  capability*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
    capability: uint32;
  ) {.nimcall.}
  done*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
  ) {.nimcall.}
  removed*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
  ) {.nimcall.}
  proximityIn*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
    serial: uint32;
    tablet: ptr ZwpTabletV2;
    surface: ptr Surface;
  ) {.nimcall.}
  proximityOut*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
  ) {.nimcall.}
  down*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
    serial: uint32;
  ) {.nimcall.}
  up*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
  ) {.nimcall.}
  motion*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
    x: Fixed;
    y: Fixed;
  ) {.nimcall.}
  pressure*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
    pressure: uint32;
  ) {.nimcall.}
  distance*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
    distance: uint32;
  ) {.nimcall.}
  tilt*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
    tiltX: Fixed;
    tiltY: Fixed;
  ) {.nimcall.}
  rotation*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
    degrees: Fixed;
  ) {.nimcall.}
  slider*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
    position: int32;
  ) {.nimcall.}
  wheel*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
    degrees: Fixed;
    clicks: int32;
  ) {.nimcall.}
  button*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
    serial: uint32;
    button: uint32;
    state: uint32;
  ) {.nimcall.}
  frame*: proc(
    data: pointer;
    zwpTabletToolV2: ptr ZwpTabletToolV2;
    time: uint32;
  ) {.nimcall.}
proc addListener*(zwpTabletToolV2: ptr ZwpTabletToolV2; listener: ptr ZwpTabletToolV2Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpTabletToolV2).add_listener(listener, data)

proc setUserData*(zwpTabletToolV2: ptr ZwpTabletToolV2; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTabletToolV2).set_user_data(user_data)
proc getUserData*(zwpTabletToolV2: ptr ZwpTabletToolV2): pointer {.inline.} =
  cast[ptr Proxy](zwpTabletToolV2).get_user_data()
proc getVersion*(zwpTabletToolV2: ptr ZwpTabletToolV2): uint32 {.inline.} =
  cast[ptr Proxy](zwpTabletToolV2).get_version()
proc setCursor*(zwpTabletToolV2: ptr ZwpTabletToolV2; serial: uint32; surface: ptr Surface; hotspotX: int32; hotspotY: int32) {.inline.} =
  ## set the tablet tool's surface
  ## 
  ## Sets the surface of the cursor used for this tool on the given
  ## 	tablet. This request only takes effect if the tool is in proximity
  ## 	of one of the requesting client's surfaces or the surface parameter
  ## 	is the current pointer surface. If there was a previous surface set
  ## 	with this request it is replaced. If surface is NULL, the cursor
  ## 	image is hidden.
  ## 
  ## 	The parameters hotspot_x and hotspot_y define the position of the
  ## 	pointer surface relative to the pointer location. Its top-left corner
  ## 	is always at (x, y) - (hotspot_x, hotspot_y), where (x, y) are the
  ## 	coordinates of the pointer location, in surface-local coordinates.
  ## 
  ## 	On surface.attach requests to the pointer surface, hotspot_x and
  ## 	hotspot_y are decremented by the x and y parameters passed to the
  ## 	request. Attach must be confirmed by wl_surface.commit as usual.
  ## 
  ## 	The hotspot can also be updated by passing the currently set pointer
  ## 	surface to this request with new values for hotspot_x and hotspot_y.
  ## 
  ## 	The current and pending input regions of the wl_surface are cleared,
  ## 	and wl_surface.set_input_region is ignored until the wl_surface is no
  ## 	longer used as the cursor. When the use as a cursor ends, the current
  ## 	and pending input regions become undefined, and the wl_surface is
  ## 	unmapped.
  ## 
  ## 	This request gives the surface the role of a wp_tablet_tool cursor. A
  ## 	surface may only ever be used as the cursor surface for one
  ## 	wp_tablet_tool. If the surface already has another role or has
  ## 	previously been used as cursor surface for a different tool, a
  ## 	protocol error is raised.
  ## 
  cast[ptr Proxy](zwpTabletToolV2).marshal_flags(ZwpTabletToolV2Request_set_cursor.ord, nil, cast[ptr Proxy](zwpTabletToolV2).get_version(), 0, serial, surface, hotspotX, hotspotY)
proc destroy*(zwpTabletToolV2: ptr ZwpTabletToolV2) {.inline.} =
  ## destroy the tool object
  ## 
  ## This destroys the client's resource for this tool object.
  ## 
  cast[ptr Proxy](zwpTabletToolV2).marshal_flags(ZwpTabletToolV2Request_destroy.ord, nil, cast[ptr Proxy](zwpTabletToolV2).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ZwpTabletV2Listener* = object
  name*: proc(
    data: pointer;
    zwpTabletV2: ptr ZwpTabletV2;
    name: cstring;
  ) {.nimcall.}
  id*: proc(
    data: pointer;
    zwpTabletV2: ptr ZwpTabletV2;
    vid: uint32;
    pid: uint32;
  ) {.nimcall.}
  path*: proc(
    data: pointer;
    zwpTabletV2: ptr ZwpTabletV2;
    path: cstring;
  ) {.nimcall.}
  done*: proc(
    data: pointer;
    zwpTabletV2: ptr ZwpTabletV2;
  ) {.nimcall.}
  removed*: proc(
    data: pointer;
    zwpTabletV2: ptr ZwpTabletV2;
  ) {.nimcall.}
  bustype*: proc(
    data: pointer;
    zwpTabletV2: ptr ZwpTabletV2;
    bustype: uint32;
  ) {.nimcall.}
proc addListener*(zwpTabletV2: ptr ZwpTabletV2; listener: ptr ZwpTabletV2Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpTabletV2).add_listener(listener, data)

proc setUserData*(zwpTabletV2: ptr ZwpTabletV2; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTabletV2).set_user_data(user_data)
proc getUserData*(zwpTabletV2: ptr ZwpTabletV2): pointer {.inline.} =
  cast[ptr Proxy](zwpTabletV2).get_user_data()
proc getVersion*(zwpTabletV2: ptr ZwpTabletV2): uint32 {.inline.} =
  cast[ptr Proxy](zwpTabletV2).get_version()
proc destroy*(zwpTabletV2: ptr ZwpTabletV2) {.inline.} =
  ## destroy the tablet object
  ## 
  ## This destroys the client's resource for this tablet object.
  ## 
  cast[ptr Proxy](zwpTabletV2).marshal_flags(ZwpTabletV2Request_destroy.ord, nil, cast[ptr Proxy](zwpTabletV2).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ZwpTabletPadRingV2Listener* = object
  source*: proc(
    data: pointer;
    zwpTabletPadRingV2: ptr ZwpTabletPadRingV2;
    source: uint32;
  ) {.nimcall.}
  angle*: proc(
    data: pointer;
    zwpTabletPadRingV2: ptr ZwpTabletPadRingV2;
    degrees: Fixed;
  ) {.nimcall.}
  stop*: proc(
    data: pointer;
    zwpTabletPadRingV2: ptr ZwpTabletPadRingV2;
  ) {.nimcall.}
  frame*: proc(
    data: pointer;
    zwpTabletPadRingV2: ptr ZwpTabletPadRingV2;
    time: uint32;
  ) {.nimcall.}
proc addListener*(zwpTabletPadRingV2: ptr ZwpTabletPadRingV2; listener: ptr ZwpTabletPadRingV2Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpTabletPadRingV2).add_listener(listener, data)

proc setUserData*(zwpTabletPadRingV2: ptr ZwpTabletPadRingV2; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTabletPadRingV2).set_user_data(user_data)
proc getUserData*(zwpTabletPadRingV2: ptr ZwpTabletPadRingV2): pointer {.inline.} =
  cast[ptr Proxy](zwpTabletPadRingV2).get_user_data()
proc getVersion*(zwpTabletPadRingV2: ptr ZwpTabletPadRingV2): uint32 {.inline.} =
  cast[ptr Proxy](zwpTabletPadRingV2).get_version()
proc setFeedback*(zwpTabletPadRingV2: ptr ZwpTabletPadRingV2; description: cstring; serial: uint32) {.inline.} =
  ## set compositor feedback
  ## 
  ## Request that the compositor use the provided feedback string
  ## 	associated with this ring. This request should be issued immediately
  ## 	after a wp_tablet_pad_group.mode_switch event from the corresponding
  ## 	group is received, or whenever the ring is mapped to a different
  ## 	action. See wp_tablet_pad_group.mode_switch for more details.
  ## 
  ## 	Clients are encouraged to provide context-aware descriptions for
  ## 	the actions associated with the ring; compositors may use this
  ## 	information to offer visual feedback about the button layout
  ## 	(eg. on-screen displays).
  ## 
  ## 	The provided string 'description' is a UTF-8 encoded string to be
  ## 	associated with this ring, and is considered user-visible; general
  ## 	internationalization rules apply.
  ## 
  ## 	The serial argument will be that of the last
  ## 	wp_tablet_pad_group.mode_switch event received for the group of this
  ## 	ring. Requests providing other serials than the most recent one will be
  ## 	ignored.
  ## 
  cast[ptr Proxy](zwpTabletPadRingV2).marshal_flags(ZwpTabletPadRingV2Request_set_feedback.ord, nil, cast[ptr Proxy](zwpTabletPadRingV2).get_version(), 0, description, serial)
proc destroy*(zwpTabletPadRingV2: ptr ZwpTabletPadRingV2) {.inline.} =
  ## destroy the ring object
  ## 
  ## This destroys the client's resource for this ring object.
  ## 
  cast[ptr Proxy](zwpTabletPadRingV2).marshal_flags(ZwpTabletPadRingV2Request_destroy.ord, nil, cast[ptr Proxy](zwpTabletPadRingV2).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ZwpTabletPadStripV2Listener* = object
  source*: proc(
    data: pointer;
    zwpTabletPadStripV2: ptr ZwpTabletPadStripV2;
    source: uint32;
  ) {.nimcall.}
  position*: proc(
    data: pointer;
    zwpTabletPadStripV2: ptr ZwpTabletPadStripV2;
    position: uint32;
  ) {.nimcall.}
  stop*: proc(
    data: pointer;
    zwpTabletPadStripV2: ptr ZwpTabletPadStripV2;
  ) {.nimcall.}
  frame*: proc(
    data: pointer;
    zwpTabletPadStripV2: ptr ZwpTabletPadStripV2;
    time: uint32;
  ) {.nimcall.}
proc addListener*(zwpTabletPadStripV2: ptr ZwpTabletPadStripV2; listener: ptr ZwpTabletPadStripV2Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpTabletPadStripV2).add_listener(listener, data)

proc setUserData*(zwpTabletPadStripV2: ptr ZwpTabletPadStripV2; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTabletPadStripV2).set_user_data(user_data)
proc getUserData*(zwpTabletPadStripV2: ptr ZwpTabletPadStripV2): pointer {.inline.} =
  cast[ptr Proxy](zwpTabletPadStripV2).get_user_data()
proc getVersion*(zwpTabletPadStripV2: ptr ZwpTabletPadStripV2): uint32 {.inline.} =
  cast[ptr Proxy](zwpTabletPadStripV2).get_version()
proc setFeedback*(zwpTabletPadStripV2: ptr ZwpTabletPadStripV2; description: cstring; serial: uint32) {.inline.} =
  ## set compositor feedback
  ## 
  ## Requests the compositor to use the provided feedback string
  ## 	associated with this strip. This request should be issued immediately
  ## 	after a wp_tablet_pad_group.mode_switch event from the corresponding
  ## 	group is received, or whenever the strip is mapped to a different
  ## 	action. See wp_tablet_pad_group.mode_switch for more details.
  ## 
  ## 	Clients are encouraged to provide context-aware descriptions for
  ## 	the actions associated with the strip, and compositors may use this
  ## 	information to offer visual feedback about the button layout
  ## 	(eg. on-screen displays).
  ## 
  ## 	The provided string 'description' is a UTF-8 encoded string to be
  ## 	associated with this ring, and is considered user-visible; general
  ## 	internationalization rules apply.
  ## 
  ## 	The serial argument will be that of the last
  ## 	wp_tablet_pad_group.mode_switch event received for the group of this
  ## 	strip. Requests providing other serials than the most recent one will be
  ## 	ignored.
  ## 
  cast[ptr Proxy](zwpTabletPadStripV2).marshal_flags(ZwpTabletPadStripV2Request_set_feedback.ord, nil, cast[ptr Proxy](zwpTabletPadStripV2).get_version(), 0, description, serial)
proc destroy*(zwpTabletPadStripV2: ptr ZwpTabletPadStripV2) {.inline.} =
  ## destroy the strip object
  ## 
  ## This destroys the client's resource for this strip object.
  ## 
  cast[ptr Proxy](zwpTabletPadStripV2).marshal_flags(ZwpTabletPadStripV2Request_destroy.ord, nil, cast[ptr Proxy](zwpTabletPadStripV2).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ZwpTabletPadGroupV2Listener* = object
  buttons*: proc(
    data: pointer;
    zwpTabletPadGroupV2: ptr ZwpTabletPadGroupV2;
    buttons: ptr Array;
  ) {.nimcall.}
  ring*: proc(
    data: pointer;
    zwpTabletPadGroupV2: ptr ZwpTabletPadGroupV2;
    ring: ptr ZwpTabletPadRingV2;
  ) {.nimcall.}
  strip*: proc(
    data: pointer;
    zwpTabletPadGroupV2: ptr ZwpTabletPadGroupV2;
    strip: ptr ZwpTabletPadStripV2;
  ) {.nimcall.}
  modes*: proc(
    data: pointer;
    zwpTabletPadGroupV2: ptr ZwpTabletPadGroupV2;
    modes: uint32;
  ) {.nimcall.}
  done*: proc(
    data: pointer;
    zwpTabletPadGroupV2: ptr ZwpTabletPadGroupV2;
  ) {.nimcall.}
  modeSwitch*: proc(
    data: pointer;
    zwpTabletPadGroupV2: ptr ZwpTabletPadGroupV2;
    time: uint32;
    serial: uint32;
    mode: uint32;
  ) {.nimcall.}
  dial*: proc(
    data: pointer;
    zwpTabletPadGroupV2: ptr ZwpTabletPadGroupV2;
    dial: ptr ZwpTabletPadDialV2;
  ) {.nimcall.}
proc addListener*(zwpTabletPadGroupV2: ptr ZwpTabletPadGroupV2; listener: ptr ZwpTabletPadGroupV2Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpTabletPadGroupV2).add_listener(listener, data)

proc setUserData*(zwpTabletPadGroupV2: ptr ZwpTabletPadGroupV2; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTabletPadGroupV2).set_user_data(user_data)
proc getUserData*(zwpTabletPadGroupV2: ptr ZwpTabletPadGroupV2): pointer {.inline.} =
  cast[ptr Proxy](zwpTabletPadGroupV2).get_user_data()
proc getVersion*(zwpTabletPadGroupV2: ptr ZwpTabletPadGroupV2): uint32 {.inline.} =
  cast[ptr Proxy](zwpTabletPadGroupV2).get_version()
proc destroy*(zwpTabletPadGroupV2: ptr ZwpTabletPadGroupV2) {.inline.} =
  ## destroy the pad object
  ## 
  ## Destroy the wp_tablet_pad_group object. Objects created from this object
  ## 	are unaffected and should be destroyed separately.
  ## 
  cast[ptr Proxy](zwpTabletPadGroupV2).marshal_flags(ZwpTabletPadGroupV2Request_destroy.ord, nil, cast[ptr Proxy](zwpTabletPadGroupV2).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ZwpTabletPadV2Listener* = object
  group*: proc(
    data: pointer;
    zwpTabletPadV2: ptr ZwpTabletPadV2;
    padGroup: ptr ZwpTabletPadGroupV2;
  ) {.nimcall.}
  path*: proc(
    data: pointer;
    zwpTabletPadV2: ptr ZwpTabletPadV2;
    path: cstring;
  ) {.nimcall.}
  buttons*: proc(
    data: pointer;
    zwpTabletPadV2: ptr ZwpTabletPadV2;
    buttons: uint32;
  ) {.nimcall.}
  done*: proc(
    data: pointer;
    zwpTabletPadV2: ptr ZwpTabletPadV2;
  ) {.nimcall.}
  button*: proc(
    data: pointer;
    zwpTabletPadV2: ptr ZwpTabletPadV2;
    time: uint32;
    button: uint32;
    state: uint32;
  ) {.nimcall.}
  enter*: proc(
    data: pointer;
    zwpTabletPadV2: ptr ZwpTabletPadV2;
    serial: uint32;
    tablet: ptr ZwpTabletV2;
    surface: ptr Surface;
  ) {.nimcall.}
  leave*: proc(
    data: pointer;
    zwpTabletPadV2: ptr ZwpTabletPadV2;
    serial: uint32;
    surface: ptr Surface;
  ) {.nimcall.}
  removed*: proc(
    data: pointer;
    zwpTabletPadV2: ptr ZwpTabletPadV2;
  ) {.nimcall.}
proc addListener*(zwpTabletPadV2: ptr ZwpTabletPadV2; listener: ptr ZwpTabletPadV2Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpTabletPadV2).add_listener(listener, data)

proc setUserData*(zwpTabletPadV2: ptr ZwpTabletPadV2; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTabletPadV2).set_user_data(user_data)
proc getUserData*(zwpTabletPadV2: ptr ZwpTabletPadV2): pointer {.inline.} =
  cast[ptr Proxy](zwpTabletPadV2).get_user_data()
proc getVersion*(zwpTabletPadV2: ptr ZwpTabletPadV2): uint32 {.inline.} =
  cast[ptr Proxy](zwpTabletPadV2).get_version()
proc setFeedback*(zwpTabletPadV2: ptr ZwpTabletPadV2; button: uint32; description: cstring; serial: uint32) {.inline.} =
  ## set compositor feedback
  ## 
  ## Requests the compositor to use the provided feedback string
  ## 	associated with this button. This request should be issued immediately
  ## 	after a wp_tablet_pad_group.mode_switch event from the corresponding
  ## 	group is received, or whenever a button is mapped to a different
  ## 	action. See wp_tablet_pad_group.mode_switch for more details.
  ## 
  ## 	Clients are encouraged to provide context-aware descriptions for
  ## 	the actions associated with each button, and compositors may use
  ## 	this information to offer visual feedback on the button layout
  ## 	(e.g. on-screen displays).
  ## 
  ## 	Button indices start at 0. Setting the feedback string on a button
  ## 	that is reserved by the compositor (i.e. not belonging to any
  ## 	wp_tablet_pad_group) does not generate an error but the compositor
  ## 	is free to ignore the request.
  ## 
  ## 	The provided string 'description' is a UTF-8 encoded string to be
  ## 	associated with this ring, and is considered user-visible; general
  ## 	internationalization rules apply.
  ## 
  ## 	The serial argument will be that of the last
  ## 	wp_tablet_pad_group.mode_switch event received for the group of this
  ## 	button. Requests providing other serials than the most recent one will
  ## 	be ignored.
  ## 
  cast[ptr Proxy](zwpTabletPadV2).marshal_flags(ZwpTabletPadV2Request_set_feedback.ord, nil, cast[ptr Proxy](zwpTabletPadV2).get_version(), 0, button, description, serial)
proc destroy*(zwpTabletPadV2: ptr ZwpTabletPadV2) {.inline.} =
  ## destroy the pad object
  ## 
  ## Destroy the wp_tablet_pad object. Objects created from this object
  ## 	are unaffected and should be destroyed separately.
  ## 
  cast[ptr Proxy](zwpTabletPadV2).marshal_flags(ZwpTabletPadV2Request_destroy.ord, nil, cast[ptr Proxy](zwpTabletPadV2).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ZwpTabletPadDialV2Listener* = object
  delta*: proc(
    data: pointer;
    zwpTabletPadDialV2: ptr ZwpTabletPadDialV2;
    value120: int32;
  ) {.nimcall.}
  frame*: proc(
    data: pointer;
    zwpTabletPadDialV2: ptr ZwpTabletPadDialV2;
    time: uint32;
  ) {.nimcall.}
proc addListener*(zwpTabletPadDialV2: ptr ZwpTabletPadDialV2; listener: ptr ZwpTabletPadDialV2Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpTabletPadDialV2).add_listener(listener, data)

proc setUserData*(zwpTabletPadDialV2: ptr ZwpTabletPadDialV2; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTabletPadDialV2).set_user_data(user_data)
proc getUserData*(zwpTabletPadDialV2: ptr ZwpTabletPadDialV2): pointer {.inline.} =
  cast[ptr Proxy](zwpTabletPadDialV2).get_user_data()
proc getVersion*(zwpTabletPadDialV2: ptr ZwpTabletPadDialV2): uint32 {.inline.} =
  cast[ptr Proxy](zwpTabletPadDialV2).get_version()
proc setFeedback*(zwpTabletPadDialV2: ptr ZwpTabletPadDialV2; description: cstring; serial: uint32) {.inline.} =
  ## set compositor feedback
  ## 
  ## Requests the compositor to use the provided feedback string
  ## 	associated with this dial. This request should be issued immediately
  ## 	after a wp_tablet_pad_group.mode_switch event from the corresponding
  ## 	group is received, or whenever the dial is mapped to a different
  ## 	action. See wp_tablet_pad_group.mode_switch for more details.
  ## 
  ## 	Clients are encouraged to provide context-aware descriptions for
  ## 	the actions associated with the dial, and compositors may use this
  ## 	information to offer visual feedback about the button layout
  ## 	(eg. on-screen displays).
  ## 
  ## 	The provided string 'description' is a UTF-8 encoded string to be
  ## 	associated with this ring, and is considered user-visible; general
  ## 	internationalization rules apply.
  ## 
  ## 	The serial argument will be that of the last
  ## 	wp_tablet_pad_group.mode_switch event received for the group of this
  ## 	dial. Requests providing other serials than the most recent one will be
  ## 	ignored.
  ## 
  cast[ptr Proxy](zwpTabletPadDialV2).marshal_flags(ZwpTabletPadDialV2Request_set_feedback.ord, nil, cast[ptr Proxy](zwpTabletPadDialV2).get_version(), 0, description, serial)
proc destroy*(zwpTabletPadDialV2: ptr ZwpTabletPadDialV2) {.inline.} =
  ## destroy the dial object
  ## 
  ## This destroys the client's resource for this dial object.
  ## 
  cast[ptr Proxy](zwpTabletPadDialV2).marshal_flags(ZwpTabletPadDialV2Request_destroy.ord, nil, cast[ptr Proxy](zwpTabletPadDialV2).get_version(), WL_MARSHAL_FLAG_DESTROY)
