# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The wp_primary_selection_unstable_v1 CLIENT protocol
## ####################################################
## 
## Interfaces
## ==========
## 
## * zwp_primary_selection_device_manager_v1
## * zwp_primary_selection_device_v1
## * zwp_primary_selection_offer_v1
## * zwp_primary_selection_source_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2015, 2016 Red Hat
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(zwpPrimarySelectionDeviceManagerV1: ptr ZwpPrimarySelectionDeviceManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpPrimarySelectionDeviceManagerV1).set_user_data(user_data)
proc getUserData*(zwpPrimarySelectionDeviceManagerV1: ptr ZwpPrimarySelectionDeviceManagerV1): pointer {.inline.} =
  cast[ptr Proxy](zwpPrimarySelectionDeviceManagerV1).get_user_data()
proc getVersion*(zwpPrimarySelectionDeviceManagerV1: ptr ZwpPrimarySelectionDeviceManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpPrimarySelectionDeviceManagerV1).get_version()
proc createSource*(zwpPrimarySelectionDeviceManagerV1: ptr ZwpPrimarySelectionDeviceManagerV1): ptr ZwpPrimarySelectionSourceV1 {.inline.} =
  ## create a new primary selection source
  ## 
  ## Create a new primary selection source.
  ## 
  cast[ptr ZwpPrimarySelectionSourceV1](cast[ptr Proxy](zwpPrimarySelectionDeviceManagerV1).marshal_flags(ZwpPrimarySelectionDeviceManagerV1Request_create_source.ord, addr zwp_primary_selection_source_v1_interface, cast[ptr Proxy](zwpPrimarySelectionDeviceManagerV1).get_version(), 0, nil))
proc getDevice*(zwpPrimarySelectionDeviceManagerV1: ptr ZwpPrimarySelectionDeviceManagerV1; seat: ptr Seat): ptr ZwpPrimarySelectionDeviceV1 {.inline.} =
  ## create a new primary selection device
  ## 
  ## Create a new data device for a given seat.
  ## 
  cast[ptr ZwpPrimarySelectionDeviceV1](cast[ptr Proxy](zwpPrimarySelectionDeviceManagerV1).marshal_flags(ZwpPrimarySelectionDeviceManagerV1Request_get_device.ord, addr zwp_primary_selection_device_v1_interface, cast[ptr Proxy](zwpPrimarySelectionDeviceManagerV1).get_version(), 0, nil, seat))
proc destroy*(zwpPrimarySelectionDeviceManagerV1: ptr ZwpPrimarySelectionDeviceManagerV1) {.inline.} =
  ## destroy the primary selection device manager
  ## 
  ## Destroy the primary selection device manager.
  ## 
  cast[ptr Proxy](zwpPrimarySelectionDeviceManagerV1).marshal_flags(ZwpPrimarySelectionDeviceManagerV1Request_destroy.ord, nil, cast[ptr Proxy](zwpPrimarySelectionDeviceManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ZwpPrimarySelectionDeviceV1Listener* = object
  dataOffer*: proc(
    data: pointer;
    zwpPrimarySelectionDeviceV1: ptr ZwpPrimarySelectionDeviceV1;
    offer: ptr ZwpPrimarySelectionOfferV1;
  ) {.nimcall.}
  selection*: proc(
    data: pointer;
    zwpPrimarySelectionDeviceV1: ptr ZwpPrimarySelectionDeviceV1;
    id: ptr ZwpPrimarySelectionOfferV1;
  ) {.nimcall.}
proc addListener*(zwpPrimarySelectionDeviceV1: ptr ZwpPrimarySelectionDeviceV1; listener: ptr ZwpPrimarySelectionDeviceV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpPrimarySelectionDeviceV1).add_listener(listener, data)

proc setUserData*(zwpPrimarySelectionDeviceV1: ptr ZwpPrimarySelectionDeviceV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpPrimarySelectionDeviceV1).set_user_data(user_data)
proc getUserData*(zwpPrimarySelectionDeviceV1: ptr ZwpPrimarySelectionDeviceV1): pointer {.inline.} =
  cast[ptr Proxy](zwpPrimarySelectionDeviceV1).get_user_data()
proc getVersion*(zwpPrimarySelectionDeviceV1: ptr ZwpPrimarySelectionDeviceV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpPrimarySelectionDeviceV1).get_version()
proc setSelection*(zwpPrimarySelectionDeviceV1: ptr ZwpPrimarySelectionDeviceV1; source: ptr ZwpPrimarySelectionSourceV1; serial: uint32) {.inline.} =
  ## set the primary selection
  ## 
  ## Replaces the current selection. The previous owner of the primary
  ## selection will receive a wp_primary_selection_source.cancelled event.
  ## 
  ## To unset the selection, set the source to NULL.
  ## 
  cast[ptr Proxy](zwpPrimarySelectionDeviceV1).marshal_flags(ZwpPrimarySelectionDeviceV1Request_set_selection.ord, nil, cast[ptr Proxy](zwpPrimarySelectionDeviceV1).get_version(), 0, source, serial)
proc destroy*(zwpPrimarySelectionDeviceV1: ptr ZwpPrimarySelectionDeviceV1) {.inline.} =
  ## destroy the primary selection device
  ## 
  ## Destroy the primary selection device.
  ## 
  cast[ptr Proxy](zwpPrimarySelectionDeviceV1).marshal_flags(ZwpPrimarySelectionDeviceV1Request_destroy.ord, nil, cast[ptr Proxy](zwpPrimarySelectionDeviceV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ZwpPrimarySelectionOfferV1Listener* = object
  offer*: proc(
    data: pointer;
    zwpPrimarySelectionOfferV1: ptr ZwpPrimarySelectionOfferV1;
    mimeType: cstring;
  ) {.nimcall.}
proc addListener*(zwpPrimarySelectionOfferV1: ptr ZwpPrimarySelectionOfferV1; listener: ptr ZwpPrimarySelectionOfferV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpPrimarySelectionOfferV1).add_listener(listener, data)

proc setUserData*(zwpPrimarySelectionOfferV1: ptr ZwpPrimarySelectionOfferV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpPrimarySelectionOfferV1).set_user_data(user_data)
proc getUserData*(zwpPrimarySelectionOfferV1: ptr ZwpPrimarySelectionOfferV1): pointer {.inline.} =
  cast[ptr Proxy](zwpPrimarySelectionOfferV1).get_user_data()
proc getVersion*(zwpPrimarySelectionOfferV1: ptr ZwpPrimarySelectionOfferV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpPrimarySelectionOfferV1).get_version()
proc receive*(zwpPrimarySelectionOfferV1: ptr ZwpPrimarySelectionOfferV1; mimeType: cstring; fd: int32) {.inline.} =
  ## request that the data is transferred
  ## 
  ## To transfer the contents of the primary selection clipboard, the client
  ## issues this request and indicates the mime type that it wants to
  ## receive. The transfer happens through the passed file descriptor
  ## (typically created with the pipe system call). The source client writes
  ## the data in the mime type representation requested and then closes the
  ## file descriptor.
  ## 
  ## The receiving client reads from the read end of the pipe until EOF and
  ## closes its end, at which point the transfer is complete.
  ## 
  cast[ptr Proxy](zwpPrimarySelectionOfferV1).marshal_flags(ZwpPrimarySelectionOfferV1Request_receive.ord, nil, cast[ptr Proxy](zwpPrimarySelectionOfferV1).get_version(), 0, mimeType, fd)
proc destroy*(zwpPrimarySelectionOfferV1: ptr ZwpPrimarySelectionOfferV1) {.inline.} =
  ## destroy the primary selection offer
  ## 
  ## Destroy the primary selection offer.
  ## 
  cast[ptr Proxy](zwpPrimarySelectionOfferV1).marshal_flags(ZwpPrimarySelectionOfferV1Request_destroy.ord, nil, cast[ptr Proxy](zwpPrimarySelectionOfferV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ZwpPrimarySelectionSourceV1Listener* = object
  send*: proc(
    data: pointer;
    zwpPrimarySelectionSourceV1: ptr ZwpPrimarySelectionSourceV1;
    mimeType: cstring;
    fd: int32;
  ) {.nimcall.}
  cancelled*: proc(
    data: pointer;
    zwpPrimarySelectionSourceV1: ptr ZwpPrimarySelectionSourceV1;
  ) {.nimcall.}
proc addListener*(zwpPrimarySelectionSourceV1: ptr ZwpPrimarySelectionSourceV1; listener: ptr ZwpPrimarySelectionSourceV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpPrimarySelectionSourceV1).add_listener(listener, data)

proc setUserData*(zwpPrimarySelectionSourceV1: ptr ZwpPrimarySelectionSourceV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpPrimarySelectionSourceV1).set_user_data(user_data)
proc getUserData*(zwpPrimarySelectionSourceV1: ptr ZwpPrimarySelectionSourceV1): pointer {.inline.} =
  cast[ptr Proxy](zwpPrimarySelectionSourceV1).get_user_data()
proc getVersion*(zwpPrimarySelectionSourceV1: ptr ZwpPrimarySelectionSourceV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpPrimarySelectionSourceV1).get_version()
proc offer*(zwpPrimarySelectionSourceV1: ptr ZwpPrimarySelectionSourceV1; mimeType: cstring) {.inline.} =
  ## add an offered mime type
  ## 
  ## This request adds a mime type to the set of mime types advertised to
  ## targets. Can be called several times to offer multiple types.
  ## 
  cast[ptr Proxy](zwpPrimarySelectionSourceV1).marshal_flags(ZwpPrimarySelectionSourceV1Request_offer.ord, nil, cast[ptr Proxy](zwpPrimarySelectionSourceV1).get_version(), 0, mimeType)
proc destroy*(zwpPrimarySelectionSourceV1: ptr ZwpPrimarySelectionSourceV1) {.inline.} =
  ## destroy the primary selection source
  ## 
  ## Destroy the primary selection source.
  ## 
  cast[ptr Proxy](zwpPrimarySelectionSourceV1).marshal_flags(ZwpPrimarySelectionSourceV1Request_destroy.ord, nil, cast[ptr Proxy](zwpPrimarySelectionSourceV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
