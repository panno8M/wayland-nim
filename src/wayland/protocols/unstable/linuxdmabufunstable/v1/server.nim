# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import code
export code

## The linux_dmabuf_unstable_v1 SERVER protocol
## ############################################
## 
## Interfaces
## ==========
## 
## * zwp_linux_dmabuf_v1
## * zwp_linux_buffer_params_v1
## * zwp_linux_dmabuf_feedback_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2014, 2015 Collabora, Ltd.
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type ZwpLinuxDmabufV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  createParams*: proc(
    client: ptr Client;
    resource: ptr Resource;
    paramsId: uint32;
  ) {.nimcall.}
  getDefaultFeedback*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
  ) {.nimcall.}
  getSurfaceFeedback*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    surface: ptr Resource;
  ) {.nimcall.}

proc zwpLinuxDmabufV1SendFormat*(resource: ptr Resource; format: uint32) {.inline, exportc: "zwp_linux_dmabuf_v1_send_format".} =
  ## Sends an format event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *format*: DRM_FORMAT code
  resource.post_event(ZwpLinuxDmabufV1Event_format.ord, format)

proc zwpLinuxDmabufV1SendModifier*(resource: ptr Resource; format: uint32; modifierHi: uint32; modifierLo: uint32) {.inline, exportc: "zwp_linux_dmabuf_v1_send_modifier".} =
  ## Sends an modifier event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *format*: DRM_FORMAT code
  ## * *modifier_hi*: high 32 bits of layout modifier
  ## * *modifier_lo*: low 32 bits of layout modifier
  resource.post_event(ZwpLinuxDmabufV1Event_modifier.ord, format, modifierHi, modifierLo)

type ZwpLinuxBufferParamsV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  add*: proc(
    client: ptr Client;
    resource: ptr Resource;
    fd: int32;
    planeIdx: uint32;
    offset: uint32;
    stride: uint32;
    modifierHi: uint32;
    modifierLo: uint32;
  ) {.nimcall.}
  create*: proc(
    client: ptr Client;
    resource: ptr Resource;
    width: int32;
    height: int32;
    format: uint32;
    flags: uint32;
  ) {.nimcall.}
  createImmed*: proc(
    client: ptr Client;
    resource: ptr Resource;
    bufferId: uint32;
    width: int32;
    height: int32;
    format: uint32;
    flags: uint32;
  ) {.nimcall.}

proc zwpLinuxBufferParamsV1SendCreated*(resource: ptr Resource; buffer: ptr Resource) {.inline, exportc: "zwp_linux_buffer_params_v1_send_created".} =
  ## Sends an created event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *buffer*: the newly created wl_buffer
  resource.post_event(ZwpLinuxBufferParamsV1Event_created.ord, buffer)

proc zwpLinuxBufferParamsV1SendFailed*(resource: ptr Resource) {.inline, exportc: "zwp_linux_buffer_params_v1_send_failed".} =
  ## Sends an failed event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpLinuxBufferParamsV1Event_failed.ord)

type ZwpLinuxDmabufFeedbackV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc zwpLinuxDmabufFeedbackV1SendDone*(resource: ptr Resource) {.inline, exportc: "zwp_linux_dmabuf_feedback_v1_send_done".} =
  ## Sends an done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpLinuxDmabufFeedbackV1Event_done.ord)

proc zwpLinuxDmabufFeedbackV1SendFormatTable*(resource: ptr Resource; fd: int32; size: uint32) {.inline, exportc: "zwp_linux_dmabuf_feedback_v1_send_format_table".} =
  ## Sends an format_table event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *fd*: table file descriptor
  ## * *size*: table size, in bytes
  resource.post_event(ZwpLinuxDmabufFeedbackV1Event_format_table.ord, fd, size)

proc zwpLinuxDmabufFeedbackV1SendMainDevice*(resource: ptr Resource; device: ptr Array) {.inline, exportc: "zwp_linux_dmabuf_feedback_v1_send_main_device".} =
  ## Sends an main_device event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *device*: device dev_t value
  resource.post_event(ZwpLinuxDmabufFeedbackV1Event_main_device.ord, device)

proc zwpLinuxDmabufFeedbackV1SendTrancheDone*(resource: ptr Resource) {.inline, exportc: "zwp_linux_dmabuf_feedback_v1_send_tranche_done".} =
  ## Sends an tranche_done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpLinuxDmabufFeedbackV1Event_tranche_done.ord)

proc zwpLinuxDmabufFeedbackV1SendTrancheTargetDevice*(resource: ptr Resource; device: ptr Array) {.inline, exportc: "zwp_linux_dmabuf_feedback_v1_send_tranche_target_device".} =
  ## Sends an tranche_target_device event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *device*: device dev_t value
  resource.post_event(ZwpLinuxDmabufFeedbackV1Event_tranche_target_device.ord, device)

proc zwpLinuxDmabufFeedbackV1SendTrancheFormats*(resource: ptr Resource; indices: ptr Array) {.inline, exportc: "zwp_linux_dmabuf_feedback_v1_send_tranche_formats".} =
  ## Sends an tranche_formats event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *indices*: array of 16-bit indexes
  resource.post_event(ZwpLinuxDmabufFeedbackV1Event_tranche_formats.ord, indices)

proc zwpLinuxDmabufFeedbackV1SendTrancheFlags*(resource: ptr Resource; flags: uint32) {.inline, exportc: "zwp_linux_dmabuf_feedback_v1_send_tranche_flags".} =
  ## Sends an tranche_flags event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *flags*: tranche flags
  resource.post_event(ZwpLinuxDmabufFeedbackV1Event_tranche_flags.ord, flags)

