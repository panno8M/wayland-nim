# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The input_method_unstable_v1 CLIENT protocol
## ############################################
## 
## Interfaces
## ==========
## 
## * zwp_input_method_context_v1
## * zwp_input_method_v1
## * zwp_input_panel_v1
## * zwp_input_panel_surface_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2012, 2013 Intel Corporation
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type ZwpInputMethodContextV1Listener* = object
  surroundingText*: proc(
    data: pointer;
    zwpInputMethodContextV1: ptr ZwpInputMethodContextV1;
    text: cstring;
    cursor: uint32;
    anchor: uint32;
  ) {.nimcall.}
  reset*: proc(
    data: pointer;
    zwpInputMethodContextV1: ptr ZwpInputMethodContextV1;
  ) {.nimcall.}
  contentType*: proc(
    data: pointer;
    zwpInputMethodContextV1: ptr ZwpInputMethodContextV1;
    hint: uint32;
    purpose: uint32;
  ) {.nimcall.}
  invokeAction*: proc(
    data: pointer;
    zwpInputMethodContextV1: ptr ZwpInputMethodContextV1;
    button: uint32;
    index: uint32;
  ) {.nimcall.}
  commitState*: proc(
    data: pointer;
    zwpInputMethodContextV1: ptr ZwpInputMethodContextV1;
    serial: uint32;
  ) {.nimcall.}
  preferredLanguage*: proc(
    data: pointer;
    zwpInputMethodContextV1: ptr ZwpInputMethodContextV1;
    language: cstring;
  ) {.nimcall.}
proc addListener*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1; listener: ptr ZwpInputMethodContextV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpInputMethodContextV1).add_listener(listener, data)

proc setUserData*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpInputMethodContextV1).set_user_data(user_data)
proc getUserData*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1): pointer {.inline.} =
  cast[ptr Proxy](zwpInputMethodContextV1).get_user_data()
proc getVersion*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpInputMethodContextV1).get_version()
proc destroy*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1) {.inline.} =
  cast[ptr Proxy](zwpInputMethodContextV1).marshal_flags(ZwpInputMethodContextV1Request_destroy.ord, nil, cast[ptr Proxy](zwpInputMethodContextV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc commitString*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1; serial: uint32; text: cstring) {.inline.} =
  ## commit string
  ## 
  ## Send the commit string text for insertion to the application.
  ## 
  ## 	The text to commit could be either just a single character after a key
  ## 	press or the result of some composing (pre-edit). It could be also an
  ## 	empty text when some text should be removed (see
  ## 	delete_surrounding_text) or when the input cursor should be moved (see
  ## 	cursor_position).
  ## 
  ## 	Any previously set composing text will be removed.
  ## 
  cast[ptr Proxy](zwpInputMethodContextV1).marshal_flags(ZwpInputMethodContextV1Request_commit_string.ord, nil, cast[ptr Proxy](zwpInputMethodContextV1).get_version(), 0, serial, text)
proc preeditString*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1; serial: uint32; text: cstring; commit: cstring) {.inline.} =
  ## pre-edit string
  ## 
  ## Send the pre-edit string text to the application text input.
  ## 
  ## 	The commit text can be used to replace the pre-edit text on reset (for
  ## 	example on unfocus).
  ## 
  ## 	Previously sent preedit_style and preedit_cursor requests are also
  ## 	processed by the text_input.
  ## 
  cast[ptr Proxy](zwpInputMethodContextV1).marshal_flags(ZwpInputMethodContextV1Request_preedit_string.ord, nil, cast[ptr Proxy](zwpInputMethodContextV1).get_version(), 0, serial, text, commit)
proc preeditStyling*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1; index: uint32; length: uint32; style: uint32) {.inline.} =
  ## pre-edit styling
  ## 
  ## Set the styling information on composing text. The style is applied for
  ## 	length in bytes from index relative to the beginning of
  ## 	the composing text (as byte offset). Multiple styles can
  ## 	be applied to a composing text.
  ## 
  ## 	This request should be sent before sending a preedit_string request.
  ## 
  cast[ptr Proxy](zwpInputMethodContextV1).marshal_flags(ZwpInputMethodContextV1Request_preedit_styling.ord, nil, cast[ptr Proxy](zwpInputMethodContextV1).get_version(), 0, index, length, style)
proc preeditCursor*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1; index: int32) {.inline.} =
  ## pre-edit cursor
  ## 
  ## Set the cursor position inside the composing text (as byte offset)
  ## 	relative to the start of the composing text.
  ## 
  ## 	When index is negative no cursor should be displayed.
  ## 
  ## 	This request should be sent before sending a preedit_string request.
  ## 
  cast[ptr Proxy](zwpInputMethodContextV1).marshal_flags(ZwpInputMethodContextV1Request_preedit_cursor.ord, nil, cast[ptr Proxy](zwpInputMethodContextV1).get_version(), 0, index)
proc deleteSurroundingText*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1; index: int32; length: uint32) {.inline.} =
  ## delete text
  ## 
  ## Remove the surrounding text.
  ## 
  ## 	This request will be handled on the text_input side directly following
  ## 	a commit_string request.
  ## 
  cast[ptr Proxy](zwpInputMethodContextV1).marshal_flags(ZwpInputMethodContextV1Request_delete_surrounding_text.ord, nil, cast[ptr Proxy](zwpInputMethodContextV1).get_version(), 0, index, length)
proc cursorPosition*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1; index: int32; anchor: int32) {.inline.} =
  ## set cursor to a new position
  ## 
  ## Set the cursor and anchor to a new position. Index is the new cursor
  ## 	position in bytes (when >= 0 this is relative to the end of the inserted text,
  ## 	otherwise it is relative to the beginning of the inserted text). Anchor is
  ## 	the new anchor position in bytes (when >= 0 this is relative to the end of the
  ## 	inserted text, otherwise it is relative to the beginning of the inserted
  ## 	text). When there should be no selected text, anchor should be the same
  ## 	as index.
  ## 
  ## 	This request will be handled on the text_input side directly following
  ## 	a commit_string request.
  ## 
  cast[ptr Proxy](zwpInputMethodContextV1).marshal_flags(ZwpInputMethodContextV1Request_cursor_position.ord, nil, cast[ptr Proxy](zwpInputMethodContextV1).get_version(), 0, index, anchor)
proc modifiersMap*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1; map: ptr Array) {.inline.} =
  cast[ptr Proxy](zwpInputMethodContextV1).marshal_flags(ZwpInputMethodContextV1Request_modifiers_map.ord, nil, cast[ptr Proxy](zwpInputMethodContextV1).get_version(), 0, map)
proc keysym*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1; serial: uint32; time: uint32; sym: uint32; state: uint32; modifiers: uint32) {.inline.} =
  ## keysym
  ## 
  ## Notify when a key event was sent. Key events should not be used for
  ## 	normal text input operations, which should be done with commit_string,
  ## 	delete_surrounding_text, etc. The key event follows the wl_keyboard key
  ## 	event convention. Sym is an XKB keysym, state is a wl_keyboard key_state.
  ## 
  cast[ptr Proxy](zwpInputMethodContextV1).marshal_flags(ZwpInputMethodContextV1Request_keysym.ord, nil, cast[ptr Proxy](zwpInputMethodContextV1).get_version(), 0, serial, time, sym, state, modifiers)
proc grabKeyboard*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1): ptr Keyboard {.inline.} =
  ## grab hardware keyboard
  ## 
  ## Allow an input method to receive hardware keyboard input and process
  ## 	key events to generate text events (with pre-edit) over the wire. This
  ## 	allows input methods which compose multiple key events for inputting
  ## 	text like it is done for CJK languages.
  ## 
  cast[ptr Keyboard](cast[ptr Proxy](zwpInputMethodContextV1).marshal_flags(ZwpInputMethodContextV1Request_grab_keyboard.ord, addr wl_keyboard_interface, cast[ptr Proxy](zwpInputMethodContextV1).get_version(), 0, nil))
proc key*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1; serial: uint32; time: uint32; key: uint32; state: uint32) {.inline.} =
  ## forward key event
  ## 
  ## Forward a wl_keyboard::key event to the client that was not processed
  ## 	by the input method itself. Should be used when filtering key events
  ## 	with grab_keyboard.  The arguments should be the ones from the
  ## 	wl_keyboard::key event.
  ## 
  ## 	For generating custom key events use the keysym request instead.
  ## 
  cast[ptr Proxy](zwpInputMethodContextV1).marshal_flags(ZwpInputMethodContextV1Request_key.ord, nil, cast[ptr Proxy](zwpInputMethodContextV1).get_version(), 0, serial, time, key, state)
proc modifiers*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1; serial: uint32; modsDepressed: uint32; modsLatched: uint32; modsLocked: uint32; group: uint32) {.inline.} =
  ## forward modifiers event
  ## 
  ## Forward a wl_keyboard::modifiers event to the client that was not
  ## 	processed by the input method itself.  Should be used when filtering
  ## 	key events with grab_keyboard. The arguments should be the ones
  ## 	from the wl_keyboard::modifiers event.
  ## 
  cast[ptr Proxy](zwpInputMethodContextV1).marshal_flags(ZwpInputMethodContextV1Request_modifiers.ord, nil, cast[ptr Proxy](zwpInputMethodContextV1).get_version(), 0, serial, modsDepressed, modsLatched, modsLocked, group)
proc language*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1; serial: uint32; language: cstring) {.inline.} =
  cast[ptr Proxy](zwpInputMethodContextV1).marshal_flags(ZwpInputMethodContextV1Request_language.ord, nil, cast[ptr Proxy](zwpInputMethodContextV1).get_version(), 0, serial, language)
proc textDirection*(zwpInputMethodContextV1: ptr ZwpInputMethodContextV1; serial: uint32; direction: uint32) {.inline.} =
  cast[ptr Proxy](zwpInputMethodContextV1).marshal_flags(ZwpInputMethodContextV1Request_text_direction.ord, nil, cast[ptr Proxy](zwpInputMethodContextV1).get_version(), 0, serial, direction)
type ZwpInputMethodV1Listener* = object
  activate*: proc(
    data: pointer;
    zwpInputMethodV1: ptr ZwpInputMethodV1;
    id: ptr ZwpInputMethodContextV1;
  ) {.nimcall.}
  deactivate*: proc(
    data: pointer;
    zwpInputMethodV1: ptr ZwpInputMethodV1;
    context: ptr ZwpInputMethodContextV1;
  ) {.nimcall.}
proc addListener*(zwpInputMethodV1: ptr ZwpInputMethodV1; listener: ptr ZwpInputMethodV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpInputMethodV1).add_listener(listener, data)

proc setUserData*(zwpInputMethodV1: ptr ZwpInputMethodV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpInputMethodV1).set_user_data(user_data)
proc getUserData*(zwpInputMethodV1: ptr ZwpInputMethodV1): pointer {.inline.} =
  cast[ptr Proxy](zwpInputMethodV1).get_user_data()
proc getVersion*(zwpInputMethodV1: ptr ZwpInputMethodV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpInputMethodV1).get_version()
proc destroy*(zwpInputMethodV1: ptr ZwpInputMethodV1) {.inline.} =
  destroy cast[ptr Proxy](zwpInputMethodV1)
proc setUserData*(zwpInputPanelV1: ptr ZwpInputPanelV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpInputPanelV1).set_user_data(user_data)
proc getUserData*(zwpInputPanelV1: ptr ZwpInputPanelV1): pointer {.inline.} =
  cast[ptr Proxy](zwpInputPanelV1).get_user_data()
proc getVersion*(zwpInputPanelV1: ptr ZwpInputPanelV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpInputPanelV1).get_version()
proc destroy*(zwpInputPanelV1: ptr ZwpInputPanelV1) {.inline.} =
  destroy cast[ptr Proxy](zwpInputPanelV1)
proc getInputPanelSurface*(zwpInputPanelV1: ptr ZwpInputPanelV1; surface: ptr Surface): ptr ZwpInputPanelSurfaceV1 {.inline.} =
  cast[ptr ZwpInputPanelSurfaceV1](cast[ptr Proxy](zwpInputPanelV1).marshal_flags(ZwpInputPanelV1Request_get_input_panel_surface.ord, addr zwp_input_panel_surface_v1_interface, cast[ptr Proxy](zwpInputPanelV1).get_version(), 0, nil, surface))
proc setUserData*(zwpInputPanelSurfaceV1: ptr ZwpInputPanelSurfaceV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpInputPanelSurfaceV1).set_user_data(user_data)
proc getUserData*(zwpInputPanelSurfaceV1: ptr ZwpInputPanelSurfaceV1): pointer {.inline.} =
  cast[ptr Proxy](zwpInputPanelSurfaceV1).get_user_data()
proc getVersion*(zwpInputPanelSurfaceV1: ptr ZwpInputPanelSurfaceV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpInputPanelSurfaceV1).get_version()
proc destroy*(zwpInputPanelSurfaceV1: ptr ZwpInputPanelSurfaceV1) {.inline.} =
  destroy cast[ptr Proxy](zwpInputPanelSurfaceV1)
proc setToplevel*(zwpInputPanelSurfaceV1: ptr ZwpInputPanelSurfaceV1; output: ptr Output; position: uint32) {.inline.} =
  ## set the surface type as a keyboard
  ## 
  ## Set the input_panel_surface type to keyboard.
  ## 
  ## 	A keyboard surface is only shown when a text input is active.
  ## 
  cast[ptr Proxy](zwpInputPanelSurfaceV1).marshal_flags(ZwpInputPanelSurfaceV1Request_set_toplevel.ord, nil, cast[ptr Proxy](zwpInputPanelSurfaceV1).get_version(), 0, output, position)
proc setOverlayPanel*(zwpInputPanelSurfaceV1: ptr ZwpInputPanelSurfaceV1) {.inline.} =
  ## set the surface type as an overlay panel
  ## 
  ## Set the input_panel_surface to be an overlay panel.
  ## 
  ## 	This is shown near the input cursor above the application window when
  ## 	a text input is active.
  ## 
  cast[ptr Proxy](zwpInputPanelSurfaceV1).marshal_flags(ZwpInputPanelSurfaceV1Request_set_overlay_panel.ord, nil, cast[ptr Proxy](zwpInputPanelSurfaceV1).get_version(), 0)
