# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import code
export code

## The input_method_unstable_v1 SERVER protocol
## ############################################
## 
## Interfaces
## ==========
## 
## * zwp_input_method_context_v1
## * zwp_input_method_v1
## * zwp_input_panel_v1
## * zwp_input_panel_surface_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2012, 2013 Intel Corporation
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type ZwpInputMethodContextV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  commitString*: proc(
    client: ptr Client;
    resource: ptr Resource;
    serial: uint32;
    text: cstring;
  ) {.nimcall.}
  preeditString*: proc(
    client: ptr Client;
    resource: ptr Resource;
    serial: uint32;
    text: cstring;
    commit: cstring;
  ) {.nimcall.}
  preeditStyling*: proc(
    client: ptr Client;
    resource: ptr Resource;
    index: uint32;
    length: uint32;
    style: uint32;
  ) {.nimcall.}
  preeditCursor*: proc(
    client: ptr Client;
    resource: ptr Resource;
    index: int32;
  ) {.nimcall.}
  deleteSurroundingText*: proc(
    client: ptr Client;
    resource: ptr Resource;
    index: int32;
    length: uint32;
  ) {.nimcall.}
  cursorPosition*: proc(
    client: ptr Client;
    resource: ptr Resource;
    index: int32;
    anchor: int32;
  ) {.nimcall.}
  modifiersMap*: proc(
    client: ptr Client;
    resource: ptr Resource;
    map: ptr Array;
  ) {.nimcall.}
  keysym*: proc(
    client: ptr Client;
    resource: ptr Resource;
    serial: uint32;
    time: uint32;
    sym: uint32;
    state: uint32;
    modifiers: uint32;
  ) {.nimcall.}
  grabKeyboard*: proc(
    client: ptr Client;
    resource: ptr Resource;
    keyboard: uint32;
  ) {.nimcall.}
  key*: proc(
    client: ptr Client;
    resource: ptr Resource;
    serial: uint32;
    time: uint32;
    key: uint32;
    state: uint32;
  ) {.nimcall.}
  modifiers*: proc(
    client: ptr Client;
    resource: ptr Resource;
    serial: uint32;
    modsDepressed: uint32;
    modsLatched: uint32;
    modsLocked: uint32;
    group: uint32;
  ) {.nimcall.}
  language*: proc(
    client: ptr Client;
    resource: ptr Resource;
    serial: uint32;
    language: cstring;
  ) {.nimcall.}
  textDirection*: proc(
    client: ptr Client;
    resource: ptr Resource;
    serial: uint32;
    direction: uint32;
  ) {.nimcall.}

proc zwpInputMethodContextV1SendSurroundingText*(resource: ptr Resource; text: cstring; cursor: uint32; anchor: uint32) {.inline, exportc: "zwp_input_method_context_v1_send_surrounding_text".} =
  ## Sends an surrounding_text event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpInputMethodContextV1Event_surrounding_text.ord, text, cursor, anchor)

proc zwpInputMethodContextV1SendReset*(resource: ptr Resource) {.inline, exportc: "zwp_input_method_context_v1_send_reset".} =
  ## Sends an reset event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpInputMethodContextV1Event_reset.ord)

proc zwpInputMethodContextV1SendContentType*(resource: ptr Resource; hint: uint32; purpose: uint32) {.inline, exportc: "zwp_input_method_context_v1_send_content_type".} =
  ## Sends an content_type event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpInputMethodContextV1Event_content_type.ord, hint, purpose)

proc zwpInputMethodContextV1SendInvokeAction*(resource: ptr Resource; button: uint32; index: uint32) {.inline, exportc: "zwp_input_method_context_v1_send_invoke_action".} =
  ## Sends an invoke_action event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpInputMethodContextV1Event_invoke_action.ord, button, index)

proc zwpInputMethodContextV1SendCommitState*(resource: ptr Resource; serial: uint32) {.inline, exportc: "zwp_input_method_context_v1_send_commit_state".} =
  ## Sends an commit_state event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial of text input state
  resource.post_event(ZwpInputMethodContextV1Event_commit_state.ord, serial)

proc zwpInputMethodContextV1SendPreferredLanguage*(resource: ptr Resource; language: cstring) {.inline, exportc: "zwp_input_method_context_v1_send_preferred_language".} =
  ## Sends an preferred_language event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpInputMethodContextV1Event_preferred_language.ord, language)

proc zwpInputMethodV1SendActivate*(resource: ptr Resource; id: ptr Resource) {.inline, exportc: "zwp_input_method_v1_send_activate".} =
  ## Sends an activate event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpInputMethodV1Event_activate.ord, id)

proc zwpInputMethodV1SendDeactivate*(resource: ptr Resource; context: ptr Resource) {.inline, exportc: "zwp_input_method_v1_send_deactivate".} =
  ## Sends an deactivate event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpInputMethodV1Event_deactivate.ord, context)

type ZwpInputPanelV1Interface* = object
  getInputPanelSurface*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    surface: ptr Resource;
  ) {.nimcall.}

type ZwpInputPanelSurfaceV1Interface* = object
  setToplevel*: proc(
    client: ptr Client;
    resource: ptr Resource;
    output: ptr Resource;
    position: uint32;
  ) {.nimcall.}
  setOverlayPanel*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

