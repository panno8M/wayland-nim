# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import wayland/protocols/stable/xdgShell/client as xdgShell_client
import code
export code

## The xdg_decoration_unstable_v1 CLIENT protocol
## ##############################################
## 
## Interfaces
## ==========
## 
## * zxdg_decoration_manager_v1
## * zxdg_toplevel_decoration_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2018 Simon Ser
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(zxdgDecorationManagerV1: ptr ZxdgDecorationManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zxdgDecorationManagerV1).set_user_data(user_data)
proc getUserData*(zxdgDecorationManagerV1: ptr ZxdgDecorationManagerV1): pointer {.inline.} =
  cast[ptr Proxy](zxdgDecorationManagerV1).get_user_data()
proc getVersion*(zxdgDecorationManagerV1: ptr ZxdgDecorationManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](zxdgDecorationManagerV1).get_version()
proc destroy*(zxdgDecorationManagerV1: ptr ZxdgDecorationManagerV1) {.inline.} =
  ## destroy the decoration manager object
  ## 
  ## Destroy the decoration manager. This doesn't destroy objects created
  ## with the manager.
  ## 
  cast[ptr Proxy](zxdgDecorationManagerV1).marshal_flags(ZxdgDecorationManagerV1Request_destroy.ord, nil, cast[ptr Proxy](zxdgDecorationManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getToplevelDecoration*(zxdgDecorationManagerV1: ptr ZxdgDecorationManagerV1; toplevel: ptr XdgToplevel): ptr ZxdgToplevelDecorationV1 {.inline.} =
  ## create a new toplevel decoration object
  ## 
  ## Create a new decoration object associated with the given toplevel.
  ## 
  ## Creating an xdg_toplevel_decoration from an xdg_toplevel which has a
  ## buffer attached or committed is a client error, and any attempts by a
  ## client to attach or manipulate a buffer prior to the first
  ## xdg_toplevel_decoration.configure event must also be treated as
  ## errors.
  ## 
  cast[ptr ZxdgToplevelDecorationV1](cast[ptr Proxy](zxdgDecorationManagerV1).marshal_flags(ZxdgDecorationManagerV1Request_get_toplevel_decoration.ord, addr zxdg_toplevel_decoration_v1_interface, cast[ptr Proxy](zxdgDecorationManagerV1).get_version(), 0, nil, toplevel))
type ZxdgToplevelDecorationV1Listener* = object
  configure*: proc(
    data: pointer;
    zxdgToplevelDecorationV1: ptr ZxdgToplevelDecorationV1;
    mode: uint32;
  ) {.nimcall.}
proc addListener*(zxdgToplevelDecorationV1: ptr ZxdgToplevelDecorationV1; listener: ptr ZxdgToplevelDecorationV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zxdgToplevelDecorationV1).add_listener(listener, data)

proc setUserData*(zxdgToplevelDecorationV1: ptr ZxdgToplevelDecorationV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zxdgToplevelDecorationV1).set_user_data(user_data)
proc getUserData*(zxdgToplevelDecorationV1: ptr ZxdgToplevelDecorationV1): pointer {.inline.} =
  cast[ptr Proxy](zxdgToplevelDecorationV1).get_user_data()
proc getVersion*(zxdgToplevelDecorationV1: ptr ZxdgToplevelDecorationV1): uint32 {.inline.} =
  cast[ptr Proxy](zxdgToplevelDecorationV1).get_version()
proc destroy*(zxdgToplevelDecorationV1: ptr ZxdgToplevelDecorationV1) {.inline.} =
  ## destroy the decoration object
  ## 
  ## Switch back to a mode without any server-side decorations at the next
  ## commit.
  ## 
  cast[ptr Proxy](zxdgToplevelDecorationV1).marshal_flags(ZxdgToplevelDecorationV1Request_destroy.ord, nil, cast[ptr Proxy](zxdgToplevelDecorationV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setMode*(zxdgToplevelDecorationV1: ptr ZxdgToplevelDecorationV1; mode: uint32) {.inline.} =
  ## set the decoration mode
  ## 
  ## Set the toplevel surface decoration mode. This informs the compositor
  ## that the client prefers the provided decoration mode.
  ## 
  ## After requesting a decoration mode, the compositor will respond by
  ## emitting an xdg_surface.configure event. The client should then update
  ## its content, drawing it without decorations if the received mode is
  ## server-side decorations. The client must also acknowledge the configure
  ## when committing the new content (see xdg_surface.ack_configure).
  ## 
  ## The compositor can decide not to use the client's mode and enforce a
  ## different mode instead.
  ## 
  ## Clients whose decoration mode depend on the xdg_toplevel state may send
  ## a set_mode request in response to an xdg_surface.configure event and wait
  ## for the next xdg_surface.configure event to prevent unwanted state.
  ## Such clients are responsible for preventing configure loops and must
  ## make sure not to send multiple successive set_mode requests with the
  ## same decoration mode.
  ## 
  ## If an invalid mode is supplied by the client, the invalid_mode protocol
  ## error is raised by the compositor.
  ## 
  cast[ptr Proxy](zxdgToplevelDecorationV1).marshal_flags(ZxdgToplevelDecorationV1Request_set_mode.ord, nil, cast[ptr Proxy](zxdgToplevelDecorationV1).get_version(), 0, mode)
proc unsetMode*(zxdgToplevelDecorationV1: ptr ZxdgToplevelDecorationV1) {.inline.} =
  ## unset the decoration mode
  ## 
  ## Unset the toplevel surface decoration mode. This informs the compositor
  ## that the client doesn't prefer a particular decoration mode.
  ## 
  ## This request has the same semantics as set_mode.
  ## 
  cast[ptr Proxy](zxdgToplevelDecorationV1).marshal_flags(ZxdgToplevelDecorationV1Request_unset_mode.ord, nil, cast[ptr Proxy](zxdgToplevelDecorationV1).get_version(), 0)
