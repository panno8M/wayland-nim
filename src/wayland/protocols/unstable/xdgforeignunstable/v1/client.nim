# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The xdg_foreign_unstable_v1 CLIENT protocol
## ###########################################
## 
## Interfaces
## ==========
## 
## * zxdg_exporter_v1
## * zxdg_importer_v1
## * zxdg_exported_v1
## * zxdg_imported_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2015-2016 Red Hat Inc.
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(zxdgExporterV1: ptr ZxdgExporterV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zxdgExporterV1).set_user_data(user_data)
proc getUserData*(zxdgExporterV1: ptr ZxdgExporterV1): pointer {.inline.} =
  cast[ptr Proxy](zxdgExporterV1).get_user_data()
proc getVersion*(zxdgExporterV1: ptr ZxdgExporterV1): uint32 {.inline.} =
  cast[ptr Proxy](zxdgExporterV1).get_version()
proc destroy*(zxdgExporterV1: ptr ZxdgExporterV1) {.inline.} =
  ## destroy the xdg_exporter object
  ## 
  ## Notify the compositor that the xdg_exporter object will no longer be
  ## 	used.
  ## 
  cast[ptr Proxy](zxdgExporterV1).marshal_flags(ZxdgExporterV1Request_destroy.ord, nil, cast[ptr Proxy](zxdgExporterV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc `export`*(zxdgExporterV1: ptr ZxdgExporterV1; surface: ptr Surface): ptr ZxdgExportedV1 {.inline.} =
  ## export a surface
  ## 
  ## The export request exports the passed surface so that it can later be
  ## 	imported via xdg_importer. When called, a new xdg_exported object will
  ## 	be created and xdg_exported.handle will be sent immediately. See the
  ## 	corresponding interface and event for details.
  ## 
  ## 	A surface may be exported multiple times, and each exported handle may
  ## 	be used to create an xdg_imported multiple times. Only xdg_surface
  ## 	surfaces may be exported.
  ## 
  cast[ptr ZxdgExportedV1](cast[ptr Proxy](zxdgExporterV1).marshal_flags(ZxdgExporterV1Request_export.ord, addr zxdg_exported_v1_interface, cast[ptr Proxy](zxdgExporterV1).get_version(), 0, nil, surface))
proc setUserData*(zxdgImporterV1: ptr ZxdgImporterV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zxdgImporterV1).set_user_data(user_data)
proc getUserData*(zxdgImporterV1: ptr ZxdgImporterV1): pointer {.inline.} =
  cast[ptr Proxy](zxdgImporterV1).get_user_data()
proc getVersion*(zxdgImporterV1: ptr ZxdgImporterV1): uint32 {.inline.} =
  cast[ptr Proxy](zxdgImporterV1).get_version()
proc destroy*(zxdgImporterV1: ptr ZxdgImporterV1) {.inline.} =
  ## destroy the xdg_importer object
  ## 
  ## Notify the compositor that the xdg_importer object will no longer be
  ## 	used.
  ## 
  cast[ptr Proxy](zxdgImporterV1).marshal_flags(ZxdgImporterV1Request_destroy.ord, nil, cast[ptr Proxy](zxdgImporterV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc `import`*(zxdgImporterV1: ptr ZxdgImporterV1; handle: cstring): ptr ZxdgImportedV1 {.inline.} =
  ## import a surface
  ## 
  ## The import request imports a surface from any client given a handle
  ## 	retrieved by exporting said surface using xdg_exporter.export. When
  ## 	called, a new xdg_imported object will be created. This new object
  ## 	represents the imported surface, and the importing client can
  ## 	manipulate its relationship using it. See xdg_imported for details.
  ## 
  cast[ptr ZxdgImportedV1](cast[ptr Proxy](zxdgImporterV1).marshal_flags(ZxdgImporterV1Request_import.ord, addr zxdg_imported_v1_interface, cast[ptr Proxy](zxdgImporterV1).get_version(), 0, nil, handle))
type ZxdgExportedV1Listener* = object
  handle*: proc(
    data: pointer;
    zxdgExportedV1: ptr ZxdgExportedV1;
    handle: cstring;
  ) {.nimcall.}
proc addListener*(zxdgExportedV1: ptr ZxdgExportedV1; listener: ptr ZxdgExportedV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zxdgExportedV1).add_listener(listener, data)

proc setUserData*(zxdgExportedV1: ptr ZxdgExportedV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zxdgExportedV1).set_user_data(user_data)
proc getUserData*(zxdgExportedV1: ptr ZxdgExportedV1): pointer {.inline.} =
  cast[ptr Proxy](zxdgExportedV1).get_user_data()
proc getVersion*(zxdgExportedV1: ptr ZxdgExportedV1): uint32 {.inline.} =
  cast[ptr Proxy](zxdgExportedV1).get_version()
proc destroy*(zxdgExportedV1: ptr ZxdgExportedV1) {.inline.} =
  ## unexport the exported surface
  ## 
  ## Revoke the previously exported surface. This invalidates any
  ## 	relationship the importer may have set up using the xdg_imported created
  ## 	given the handle sent via xdg_exported.handle.
  ## 
  cast[ptr Proxy](zxdgExportedV1).marshal_flags(ZxdgExportedV1Request_destroy.ord, nil, cast[ptr Proxy](zxdgExportedV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ZxdgImportedV1Listener* = object
  destroyed*: proc(
    data: pointer;
    zxdgImportedV1: ptr ZxdgImportedV1;
  ) {.nimcall.}
proc addListener*(zxdgImportedV1: ptr ZxdgImportedV1; listener: ptr ZxdgImportedV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zxdgImportedV1).add_listener(listener, data)

proc setUserData*(zxdgImportedV1: ptr ZxdgImportedV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zxdgImportedV1).set_user_data(user_data)
proc getUserData*(zxdgImportedV1: ptr ZxdgImportedV1): pointer {.inline.} =
  cast[ptr Proxy](zxdgImportedV1).get_user_data()
proc getVersion*(zxdgImportedV1: ptr ZxdgImportedV1): uint32 {.inline.} =
  cast[ptr Proxy](zxdgImportedV1).get_version()
proc destroy*(zxdgImportedV1: ptr ZxdgImportedV1) {.inline.} =
  ## destroy the xdg_imported object
  ## 
  ## Notify the compositor that it will no longer use the xdg_imported
  ## 	object. Any relationship that may have been set up will at this point
  ## 	be invalidated.
  ## 
  cast[ptr Proxy](zxdgImportedV1).marshal_flags(ZxdgImportedV1Request_destroy.ord, nil, cast[ptr Proxy](zxdgImportedV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setParentOf*(zxdgImportedV1: ptr ZxdgImportedV1; surface: ptr Surface) {.inline.} =
  ## set as the parent of some surface
  ## 
  ## Set the imported surface as the parent of some surface of the client.
  ## 	The passed surface must be a toplevel xdg_surface. Calling this function
  ## 	sets up a surface to surface relation with the same stacking and positioning
  ## 	semantics as xdg_surface.set_parent.
  ## 
  cast[ptr Proxy](zxdgImportedV1).marshal_flags(ZxdgImportedV1Request_set_parent_of.ord, nil, cast[ptr Proxy](zxdgImportedV1).get_version(), 0, surface)
