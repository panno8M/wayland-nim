# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import code
export code

## The tablet_unstable_v1 SERVER protocol
## ######################################
## 
## Interfaces
## ==========
## 
## * zwp_tablet_manager_v1
## * zwp_tablet_seat_v1
## * zwp_tablet_tool_v1
## * zwp_tablet_v1
## 
## Copyright
## =========
## 
## Copyright 2014 © Stephen "Lyude" Chandler Paul
## Copyright 2015-2016 © Red Hat, Inc.
## 
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation files
## (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software,
## and to permit persons to whom the Software is furnished to do so,
## subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the
## next paragraph) shall be included in all copies or substantial
## portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
## NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
## BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
## ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
## CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
## 

type ZwpTabletManagerV1Interface* = object
  getTabletSeat*: proc(
    client: ptr Client;
    resource: ptr Resource;
    tabletSeat: uint32;
    seat: ptr Resource;
  ) {.nimcall.}
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

type ZwpTabletSeatV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc zwpTabletSeatV1SendTabletAdded*(resource: ptr Resource; id: ptr Resource) {.inline, exportc: "zwp_tablet_seat_v1_send_tablet_added".} =
  ## Sends an tablet_added event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *id*: the newly added graphics tablet
  resource.post_event(ZwpTabletSeatV1Event_tablet_added.ord, id)

proc zwpTabletSeatV1SendToolAdded*(resource: ptr Resource; id: ptr Resource) {.inline, exportc: "zwp_tablet_seat_v1_send_tool_added".} =
  ## Sends an tool_added event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *id*: the newly added tablet tool
  resource.post_event(ZwpTabletSeatV1Event_tool_added.ord, id)

type ZwpTabletToolV1Interface* = object
  setCursor*: proc(
    client: ptr Client;
    resource: ptr Resource;
    serial: uint32;
    surface: ptr Resource;
    hotspotX: int32;
    hotspotY: int32;
  ) {.nimcall.}
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc zwpTabletToolV1SendType*(resource: ptr Resource; toolType: uint32) {.inline, exportc: "zwp_tablet_tool_v1_send_type".} =
  ## Sends an type event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *tool_type*: the physical tool type
  resource.post_event(ZwpTabletToolV1Event_type.ord, toolType)

proc zwpTabletToolV1SendHardwareSerial*(resource: ptr Resource; hardwareSerialHi: uint32; hardwareSerialLo: uint32) {.inline, exportc: "zwp_tablet_tool_v1_send_hardware_serial".} =
  ## Sends an hardware_serial event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *hardware_serial_hi*: the unique serial number of the tool, most significant bits
  ## * *hardware_serial_lo*: the unique serial number of the tool, least significant bits
  resource.post_event(ZwpTabletToolV1Event_hardware_serial.ord, hardwareSerialHi, hardwareSerialLo)

proc zwpTabletToolV1SendHardwareIdWacom*(resource: ptr Resource; hardwareIdHi: uint32; hardwareIdLo: uint32) {.inline, exportc: "zwp_tablet_tool_v1_send_hardware_id_wacom".} =
  ## Sends an hardware_id_wacom event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *hardware_id_hi*: the hardware id, most significant bits
  ## * *hardware_id_lo*: the hardware id, least significant bits
  resource.post_event(ZwpTabletToolV1Event_hardware_id_wacom.ord, hardwareIdHi, hardwareIdLo)

proc zwpTabletToolV1SendCapability*(resource: ptr Resource; capability: uint32) {.inline, exportc: "zwp_tablet_tool_v1_send_capability".} =
  ## Sends an capability event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *capability*: the capability
  resource.post_event(ZwpTabletToolV1Event_capability.ord, capability)

proc zwpTabletToolV1SendDone*(resource: ptr Resource) {.inline, exportc: "zwp_tablet_tool_v1_send_done".} =
  ## Sends an done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTabletToolV1Event_done.ord)

proc zwpTabletToolV1SendRemoved*(resource: ptr Resource) {.inline, exportc: "zwp_tablet_tool_v1_send_removed".} =
  ## Sends an removed event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTabletToolV1Event_removed.ord)

proc zwpTabletToolV1SendProximityIn*(resource: ptr Resource; serial: uint32; tablet: ptr Resource; surface: ptr Resource) {.inline, exportc: "zwp_tablet_tool_v1_send_proximity_in".} =
  ## Sends an proximity_in event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *tablet*: The tablet the tool is in proximity of
  ## * *surface*: The current surface the tablet tool is over
  resource.post_event(ZwpTabletToolV1Event_proximity_in.ord, serial, tablet, surface)

proc zwpTabletToolV1SendProximityOut*(resource: ptr Resource) {.inline, exportc: "zwp_tablet_tool_v1_send_proximity_out".} =
  ## Sends an proximity_out event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTabletToolV1Event_proximity_out.ord)

proc zwpTabletToolV1SendDown*(resource: ptr Resource; serial: uint32) {.inline, exportc: "zwp_tablet_tool_v1_send_down".} =
  ## Sends an down event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTabletToolV1Event_down.ord, serial)

proc zwpTabletToolV1SendUp*(resource: ptr Resource) {.inline, exportc: "zwp_tablet_tool_v1_send_up".} =
  ## Sends an up event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTabletToolV1Event_up.ord)

proc zwpTabletToolV1SendMotion*(resource: ptr Resource; x: Fixed; y: Fixed) {.inline, exportc: "zwp_tablet_tool_v1_send_motion".} =
  ## Sends an motion event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *x*: surface-local x coordinate
  ## * *y*: surface-local y coordinate
  resource.post_event(ZwpTabletToolV1Event_motion.ord, x, y)

proc zwpTabletToolV1SendPressure*(resource: ptr Resource; pressure: uint32) {.inline, exportc: "zwp_tablet_tool_v1_send_pressure".} =
  ## Sends an pressure event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *pressure*: The current pressure value
  resource.post_event(ZwpTabletToolV1Event_pressure.ord, pressure)

proc zwpTabletToolV1SendDistance*(resource: ptr Resource; distance: uint32) {.inline, exportc: "zwp_tablet_tool_v1_send_distance".} =
  ## Sends an distance event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *distance*: The current distance value
  resource.post_event(ZwpTabletToolV1Event_distance.ord, distance)

proc zwpTabletToolV1SendTilt*(resource: ptr Resource; tiltX: int32; tiltY: int32) {.inline, exportc: "zwp_tablet_tool_v1_send_tilt".} =
  ## Sends an tilt event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *tilt_x*: The current value of the X tilt axis
  ## * *tilt_y*: The current value of the Y tilt axis
  resource.post_event(ZwpTabletToolV1Event_tilt.ord, tiltX, tiltY)

proc zwpTabletToolV1SendRotation*(resource: ptr Resource; degrees: int32) {.inline, exportc: "zwp_tablet_tool_v1_send_rotation".} =
  ## Sends an rotation event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *degrees*: The current rotation of the Z axis
  resource.post_event(ZwpTabletToolV1Event_rotation.ord, degrees)

proc zwpTabletToolV1SendSlider*(resource: ptr Resource; position: int32) {.inline, exportc: "zwp_tablet_tool_v1_send_slider".} =
  ## Sends an slider event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *position*: The current position of slider
  resource.post_event(ZwpTabletToolV1Event_slider.ord, position)

proc zwpTabletToolV1SendWheel*(resource: ptr Resource; degrees: int32; clicks: int32) {.inline, exportc: "zwp_tablet_tool_v1_send_wheel".} =
  ## Sends an wheel event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *degrees*: The wheel delta in 0.01 of a degree
  ## * *clicks*: The wheel delta in discrete clicks
  resource.post_event(ZwpTabletToolV1Event_wheel.ord, degrees, clicks)

proc zwpTabletToolV1SendButton*(resource: ptr Resource; serial: uint32; button: uint32; state: uint32) {.inline, exportc: "zwp_tablet_tool_v1_send_button".} =
  ## Sends an button event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *button*: The button whose state has changed
  ## * *state*: Whether the button was pressed or released
  resource.post_event(ZwpTabletToolV1Event_button.ord, serial, button, state)

proc zwpTabletToolV1SendFrame*(resource: ptr Resource; time: uint32) {.inline, exportc: "zwp_tablet_tool_v1_send_frame".} =
  ## Sends an frame event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: The time of the event with millisecond granularity
  resource.post_event(ZwpTabletToolV1Event_frame.ord, time)

type ZwpTabletV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc zwpTabletV1SendName*(resource: ptr Resource; name: cstring) {.inline, exportc: "zwp_tablet_v1_send_name".} =
  ## Sends an name event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *name*: the device name
  resource.post_event(ZwpTabletV1Event_name.ord, name)

proc zwpTabletV1SendId*(resource: ptr Resource; vid: uint32; pid: uint32) {.inline, exportc: "zwp_tablet_v1_send_id".} =
  ## Sends an id event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *vid*: USB vendor id
  ## * *pid*: USB product id
  resource.post_event(ZwpTabletV1Event_id.ord, vid, pid)

proc zwpTabletV1SendPath*(resource: ptr Resource; path: cstring) {.inline, exportc: "zwp_tablet_v1_send_path".} =
  ## Sends an path event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *path*: path to local device
  resource.post_event(ZwpTabletV1Event_path.ord, path)

proc zwpTabletV1SendDone*(resource: ptr Resource) {.inline, exportc: "zwp_tablet_v1_send_done".} =
  ## Sends an done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTabletV1Event_done.ord)

proc zwpTabletV1SendRemoved*(resource: ptr Resource) {.inline, exportc: "zwp_tablet_v1_send_removed".} =
  ## Sends an removed event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTabletV1Event_removed.ord)

