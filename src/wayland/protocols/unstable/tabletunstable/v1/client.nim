# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The tablet_unstable_v1 CLIENT protocol
## ######################################
## 
## Interfaces
## ==========
## 
## * zwp_tablet_manager_v1
## * zwp_tablet_seat_v1
## * zwp_tablet_tool_v1
## * zwp_tablet_v1
## 
## Copyright
## =========
## 
## Copyright 2014 © Stephen "Lyude" Chandler Paul
## Copyright 2015-2016 © Red Hat, Inc.
## 
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation files
## (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software,
## and to permit persons to whom the Software is furnished to do so,
## subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the
## next paragraph) shall be included in all copies or substantial
## portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
## NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
## BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
## ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
## CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
## 

proc setUserData*(zwpTabletManagerV1: ptr ZwpTabletManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTabletManagerV1).set_user_data(user_data)
proc getUserData*(zwpTabletManagerV1: ptr ZwpTabletManagerV1): pointer {.inline.} =
  cast[ptr Proxy](zwpTabletManagerV1).get_user_data()
proc getVersion*(zwpTabletManagerV1: ptr ZwpTabletManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpTabletManagerV1).get_version()
proc getTabletSeat*(zwpTabletManagerV1: ptr ZwpTabletManagerV1; seat: ptr Seat): ptr ZwpTabletSeatV1 {.inline.} =
  ## get the tablet seat
  ## 
  ## Get the wp_tablet_seat object for the given seat. This object
  ## 	provides access to all graphics tablets in this seat.
  ## 
  cast[ptr ZwpTabletSeatV1](cast[ptr Proxy](zwpTabletManagerV1).marshal_flags(ZwpTabletManagerV1Request_get_tablet_seat.ord, addr zwp_tablet_seat_v1_interface, cast[ptr Proxy](zwpTabletManagerV1).get_version(), 0, nil, seat))
proc destroy*(zwpTabletManagerV1: ptr ZwpTabletManagerV1) {.inline.} =
  ## release the memory for the tablet manager object
  ## 
  ## Destroy the wp_tablet_manager object. Objects created from this
  ## 	object are unaffected and should be destroyed separately.
  ## 
  cast[ptr Proxy](zwpTabletManagerV1).marshal_flags(ZwpTabletManagerV1Request_destroy.ord, nil, cast[ptr Proxy](zwpTabletManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ZwpTabletSeatV1Listener* = object
  tabletAdded*: proc(
    data: pointer;
    zwpTabletSeatV1: ptr ZwpTabletSeatV1;
    id: ptr ZwpTabletV1;
  ) {.nimcall.}
  toolAdded*: proc(
    data: pointer;
    zwpTabletSeatV1: ptr ZwpTabletSeatV1;
    id: ptr ZwpTabletToolV1;
  ) {.nimcall.}
proc addListener*(zwpTabletSeatV1: ptr ZwpTabletSeatV1; listener: ptr ZwpTabletSeatV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpTabletSeatV1).add_listener(listener, data)

proc setUserData*(zwpTabletSeatV1: ptr ZwpTabletSeatV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTabletSeatV1).set_user_data(user_data)
proc getUserData*(zwpTabletSeatV1: ptr ZwpTabletSeatV1): pointer {.inline.} =
  cast[ptr Proxy](zwpTabletSeatV1).get_user_data()
proc getVersion*(zwpTabletSeatV1: ptr ZwpTabletSeatV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpTabletSeatV1).get_version()
proc destroy*(zwpTabletSeatV1: ptr ZwpTabletSeatV1) {.inline.} =
  ## release the memory for the tablet seat object
  ## 
  ## Destroy the wp_tablet_seat object. Objects created from this
  ## 	object are unaffected and should be destroyed separately.
  ## 
  cast[ptr Proxy](zwpTabletSeatV1).marshal_flags(ZwpTabletSeatV1Request_destroy.ord, nil, cast[ptr Proxy](zwpTabletSeatV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ZwpTabletToolV1Listener* = object
  `type`*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
    toolType: uint32;
  ) {.nimcall.}
  hardwareSerial*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
    hardwareSerialHi: uint32;
    hardwareSerialLo: uint32;
  ) {.nimcall.}
  hardwareIdWacom*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
    hardwareIdHi: uint32;
    hardwareIdLo: uint32;
  ) {.nimcall.}
  capability*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
    capability: uint32;
  ) {.nimcall.}
  done*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
  ) {.nimcall.}
  removed*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
  ) {.nimcall.}
  proximityIn*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
    serial: uint32;
    tablet: ptr ZwpTabletV1;
    surface: ptr Surface;
  ) {.nimcall.}
  proximityOut*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
  ) {.nimcall.}
  down*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
    serial: uint32;
  ) {.nimcall.}
  up*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
  ) {.nimcall.}
  motion*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
    x: Fixed;
    y: Fixed;
  ) {.nimcall.}
  pressure*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
    pressure: uint32;
  ) {.nimcall.}
  distance*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
    distance: uint32;
  ) {.nimcall.}
  tilt*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
    tiltX: int32;
    tiltY: int32;
  ) {.nimcall.}
  rotation*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
    degrees: int32;
  ) {.nimcall.}
  slider*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
    position: int32;
  ) {.nimcall.}
  wheel*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
    degrees: int32;
    clicks: int32;
  ) {.nimcall.}
  button*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
    serial: uint32;
    button: uint32;
    state: uint32;
  ) {.nimcall.}
  frame*: proc(
    data: pointer;
    zwpTabletToolV1: ptr ZwpTabletToolV1;
    time: uint32;
  ) {.nimcall.}
proc addListener*(zwpTabletToolV1: ptr ZwpTabletToolV1; listener: ptr ZwpTabletToolV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpTabletToolV1).add_listener(listener, data)

proc setUserData*(zwpTabletToolV1: ptr ZwpTabletToolV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTabletToolV1).set_user_data(user_data)
proc getUserData*(zwpTabletToolV1: ptr ZwpTabletToolV1): pointer {.inline.} =
  cast[ptr Proxy](zwpTabletToolV1).get_user_data()
proc getVersion*(zwpTabletToolV1: ptr ZwpTabletToolV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpTabletToolV1).get_version()
proc setCursor*(zwpTabletToolV1: ptr ZwpTabletToolV1; serial: uint32; surface: ptr Surface; hotspotX: int32; hotspotY: int32) {.inline.} =
  ## set the tablet tool's surface
  ## 
  ## Sets the surface of the cursor used for this tool on the given
  ## 	tablet. This request only takes effect if the tool is in proximity
  ## 	of one of the requesting client's surfaces or the surface parameter
  ## 	is the current pointer surface. If there was a previous surface set
  ## 	with this request it is replaced. If surface is NULL, the cursor
  ## 	image is hidden.
  ## 
  ## 	The parameters hotspot_x and hotspot_y define the position of the
  ## 	pointer surface relative to the pointer location. Its top-left corner
  ## 	is always at (x, y) - (hotspot_x, hotspot_y), where (x, y) are the
  ## 	coordinates of the pointer location, in surface-local coordinates.
  ## 
  ## 	On surface.attach requests to the pointer surface, hotspot_x and
  ## 	hotspot_y are decremented by the x and y parameters passed to the
  ## 	request. Attach must be confirmed by wl_surface.commit as usual.
  ## 
  ## 	The hotspot can also be updated by passing the currently set pointer
  ## 	surface to this request with new values for hotspot_x and hotspot_y.
  ## 
  ## 	The current and pending input regions of the wl_surface are cleared,
  ## 	and wl_surface.set_input_region is ignored until the wl_surface is no
  ## 	longer used as the cursor. When the use as a cursor ends, the current
  ## 	and pending input regions become undefined, and the wl_surface is
  ## 	unmapped.
  ## 
  ## 	This request gives the surface the role of a cursor. The role
  ## 	assigned by this request is the same as assigned by
  ## 	wl_pointer.set_cursor meaning the same surface can be
  ## 	used both as a wl_pointer cursor and a wp_tablet cursor. If the
  ## 	surface already has another role, it raises a protocol error.
  ## 	The surface may be used on multiple tablets and across multiple
  ## 	seats.
  ## 
  cast[ptr Proxy](zwpTabletToolV1).marshal_flags(ZwpTabletToolV1Request_set_cursor.ord, nil, cast[ptr Proxy](zwpTabletToolV1).get_version(), 0, serial, surface, hotspotX, hotspotY)
proc destroy*(zwpTabletToolV1: ptr ZwpTabletToolV1) {.inline.} =
  ## destroy the tool object
  ## 
  ## This destroys the client's resource for this tool object.
  ## 
  cast[ptr Proxy](zwpTabletToolV1).marshal_flags(ZwpTabletToolV1Request_destroy.ord, nil, cast[ptr Proxy](zwpTabletToolV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
type ZwpTabletV1Listener* = object
  name*: proc(
    data: pointer;
    zwpTabletV1: ptr ZwpTabletV1;
    name: cstring;
  ) {.nimcall.}
  id*: proc(
    data: pointer;
    zwpTabletV1: ptr ZwpTabletV1;
    vid: uint32;
    pid: uint32;
  ) {.nimcall.}
  path*: proc(
    data: pointer;
    zwpTabletV1: ptr ZwpTabletV1;
    path: cstring;
  ) {.nimcall.}
  done*: proc(
    data: pointer;
    zwpTabletV1: ptr ZwpTabletV1;
  ) {.nimcall.}
  removed*: proc(
    data: pointer;
    zwpTabletV1: ptr ZwpTabletV1;
  ) {.nimcall.}
proc addListener*(zwpTabletV1: ptr ZwpTabletV1; listener: ptr ZwpTabletV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpTabletV1).add_listener(listener, data)

proc setUserData*(zwpTabletV1: ptr ZwpTabletV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTabletV1).set_user_data(user_data)
proc getUserData*(zwpTabletV1: ptr ZwpTabletV1): pointer {.inline.} =
  cast[ptr Proxy](zwpTabletV1).get_user_data()
proc getVersion*(zwpTabletV1: ptr ZwpTabletV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpTabletV1).get_version()
proc destroy*(zwpTabletV1: ptr ZwpTabletV1) {.inline.} =
  ## destroy the tablet object
  ## 
  ## This destroys the client's resource for this tablet object.
  ## 
  cast[ptr Proxy](zwpTabletV1).marshal_flags(ZwpTabletV1Request_destroy.ord, nil, cast[ptr Proxy](zwpTabletV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
