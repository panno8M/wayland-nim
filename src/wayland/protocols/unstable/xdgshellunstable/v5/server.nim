# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import code
export code

## The xdg_shell_unstable_v5 SERVER protocol
## #########################################
## 
## Interfaces
## ==========
## 
## * xdg_shell
## * xdg_surface
## * xdg_popup
## 
## Copyright
## =========
## 
## Copyright © 2008-2013 Kristian Høgsberg
## Copyright © 2013      Rafael Antognolli
## Copyright © 2013      Jasper St. Pierre
## Copyright © 2010-2013 Intel Corporation
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type XdgShellInterface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  useUnstableVersion*: proc(
    client: ptr Client;
    resource: ptr Resource;
    version: int32;
  ) {.nimcall.}
  getXdgSurface*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    surface: ptr Resource;
  ) {.nimcall.}
  getXdgPopup*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    surface: ptr Resource;
    parent: ptr Resource;
    seat: ptr Resource;
    serial: uint32;
    x: int32;
    y: int32;
  ) {.nimcall.}
  pong*: proc(
    client: ptr Client;
    resource: ptr Resource;
    serial: uint32;
  ) {.nimcall.}

proc xdgShellSendPing*(resource: ptr Resource; serial: uint32) {.inline, exportc: "xdg_shell_send_ping".} =
  ## Sends an ping event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: pass this to the pong request
  resource.post_event(XdgShellEvent_ping.ord, serial)

type XdgSurfaceInterface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  setParent*: proc(
    client: ptr Client;
    resource: ptr Resource;
    parent: ptr Resource;
  ) {.nimcall.}
  setTitle*: proc(
    client: ptr Client;
    resource: ptr Resource;
    title: cstring;
  ) {.nimcall.}
  setAppId*: proc(
    client: ptr Client;
    resource: ptr Resource;
    appId: cstring;
  ) {.nimcall.}
  showWindowMenu*: proc(
    client: ptr Client;
    resource: ptr Resource;
    seat: ptr Resource;
    serial: uint32;
    x: int32;
    y: int32;
  ) {.nimcall.}
  move*: proc(
    client: ptr Client;
    resource: ptr Resource;
    seat: ptr Resource;
    serial: uint32;
  ) {.nimcall.}
  resize*: proc(
    client: ptr Client;
    resource: ptr Resource;
    seat: ptr Resource;
    serial: uint32;
    edges: uint32;
  ) {.nimcall.}
  ackConfigure*: proc(
    client: ptr Client;
    resource: ptr Resource;
    serial: uint32;
  ) {.nimcall.}
  setWindowGeometry*: proc(
    client: ptr Client;
    resource: ptr Resource;
    x: int32;
    y: int32;
    width: int32;
    height: int32;
  ) {.nimcall.}
  setMaximized*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  unsetMaximized*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  setFullscreen*: proc(
    client: ptr Client;
    resource: ptr Resource;
    output: ptr Resource;
  ) {.nimcall.}
  unsetFullscreen*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  setMinimized*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc xdgSurfaceSendConfigure*(resource: ptr Resource; width: int32; height: int32; states: ptr Array; serial: uint32) {.inline, exportc: "xdg_surface_send_configure".} =
  ## Sends an configure event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(XdgSurfaceEvent_configure.ord, width, height, states, serial)

proc xdgSurfaceSendClose*(resource: ptr Resource) {.inline, exportc: "xdg_surface_send_close".} =
  ## Sends an close event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(XdgSurfaceEvent_close.ord)

type XdgPopupInterface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc xdgPopupSendPopupDone*(resource: ptr Resource) {.inline, exportc: "xdg_popup_send_popup_done".} =
  ## Sends an popup_done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(XdgPopupEvent_popup_done.ord)

