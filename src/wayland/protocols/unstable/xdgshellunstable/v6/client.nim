# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The xdg_shell_unstable_v6 CLIENT protocol
## #########################################
## 
## Interfaces
## ==========
## 
## * zxdg_shell_v6
## * zxdg_positioner_v6
## * zxdg_surface_v6
## * zxdg_toplevel_v6
## * zxdg_popup_v6
## 
## Copyright
## =========
## 
## Copyright © 2008-2013 Kristian Høgsberg
## Copyright © 2013      Rafael Antognolli
## Copyright © 2013      Jasper St. Pierre
## Copyright © 2010-2013 Intel Corporation
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type ZxdgShellV6Listener* = object
  ping*: proc(
    data: pointer;
    zxdgShellV6: ptr ZxdgShellV6;
    serial: uint32;
  ) {.nimcall.}
proc addListener*(zxdgShellV6: ptr ZxdgShellV6; listener: ptr ZxdgShellV6Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zxdgShellV6).add_listener(listener, data)

proc setUserData*(zxdgShellV6: ptr ZxdgShellV6; userData: pointer) {.inline.} =
  cast[ptr Proxy](zxdgShellV6).set_user_data(user_data)
proc getUserData*(zxdgShellV6: ptr ZxdgShellV6): pointer {.inline.} =
  cast[ptr Proxy](zxdgShellV6).get_user_data()
proc getVersion*(zxdgShellV6: ptr ZxdgShellV6): uint32 {.inline.} =
  cast[ptr Proxy](zxdgShellV6).get_version()
proc destroy*(zxdgShellV6: ptr ZxdgShellV6) {.inline.} =
  ## destroy xdg_shell
  ## 
  ## Destroy this xdg_shell object.
  ## 
  ## 	Destroying a bound xdg_shell object while there are surfaces
  ## 	still alive created by this xdg_shell object instance is illegal
  ## 	and will result in a protocol error.
  ## 
  cast[ptr Proxy](zxdgShellV6).marshal_flags(ZxdgShellV6Request_destroy.ord, nil, cast[ptr Proxy](zxdgShellV6).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc createPositioner*(zxdgShellV6: ptr ZxdgShellV6): ptr ZxdgPositionerV6 {.inline.} =
  ## create a positioner object
  ## 
  ## Create a positioner object. A positioner object is used to position
  ## 	surfaces relative to some parent surface. See the interface description
  ## 	and xdg_surface.get_popup for details.
  ## 
  cast[ptr ZxdgPositionerV6](cast[ptr Proxy](zxdgShellV6).marshal_flags(ZxdgShellV6Request_create_positioner.ord, addr zxdg_positioner_v6_interface, cast[ptr Proxy](zxdgShellV6).get_version(), 0, nil))
proc getXdgSurface*(zxdgShellV6: ptr ZxdgShellV6; surface: ptr Surface): ptr ZxdgSurfaceV6 {.inline.} =
  ## create a shell surface from a surface
  ## 
  ## This creates an xdg_surface for the given surface. While xdg_surface
  ## 	itself is not a role, the corresponding surface may only be assigned
  ## 	a role extending xdg_surface, such as xdg_toplevel or xdg_popup.
  ## 
  ## 	This creates an xdg_surface for the given surface. An xdg_surface is
  ## 	used as basis to define a role to a given surface, such as xdg_toplevel
  ## 	or xdg_popup. It also manages functionality shared between xdg_surface
  ## 	based surface roles.
  ## 
  ## 	See the documentation of xdg_surface for more details about what an
  ## 	xdg_surface is and how it is used.
  ## 
  cast[ptr ZxdgSurfaceV6](cast[ptr Proxy](zxdgShellV6).marshal_flags(ZxdgShellV6Request_get_xdg_surface.ord, addr zxdg_surface_v6_interface, cast[ptr Proxy](zxdgShellV6).get_version(), 0, nil, surface))
proc pong*(zxdgShellV6: ptr ZxdgShellV6; serial: uint32) {.inline.} =
  ## respond to a ping event
  ## 
  ## A client must respond to a ping event with a pong request or
  ## 	the client may be deemed unresponsive. See xdg_shell.ping.
  ## 
  cast[ptr Proxy](zxdgShellV6).marshal_flags(ZxdgShellV6Request_pong.ord, nil, cast[ptr Proxy](zxdgShellV6).get_version(), 0, serial)
proc setUserData*(zxdgPositionerV6: ptr ZxdgPositionerV6; userData: pointer) {.inline.} =
  cast[ptr Proxy](zxdgPositionerV6).set_user_data(user_data)
proc getUserData*(zxdgPositionerV6: ptr ZxdgPositionerV6): pointer {.inline.} =
  cast[ptr Proxy](zxdgPositionerV6).get_user_data()
proc getVersion*(zxdgPositionerV6: ptr ZxdgPositionerV6): uint32 {.inline.} =
  cast[ptr Proxy](zxdgPositionerV6).get_version()
proc destroy*(zxdgPositionerV6: ptr ZxdgPositionerV6) {.inline.} =
  ## destroy the xdg_positioner object
  ## 
  ## Notify the compositor that the xdg_positioner will no longer be used.
  ## 
  cast[ptr Proxy](zxdgPositionerV6).marshal_flags(ZxdgPositionerV6Request_destroy.ord, nil, cast[ptr Proxy](zxdgPositionerV6).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setSize*(zxdgPositionerV6: ptr ZxdgPositionerV6; width: int32; height: int32) {.inline.} =
  ## set the size of the to-be positioned rectangle
  ## 
  ## Set the size of the surface that is to be positioned with the positioner
  ## 	object. The size is in surface-local coordinates and corresponds to the
  ## 	window geometry. See xdg_surface.set_window_geometry.
  ## 
  ## 	If a zero or negative size is set the invalid_input error is raised.
  ## 
  cast[ptr Proxy](zxdgPositionerV6).marshal_flags(ZxdgPositionerV6Request_set_size.ord, nil, cast[ptr Proxy](zxdgPositionerV6).get_version(), 0, width, height)
proc setAnchorRect*(zxdgPositionerV6: ptr ZxdgPositionerV6; x: int32; y: int32; width: int32; height: int32) {.inline.} =
  ## set the anchor rectangle within the parent surface
  ## 
  ## Specify the anchor rectangle within the parent surface that the child
  ## 	surface will be placed relative to. The rectangle is relative to the
  ## 	window geometry as defined by xdg_surface.set_window_geometry of the
  ## 	parent surface. The rectangle must be at least 1x1 large.
  ## 
  ## 	When the xdg_positioner object is used to position a child surface, the
  ## 	anchor rectangle may not extend outside the window geometry of the
  ## 	positioned child's parent surface.
  ## 
  ## 	If a zero or negative size is set the invalid_input error is raised.
  ## 
  cast[ptr Proxy](zxdgPositionerV6).marshal_flags(ZxdgPositionerV6Request_set_anchor_rect.ord, nil, cast[ptr Proxy](zxdgPositionerV6).get_version(), 0, x, y, width, height)
proc setAnchor*(zxdgPositionerV6: ptr ZxdgPositionerV6; anchor: uint32) {.inline.} =
  ## set anchor rectangle anchor edges
  ## 
  ## Defines a set of edges for the anchor rectangle. These are used to
  ## 	derive an anchor point that the child surface will be positioned
  ## 	relative to. If two orthogonal edges are specified (e.g. 'top' and
  ## 	'left'), then the anchor point will be the intersection of the edges
  ## 	(e.g. the top left position of the rectangle); otherwise, the derived
  ## 	anchor point will be centered on the specified edge, or in the center of
  ## 	the anchor rectangle if no edge is specified.
  ## 
  ## 	If two parallel anchor edges are specified (e.g. 'left' and 'right'),
  ## 	the invalid_input error is raised.
  ## 
  cast[ptr Proxy](zxdgPositionerV6).marshal_flags(ZxdgPositionerV6Request_set_anchor.ord, nil, cast[ptr Proxy](zxdgPositionerV6).get_version(), 0, anchor)
proc setGravity*(zxdgPositionerV6: ptr ZxdgPositionerV6; gravity: uint32) {.inline.} =
  ## set child surface gravity
  ## 
  ## Defines in what direction a surface should be positioned, relative to
  ## 	the anchor point of the parent surface. If two orthogonal gravities are
  ## 	specified (e.g. 'bottom' and 'right'), then the child surface will be
  ## 	placed in the specified direction; otherwise, the child surface will be
  ## 	centered over the anchor point on any axis that had no gravity
  ## 	specified.
  ## 
  ## 	If two parallel gravities are specified (e.g. 'left' and 'right'), the
  ## 	invalid_input error is raised.
  ## 
  cast[ptr Proxy](zxdgPositionerV6).marshal_flags(ZxdgPositionerV6Request_set_gravity.ord, nil, cast[ptr Proxy](zxdgPositionerV6).get_version(), 0, gravity)
proc setConstraintAdjustment*(zxdgPositionerV6: ptr ZxdgPositionerV6; constraintAdjustment: uint32) {.inline.} =
  ## set the adjustment to be done when constrained
  ## 
  ## Specify how the window should be positioned if the originally intended
  ## 	position caused the surface to be constrained, meaning at least
  ## 	partially outside positioning boundaries set by the compositor. The
  ## 	adjustment is set by constructing a bitmask describing the adjustment to
  ## 	be made when the surface is constrained on that axis.
  ## 
  ## 	If no bit for one axis is set, the compositor will assume that the child
  ## 	surface should not change its position on that axis when constrained.
  ## 
  ## 	If more than one bit for one axis is set, the order of how adjustments
  ## 	are applied is specified in the corresponding adjustment descriptions.
  ## 
  ## 	The default adjustment is none.
  ## 
  cast[ptr Proxy](zxdgPositionerV6).marshal_flags(ZxdgPositionerV6Request_set_constraint_adjustment.ord, nil, cast[ptr Proxy](zxdgPositionerV6).get_version(), 0, constraintAdjustment)
proc setOffset*(zxdgPositionerV6: ptr ZxdgPositionerV6; x: int32; y: int32) {.inline.} =
  ## set surface position offset
  ## 
  ## Specify the surface position offset relative to the position of the
  ## 	anchor on the anchor rectangle and the anchor on the surface. For
  ## 	example if the anchor of the anchor rectangle is at (x, y), the surface
  ## 	has the gravity bottom|right, and the offset is (ox, oy), the calculated
  ## 	surface position will be (x + ox, y + oy). The offset position of the
  ## 	surface is the one used for constraint testing. See
  ## 	set_constraint_adjustment.
  ## 
  ## 	An example use case is placing a popup menu on top of a user interface
  ## 	element, while aligning the user interface element of the parent surface
  ## 	with some user interface element placed somewhere in the popup surface.
  ## 
  cast[ptr Proxy](zxdgPositionerV6).marshal_flags(ZxdgPositionerV6Request_set_offset.ord, nil, cast[ptr Proxy](zxdgPositionerV6).get_version(), 0, x, y)
type ZxdgSurfaceV6Listener* = object
  configure*: proc(
    data: pointer;
    zxdgSurfaceV6: ptr ZxdgSurfaceV6;
    serial: uint32;
  ) {.nimcall.}
proc addListener*(zxdgSurfaceV6: ptr ZxdgSurfaceV6; listener: ptr ZxdgSurfaceV6Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zxdgSurfaceV6).add_listener(listener, data)

proc setUserData*(zxdgSurfaceV6: ptr ZxdgSurfaceV6; userData: pointer) {.inline.} =
  cast[ptr Proxy](zxdgSurfaceV6).set_user_data(user_data)
proc getUserData*(zxdgSurfaceV6: ptr ZxdgSurfaceV6): pointer {.inline.} =
  cast[ptr Proxy](zxdgSurfaceV6).get_user_data()
proc getVersion*(zxdgSurfaceV6: ptr ZxdgSurfaceV6): uint32 {.inline.} =
  cast[ptr Proxy](zxdgSurfaceV6).get_version()
proc destroy*(zxdgSurfaceV6: ptr ZxdgSurfaceV6) {.inline.} =
  ## destroy the xdg_surface
  ## 
  ## Destroy the xdg_surface object. An xdg_surface must only be destroyed
  ## 	after its role object has been destroyed. If the role object still
  ## exists when this request is issued, the zxdg_shell_v6.defunct_surfaces
  ## is raised.
  ## 
  cast[ptr Proxy](zxdgSurfaceV6).marshal_flags(ZxdgSurfaceV6Request_destroy.ord, nil, cast[ptr Proxy](zxdgSurfaceV6).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getToplevel*(zxdgSurfaceV6: ptr ZxdgSurfaceV6): ptr ZxdgToplevelV6 {.inline.} =
  ## assign the xdg_toplevel surface role
  ## 
  ## This creates an xdg_toplevel object for the given xdg_surface and gives
  ## 	the associated wl_surface the xdg_toplevel role. If the surface already
  ## had a role, the zxdg_shell_v6.role error is raised.
  ## 
  ## 	See the documentation of xdg_toplevel for more details about what an
  ## 	xdg_toplevel is and how it is used.
  ## 
  cast[ptr ZxdgToplevelV6](cast[ptr Proxy](zxdgSurfaceV6).marshal_flags(ZxdgSurfaceV6Request_get_toplevel.ord, addr zxdg_toplevel_v6_interface, cast[ptr Proxy](zxdgSurfaceV6).get_version(), 0, nil))
proc getPopup*(zxdgSurfaceV6: ptr ZxdgSurfaceV6; parent: ptr ZxdgSurfaceV6; positioner: ptr ZxdgPositionerV6): ptr ZxdgPopupV6 {.inline.} =
  ## assign the xdg_popup surface role
  ## 
  ## This creates an xdg_popup object for the given xdg_surface and gives the
  ## 	associated wl_surface the xdg_popup role. If the surface already
  ## had a role, the zxdg_shell_v6.role error is raised.
  ## 
  ## 	See the documentation of xdg_popup for more details about what an
  ## 	xdg_popup is and how it is used.
  ## 
  cast[ptr ZxdgPopupV6](cast[ptr Proxy](zxdgSurfaceV6).marshal_flags(ZxdgSurfaceV6Request_get_popup.ord, addr zxdg_popup_v6_interface, cast[ptr Proxy](zxdgSurfaceV6).get_version(), 0, nil, parent, positioner))
proc setWindowGeometry*(zxdgSurfaceV6: ptr ZxdgSurfaceV6; x: int32; y: int32; width: int32; height: int32) {.inline.} =
  ## set the new window geometry
  ## 
  ## The window geometry of a surface is its "visible bounds" from the
  ## 	user's perspective. Client-side decorations often have invisible
  ## 	portions like drop-shadows which should be ignored for the
  ## 	purposes of aligning, placing and constraining windows.
  ## 
  ## 	The window geometry is double-buffered state, see wl_surface.commit.
  ## 
  ## 	Once the window geometry of the surface is set, it is not possible to
  ## 	unset it, and it will remain the same until set_window_geometry is
  ## 	called again, even if a new subsurface or buffer is attached.
  ## 
  ## 	If never set, the value is the full bounds of the surface,
  ## 	including any subsurfaces. This updates dynamically on every
  ## 	commit. This unset is meant for extremely simple clients.
  ## 
  ## 	The arguments are given in the surface-local coordinate space of
  ## 	the wl_surface associated with this xdg_surface.
  ## 
  ## 	The width and height must be greater than zero. Setting an invalid size
  ## 	will raise an error. When applied, the effective window geometry will be
  ## 	the set window geometry clamped to the bounding rectangle of the
  ## 	combined geometry of the surface of the xdg_surface and the associated
  ## 	subsurfaces.
  ## 
  cast[ptr Proxy](zxdgSurfaceV6).marshal_flags(ZxdgSurfaceV6Request_set_window_geometry.ord, nil, cast[ptr Proxy](zxdgSurfaceV6).get_version(), 0, x, y, width, height)
proc ackConfigure*(zxdgSurfaceV6: ptr ZxdgSurfaceV6; serial: uint32) {.inline.} =
  ## ack a configure event
  ## 
  ## When a configure event is received, if a client commits the
  ## 	surface in response to the configure event, then the client
  ## 	must make an ack_configure request sometime before the commit
  ## 	request, passing along the serial of the configure event.
  ## 
  ## 	For instance, for toplevel surfaces the compositor might use this
  ## 	information to move a surface to the top left only when the client has
  ## 	drawn itself for the maximized or fullscreen state.
  ## 
  ## 	If the client receives multiple configure events before it
  ## 	can respond to one, it only has to ack the last configure event.
  ## 
  ## 	A client is not required to commit immediately after sending
  ## 	an ack_configure request - it may even ack_configure several times
  ## 	before its next surface commit.
  ## 
  ## 	A client may send multiple ack_configure requests before committing, but
  ## 	only the last request sent before a commit indicates which configure
  ## 	event the client really is responding to.
  ## 
  ## If an invalid serial is used, the zxdg_shell_v6.invalid_surface_state
  ## error is raised.
  ## 
  cast[ptr Proxy](zxdgSurfaceV6).marshal_flags(ZxdgSurfaceV6Request_ack_configure.ord, nil, cast[ptr Proxy](zxdgSurfaceV6).get_version(), 0, serial)
type ZxdgToplevelV6Listener* = object
  configure*: proc(
    data: pointer;
    zxdgToplevelV6: ptr ZxdgToplevelV6;
    width: int32;
    height: int32;
    states: ptr Array;
  ) {.nimcall.}
  close*: proc(
    data: pointer;
    zxdgToplevelV6: ptr ZxdgToplevelV6;
  ) {.nimcall.}
proc addListener*(zxdgToplevelV6: ptr ZxdgToplevelV6; listener: ptr ZxdgToplevelV6Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zxdgToplevelV6).add_listener(listener, data)

proc setUserData*(zxdgToplevelV6: ptr ZxdgToplevelV6; userData: pointer) {.inline.} =
  cast[ptr Proxy](zxdgToplevelV6).set_user_data(user_data)
proc getUserData*(zxdgToplevelV6: ptr ZxdgToplevelV6): pointer {.inline.} =
  cast[ptr Proxy](zxdgToplevelV6).get_user_data()
proc getVersion*(zxdgToplevelV6: ptr ZxdgToplevelV6): uint32 {.inline.} =
  cast[ptr Proxy](zxdgToplevelV6).get_version()
proc destroy*(zxdgToplevelV6: ptr ZxdgToplevelV6) {.inline.} =
  ## destroy the xdg_toplevel
  ## 
  ## Unmap and destroy the window. The window will be effectively
  ## 	hidden from the user's point of view, and all state like
  ## 	maximization, fullscreen, and so on, will be lost.
  ## 
  cast[ptr Proxy](zxdgToplevelV6).marshal_flags(ZxdgToplevelV6Request_destroy.ord, nil, cast[ptr Proxy](zxdgToplevelV6).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setParent*(zxdgToplevelV6: ptr ZxdgToplevelV6; parent: ptr ZxdgToplevelV6) {.inline.} =
  ## set the parent of this surface
  ## 
  ## Set the "parent" of this surface. This window should be stacked
  ## 	above a parent. The parent surface must be mapped as long as this
  ## 	surface is mapped.
  ## 
  ## 	Parent windows should be set on dialogs, toolboxes, or other
  ## 	"auxiliary" surfaces, so that the parent is raised when the dialog
  ## 	is raised.
  ## 
  cast[ptr Proxy](zxdgToplevelV6).marshal_flags(ZxdgToplevelV6Request_set_parent.ord, nil, cast[ptr Proxy](zxdgToplevelV6).get_version(), 0, parent)
proc setTitle*(zxdgToplevelV6: ptr ZxdgToplevelV6; title: cstring) {.inline.} =
  ## set surface title
  ## 
  ## Set a short title for the surface.
  ## 
  ## 	This string may be used to identify the surface in a task bar,
  ## 	window list, or other user interface elements provided by the
  ## 	compositor.
  ## 
  ## 	The string must be encoded in UTF-8.
  ## 
  cast[ptr Proxy](zxdgToplevelV6).marshal_flags(ZxdgToplevelV6Request_set_title.ord, nil, cast[ptr Proxy](zxdgToplevelV6).get_version(), 0, title)
proc setAppId*(zxdgToplevelV6: ptr ZxdgToplevelV6; appId: cstring) {.inline.} =
  ## set application ID
  ## 
  ## Set an application identifier for the surface.
  ## 
  ## 	The app ID identifies the general class of applications to which
  ## 	the surface belongs. The compositor can use this to group multiple
  ## 	surfaces together, or to determine how to launch a new application.
  ## 
  ## 	For D-Bus activatable applications, the app ID is used as the D-Bus
  ## 	service name.
  ## 
  ## 	The compositor shell will try to group application surfaces together
  ## 	by their app ID. As a best practice, it is suggested to select app
  ## 	ID's that match the basename of the application's .desktop file.
  ## 	For example, "org.freedesktop.FooViewer" where the .desktop file is
  ## 	"org.freedesktop.FooViewer.desktop".
  ## 
  ## 	See the desktop-entry specification [0] for more details on
  ## 	application identifiers and how they relate to well-known D-Bus
  ## 	names and .desktop files.
  ## 
  ## 	[0] http://standards.freedesktop.org/desktop-entry-spec/
  ## 
  cast[ptr Proxy](zxdgToplevelV6).marshal_flags(ZxdgToplevelV6Request_set_app_id.ord, nil, cast[ptr Proxy](zxdgToplevelV6).get_version(), 0, appId)
proc showWindowMenu*(zxdgToplevelV6: ptr ZxdgToplevelV6; seat: ptr Seat; serial: uint32; x: int32; y: int32) {.inline.} =
  ## show the window menu
  ## 
  ## Clients implementing client-side decorations might want to show
  ## 	a context menu when right-clicking on the decorations, giving the
  ## 	user a menu that they can use to maximize or minimize the window.
  ## 
  ## 	This request asks the compositor to pop up such a window menu at
  ## 	the given position, relative to the local surface coordinates of
  ## 	the parent surface. There are no guarantees as to what menu items
  ## 	the window menu contains.
  ## 
  ## 	This request must be used in response to some sort of user action
  ## 	like a button press, key press, or touch down event.
  ## 
  cast[ptr Proxy](zxdgToplevelV6).marshal_flags(ZxdgToplevelV6Request_show_window_menu.ord, nil, cast[ptr Proxy](zxdgToplevelV6).get_version(), 0, seat, serial, x, y)
proc move*(zxdgToplevelV6: ptr ZxdgToplevelV6; seat: ptr Seat; serial: uint32) {.inline.} =
  ## start an interactive move
  ## 
  ## Start an interactive, user-driven move of the surface.
  ## 
  ## 	This request must be used in response to some sort of user action
  ## 	like a button press, key press, or touch down event. The passed
  ## 	serial is used to determine the type of interactive move (touch,
  ## 	pointer, etc).
  ## 
  ## 	The server may ignore move requests depending on the state of
  ## 	the surface (e.g. fullscreen or maximized), or if the passed serial
  ## 	is no longer valid.
  ## 
  ## 	If triggered, the surface will lose the focus of the device
  ## 	(wl_pointer, wl_touch, etc) used for the move. It is up to the
  ## 	compositor to visually indicate that the move is taking place, such as
  ## 	updating a pointer cursor, during the move. There is no guarantee
  ## 	that the device focus will return when the move is completed.
  ## 
  cast[ptr Proxy](zxdgToplevelV6).marshal_flags(ZxdgToplevelV6Request_move.ord, nil, cast[ptr Proxy](zxdgToplevelV6).get_version(), 0, seat, serial)
proc resize*(zxdgToplevelV6: ptr ZxdgToplevelV6; seat: ptr Seat; serial: uint32; edges: uint32) {.inline.} =
  ## start an interactive resize
  ## 
  ## Start a user-driven, interactive resize of the surface.
  ## 
  ## 	This request must be used in response to some sort of user action
  ## 	like a button press, key press, or touch down event. The passed
  ## 	serial is used to determine the type of interactive resize (touch,
  ## 	pointer, etc).
  ## 
  ## 	The server may ignore resize requests depending on the state of
  ## 	the surface (e.g. fullscreen or maximized).
  ## 
  ## 	If triggered, the client will receive configure events with the
  ## 	"resize" state enum value and the expected sizes. See the "resize"
  ## 	enum value for more details about what is required. The client
  ## 	must also acknowledge configure events using "ack_configure". After
  ## 	the resize is completed, the client will receive another "configure"
  ## 	event without the resize state.
  ## 
  ## 	If triggered, the surface also will lose the focus of the device
  ## 	(wl_pointer, wl_touch, etc) used for the resize. It is up to the
  ## 	compositor to visually indicate that the resize is taking place,
  ## 	such as updating a pointer cursor, during the resize. There is no
  ## 	guarantee that the device focus will return when the resize is
  ## 	completed.
  ## 
  ## 	The edges parameter specifies how the surface should be resized,
  ## 	and is one of the values of the resize_edge enum. The compositor
  ## 	may use this information to update the surface position for
  ## 	example when dragging the top left corner. The compositor may also
  ## 	use this information to adapt its behavior, e.g. choose an
  ## 	appropriate cursor image.
  ## 
  cast[ptr Proxy](zxdgToplevelV6).marshal_flags(ZxdgToplevelV6Request_resize.ord, nil, cast[ptr Proxy](zxdgToplevelV6).get_version(), 0, seat, serial, edges)
proc setMaxSize*(zxdgToplevelV6: ptr ZxdgToplevelV6; width: int32; height: int32) {.inline.} =
  ## set the maximum size
  ## 
  ## Set a maximum size for the window.
  ## 
  ## 	The client can specify a maximum size so that the compositor does
  ## 	not try to configure the window beyond this size.
  ## 
  ## 	The width and height arguments are in window geometry coordinates.
  ## 	See xdg_surface.set_window_geometry.
  ## 
  ## 	Values set in this way are double-buffered, see wl_surface.commit.
  ## 
  ## 	The compositor can use this information to allow or disallow
  ## 	different states like maximize or fullscreen and draw accurate
  ## 	animations.
  ## 
  ## 	Similarly, a tiling window manager may use this information to
  ## 	place and resize client windows in a more effective way.
  ## 
  ## 	The client should not rely on the compositor to obey the maximum
  ## 	size. The compositor may decide to ignore the values set by the
  ## 	client and request a larger size.
  ## 
  ## 	If never set, or a value of zero in the request, means that the
  ## 	client has no expected maximum size in the given dimension.
  ## 	As a result, a client wishing to reset the maximum size
  ## 	to an unspecified state can use zero for width and height in the
  ## 	request.
  ## 
  ## 	Requesting a maximum size to be smaller than the minimum size of
  ## 	a surface is illegal and will result in a protocol error.
  ## 
  ## 	The width and height must be greater than or equal to zero. Using
  ## 	strictly negative values for width and height will result in the
  ## zxdg_shell_v6.invalid_surface_state error being raised.
  ## 
  cast[ptr Proxy](zxdgToplevelV6).marshal_flags(ZxdgToplevelV6Request_set_max_size.ord, nil, cast[ptr Proxy](zxdgToplevelV6).get_version(), 0, width, height)
proc setMinSize*(zxdgToplevelV6: ptr ZxdgToplevelV6; width: int32; height: int32) {.inline.} =
  ## set the minimum size
  ## 
  ## Set a minimum size for the window.
  ## 
  ## 	The client can specify a minimum size so that the compositor does
  ## 	not try to configure the window below this size.
  ## 
  ## 	The width and height arguments are in window geometry coordinates.
  ## 	See xdg_surface.set_window_geometry.
  ## 
  ## 	Values set in this way are double-buffered, see wl_surface.commit.
  ## 
  ## 	The compositor can use this information to allow or disallow
  ## 	different states like maximize or fullscreen and draw accurate
  ## 	animations.
  ## 
  ## 	Similarly, a tiling window manager may use this information to
  ## 	place and resize client windows in a more effective way.
  ## 
  ## 	The client should not rely on the compositor to obey the minimum
  ## 	size. The compositor may decide to ignore the values set by the
  ## 	client and request a smaller size.
  ## 
  ## 	If never set, or a value of zero in the request, means that the
  ## 	client has no expected minimum size in the given dimension.
  ## 	As a result, a client wishing to reset the minimum size
  ## 	to an unspecified state can use zero for width and height in the
  ## 	request.
  ## 
  ## 	Requesting a minimum size to be larger than the maximum size of
  ## 	a surface is illegal and will result in a protocol error.
  ## 
  ## 	The width and height must be greater than or equal to zero. Using
  ## 	strictly negative values for width and height will result in the
  ## zxdg_shell_v6.invalid_surface_state error being raised.
  ## 
  cast[ptr Proxy](zxdgToplevelV6).marshal_flags(ZxdgToplevelV6Request_set_min_size.ord, nil, cast[ptr Proxy](zxdgToplevelV6).get_version(), 0, width, height)
proc setMaximized*(zxdgToplevelV6: ptr ZxdgToplevelV6) {.inline.} =
  ## maximize the window
  ## 
  ## Maximize the surface.
  ## 
  ## 	After requesting that the surface should be maximized, the compositor
  ## 	will respond by emitting a configure event with the "maximized" state
  ## 	and the required window geometry. The client should then update its
  ## 	content, drawing it in a maximized state, i.e. without shadow or other
  ## 	decoration outside of the window geometry. The client must also
  ## 	acknowledge the configure when committing the new content (see
  ## 	ack_configure).
  ## 
  ## 	It is up to the compositor to decide how and where to maximize the
  ## 	surface, for example which output and what region of the screen should
  ## 	be used.
  ## 
  ## 	If the surface was already maximized, the compositor will still emit
  ## 	a configure event with the "maximized" state.
  ## 
  ## Note that unrelated compositor side state changes may cause
  ## configure events to be emitted at any time, meaning trying to
  ## match this request to a specific future configure event is
  ## futile.
  ## 
  cast[ptr Proxy](zxdgToplevelV6).marshal_flags(ZxdgToplevelV6Request_set_maximized.ord, nil, cast[ptr Proxy](zxdgToplevelV6).get_version(), 0)
proc unsetMaximized*(zxdgToplevelV6: ptr ZxdgToplevelV6) {.inline.} =
  ## unmaximize the window
  ## 
  ## Unmaximize the surface.
  ## 
  ## 	After requesting that the surface should be unmaximized, the compositor
  ## 	will respond by emitting a configure event without the "maximized"
  ## 	state. If available, the compositor will include the window geometry
  ## 	dimensions the window had prior to being maximized in the configure
  ## 	request. The client must then update its content, drawing it in a
  ## 	regular state, i.e. potentially with shadow, etc. The client must also
  ## 	acknowledge the configure when committing the new content (see
  ## 	ack_configure).
  ## 
  ## 	It is up to the compositor to position the surface after it was
  ## 	unmaximized; usually the position the surface had before maximizing, if
  ## 	applicable.
  ## 
  ## 	If the surface was already not maximized, the compositor will still
  ## 	emit a configure event without the "maximized" state.
  ## 
  ## Note that unrelated changes in the state of compositor may cause
  ## configure events to be emitted by the compositor between processing
  ## this request and emitting corresponding configure event, so trying
  ## to match the request with the event is futile.
  ## 
  cast[ptr Proxy](zxdgToplevelV6).marshal_flags(ZxdgToplevelV6Request_unset_maximized.ord, nil, cast[ptr Proxy](zxdgToplevelV6).get_version(), 0)
proc setFullscreen*(zxdgToplevelV6: ptr ZxdgToplevelV6; output: ptr Output) {.inline.} =
  ## set the window as fullscreen on a monitor
  ## 
  ## Make the surface fullscreen.
  ## 
  ## 	You can specify an output that you would prefer to be fullscreen.
  ## 	If this value is NULL, it's up to the compositor to choose which
  ## 	display will be used to map this surface.
  ## 
  ## 	If the surface doesn't cover the whole output, the compositor will
  ## 	position the surface in the center of the output and compensate with
  ## 	black borders filling the rest of the output.
  ## 
  cast[ptr Proxy](zxdgToplevelV6).marshal_flags(ZxdgToplevelV6Request_set_fullscreen.ord, nil, cast[ptr Proxy](zxdgToplevelV6).get_version(), 0, output)
proc unsetFullscreen*(zxdgToplevelV6: ptr ZxdgToplevelV6) {.inline.} =
  cast[ptr Proxy](zxdgToplevelV6).marshal_flags(ZxdgToplevelV6Request_unset_fullscreen.ord, nil, cast[ptr Proxy](zxdgToplevelV6).get_version(), 0)
proc setMinimized*(zxdgToplevelV6: ptr ZxdgToplevelV6) {.inline.} =
  ## set the window as minimized
  ## 
  ## Request that the compositor minimize your surface. There is no
  ## 	way to know if the surface is currently minimized, nor is there
  ## 	any way to unset minimization on this surface.
  ## 
  ## 	If you are looking to throttle redrawing when minimized, please
  ## 	instead use the wl_surface.frame event for this, as this will
  ## 	also work with live previews on windows in Alt-Tab, Expose or
  ## 	similar compositor features.
  ## 
  cast[ptr Proxy](zxdgToplevelV6).marshal_flags(ZxdgToplevelV6Request_set_minimized.ord, nil, cast[ptr Proxy](zxdgToplevelV6).get_version(), 0)
type ZxdgPopupV6Listener* = object
  configure*: proc(
    data: pointer;
    zxdgPopupV6: ptr ZxdgPopupV6;
    x: int32;
    y: int32;
    width: int32;
    height: int32;
  ) {.nimcall.}
  popupDone*: proc(
    data: pointer;
    zxdgPopupV6: ptr ZxdgPopupV6;
  ) {.nimcall.}
proc addListener*(zxdgPopupV6: ptr ZxdgPopupV6; listener: ptr ZxdgPopupV6Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zxdgPopupV6).add_listener(listener, data)

proc setUserData*(zxdgPopupV6: ptr ZxdgPopupV6; userData: pointer) {.inline.} =
  cast[ptr Proxy](zxdgPopupV6).set_user_data(user_data)
proc getUserData*(zxdgPopupV6: ptr ZxdgPopupV6): pointer {.inline.} =
  cast[ptr Proxy](zxdgPopupV6).get_user_data()
proc getVersion*(zxdgPopupV6: ptr ZxdgPopupV6): uint32 {.inline.} =
  cast[ptr Proxy](zxdgPopupV6).get_version()
proc destroy*(zxdgPopupV6: ptr ZxdgPopupV6) {.inline.} =
  ## remove xdg_popup interface
  ## 
  ## This destroys the popup. Explicitly destroying the xdg_popup
  ## 	object will also dismiss the popup, and unmap the surface.
  ## 
  ## 	If this xdg_popup is not the "topmost" popup, a protocol error
  ## 	will be sent.
  ## 
  cast[ptr Proxy](zxdgPopupV6).marshal_flags(ZxdgPopupV6Request_destroy.ord, nil, cast[ptr Proxy](zxdgPopupV6).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc grab*(zxdgPopupV6: ptr ZxdgPopupV6; seat: ptr Seat; serial: uint32) {.inline.} =
  ## make the popup take an explicit grab
  ## 
  ## This request makes the created popup take an explicit grab. An explicit
  ## 	grab will be dismissed when the user dismisses the popup, or when the
  ## 	client destroys the xdg_popup. This can be done by the user clicking
  ## 	outside the surface, using the keyboard, or even locking the screen
  ## 	through closing the lid or a timeout.
  ## 
  ## 	If the compositor denies the grab, the popup will be immediately
  ## 	dismissed.
  ## 
  ## 	This request must be used in response to some sort of user action like a
  ## 	button press, key press, or touch down event. The serial number of the
  ## 	event should be passed as 'serial'.
  ## 
  ## 	The parent of a grabbing popup must either be an xdg_toplevel surface or
  ## 	another xdg_popup with an explicit grab. If the parent is another
  ## 	xdg_popup it means that the popups are nested, with this popup now being
  ## 	the topmost popup.
  ## 
  ## 	Nested popups must be destroyed in the reverse order they were created
  ## 	in, e.g. the only popup you are allowed to destroy at all times is the
  ## 	topmost one.
  ## 
  ## 	When compositors choose to dismiss a popup, they may dismiss every
  ## 	nested grabbing popup as well. When a compositor dismisses popups, it
  ## 	will follow the same dismissing order as required from the client.
  ## 
  ## 	The parent of a grabbing popup must either be another xdg_popup with an
  ## 	active explicit grab, or an xdg_popup or xdg_toplevel, if there are no
  ## 	explicit grabs already taken.
  ## 
  ## 	If the topmost grabbing popup is destroyed, the grab will be returned to
  ## 	the parent of the popup, if that parent previously had an explicit grab.
  ## 
  ## 	If the parent is a grabbing popup which has already been dismissed, this
  ## 	popup will be immediately dismissed. If the parent is a popup that did
  ## 	not take an explicit grab, an error will be raised.
  ## 
  ## 	During a popup grab, the client owning the grab will receive pointer
  ## 	and touch events for all their surfaces as normal (similar to an
  ## 	"owner-events" grab in X11 parlance), while the top most grabbing popup
  ## 	will always have keyboard focus.
  ## 
  cast[ptr Proxy](zxdgPopupV6).marshal_flags(ZxdgPopupV6Request_grab.ord, nil, cast[ptr Proxy](zxdgPopupV6).get_version(), 0, seat, serial)
