# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import code
export code

## The pointer_constraints_unstable_v1 SERVER protocol
## ###################################################
## 
## Interfaces
## ==========
## 
## * zwp_pointer_constraints_v1
## * zwp_locked_pointer_v1
## * zwp_confined_pointer_v1
## 
## Copyright
## =========
## 
## Copyright © 2014      Jonas Ådahl
## Copyright © 2015      Red Hat Inc.
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type ZwpPointerConstraintsV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  lockPointer*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    surface: ptr Resource;
    pointer: ptr Resource;
    region: ptr Resource;
    lifetime: uint32;
  ) {.nimcall.}
  confinePointer*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    surface: ptr Resource;
    pointer: ptr Resource;
    region: ptr Resource;
    lifetime: uint32;
  ) {.nimcall.}

type ZwpLockedPointerV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  setCursorPositionHint*: proc(
    client: ptr Client;
    resource: ptr Resource;
    surfaceX: Fixed;
    surfaceY: Fixed;
  ) {.nimcall.}
  setRegion*: proc(
    client: ptr Client;
    resource: ptr Resource;
    region: ptr Resource;
  ) {.nimcall.}

proc zwpLockedPointerV1SendLocked*(resource: ptr Resource) {.inline, exportc: "zwp_locked_pointer_v1_send_locked".} =
  ## Sends an locked event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpLockedPointerV1Event_locked.ord)

proc zwpLockedPointerV1SendUnlocked*(resource: ptr Resource) {.inline, exportc: "zwp_locked_pointer_v1_send_unlocked".} =
  ## Sends an unlocked event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpLockedPointerV1Event_unlocked.ord)

type ZwpConfinedPointerV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  setRegion*: proc(
    client: ptr Client;
    resource: ptr Resource;
    region: ptr Resource;
  ) {.nimcall.}

proc zwpConfinedPointerV1SendConfined*(resource: ptr Resource) {.inline, exportc: "zwp_confined_pointer_v1_send_confined".} =
  ## Sends an confined event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpConfinedPointerV1Event_confined.ord)

proc zwpConfinedPointerV1SendUnconfined*(resource: ptr Resource) {.inline, exportc: "zwp_confined_pointer_v1_send_unconfined".} =
  ## Sends an unconfined event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpConfinedPointerV1Event_unconfined.ord)

