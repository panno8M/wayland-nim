# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The pointer_constraints_unstable_v1 CLIENT protocol
## ###################################################
## 
## Interfaces
## ==========
## 
## * zwp_pointer_constraints_v1
## * zwp_locked_pointer_v1
## * zwp_confined_pointer_v1
## 
## Copyright
## =========
## 
## Copyright © 2014      Jonas Ådahl
## Copyright © 2015      Red Hat Inc.
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(zwpPointerConstraintsV1: ptr ZwpPointerConstraintsV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpPointerConstraintsV1).set_user_data(user_data)
proc getUserData*(zwpPointerConstraintsV1: ptr ZwpPointerConstraintsV1): pointer {.inline.} =
  cast[ptr Proxy](zwpPointerConstraintsV1).get_user_data()
proc getVersion*(zwpPointerConstraintsV1: ptr ZwpPointerConstraintsV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpPointerConstraintsV1).get_version()
proc destroy*(zwpPointerConstraintsV1: ptr ZwpPointerConstraintsV1) {.inline.} =
  ## destroy the pointer constraints manager object
  ## 
  ## Used by the client to notify the server that it will no longer use this
  ## 	pointer constraints object.
  ## 
  cast[ptr Proxy](zwpPointerConstraintsV1).marshal_flags(ZwpPointerConstraintsV1Request_destroy.ord, nil, cast[ptr Proxy](zwpPointerConstraintsV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc lockPointer*(zwpPointerConstraintsV1: ptr ZwpPointerConstraintsV1; surface: ptr Surface; pointer: ptr Pointer; region: ptr Region; lifetime: uint32): ptr ZwpLockedPointerV1 {.inline.} =
  ## lock pointer to a position
  ## 
  ## The lock_pointer request lets the client request to disable movements of
  ## 	the virtual pointer (i.e. the cursor), effectively locking the pointer
  ## 	to a position. This request may not take effect immediately; in the
  ## 	future, when the compositor deems implementation-specific constraints
  ## 	are satisfied, the pointer lock will be activated and the compositor
  ## 	sends a locked event.
  ## 
  ## 	The protocol provides no guarantee that the constraints are ever
  ## 	satisfied, and does not require the compositor to send an error if the
  ## 	constraints cannot ever be satisfied. It is thus possible to request a
  ## 	lock that will never activate.
  ## 
  ## 	There may not be another pointer constraint of any kind requested or
  ## 	active on the surface for any of the wl_pointer objects of the seat of
  ## 	the passed pointer when requesting a lock. If there is, an error will be
  ## 	raised. See general pointer lock documentation for more details.
  ## 
  ## 	The intersection of the region passed with this request and the input
  ## 	region of the surface is used to determine where the pointer must be
  ## 	in order for the lock to activate. It is up to the compositor whether to
  ## 	warp the pointer or require some kind of user interaction for the lock
  ## 	to activate. If the region is null the surface input region is used.
  ## 
  ## 	A surface may receive pointer focus without the lock being activated.
  ## 
  ## 	The request creates a new object wp_locked_pointer which is used to
  ## 	interact with the lock as well as receive updates about its state. See
  ## 	the the description of wp_locked_pointer for further information.
  ## 
  ## 	Note that while a pointer is locked, the wl_pointer objects of the
  ## 	corresponding seat will not emit any wl_pointer.motion events, but
  ## 	relative motion events will still be emitted via wp_relative_pointer
  ## 	objects of the same seat. wl_pointer.axis and wl_pointer.button events
  ## 	are unaffected.
  ## 
  cast[ptr ZwpLockedPointerV1](cast[ptr Proxy](zwpPointerConstraintsV1).marshal_flags(ZwpPointerConstraintsV1Request_lock_pointer.ord, addr zwp_locked_pointer_v1_interface, cast[ptr Proxy](zwpPointerConstraintsV1).get_version(), 0, nil, surface, pointer, region, lifetime))
proc confinePointer*(zwpPointerConstraintsV1: ptr ZwpPointerConstraintsV1; surface: ptr Surface; pointer: ptr Pointer; region: ptr Region; lifetime: uint32): ptr ZwpConfinedPointerV1 {.inline.} =
  ## confine pointer to a region
  ## 
  ## The confine_pointer request lets the client request to confine the
  ## 	pointer cursor to a given region. This request may not take effect
  ## 	immediately; in the future, when the compositor deems implementation-
  ## 	specific constraints are satisfied, the pointer confinement will be
  ## 	activated and the compositor sends a confined event.
  ## 
  ## 	The intersection of the region passed with this request and the input
  ## 	region of the surface is used to determine where the pointer must be
  ## 	in order for the confinement to activate. It is up to the compositor
  ## 	whether to warp the pointer or require some kind of user interaction for
  ## 	the confinement to activate. If the region is null the surface input
  ## 	region is used.
  ## 
  ## 	The request will create a new object wp_confined_pointer which is used
  ## 	to interact with the confinement as well as receive updates about its
  ## 	state. See the the description of wp_confined_pointer for further
  ## 	information.
  ## 
  cast[ptr ZwpConfinedPointerV1](cast[ptr Proxy](zwpPointerConstraintsV1).marshal_flags(ZwpPointerConstraintsV1Request_confine_pointer.ord, addr zwp_confined_pointer_v1_interface, cast[ptr Proxy](zwpPointerConstraintsV1).get_version(), 0, nil, surface, pointer, region, lifetime))
type ZwpLockedPointerV1Listener* = object
  locked*: proc(
    data: pointer;
    zwpLockedPointerV1: ptr ZwpLockedPointerV1;
  ) {.nimcall.}
  unlocked*: proc(
    data: pointer;
    zwpLockedPointerV1: ptr ZwpLockedPointerV1;
  ) {.nimcall.}
proc addListener*(zwpLockedPointerV1: ptr ZwpLockedPointerV1; listener: ptr ZwpLockedPointerV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpLockedPointerV1).add_listener(listener, data)

proc setUserData*(zwpLockedPointerV1: ptr ZwpLockedPointerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpLockedPointerV1).set_user_data(user_data)
proc getUserData*(zwpLockedPointerV1: ptr ZwpLockedPointerV1): pointer {.inline.} =
  cast[ptr Proxy](zwpLockedPointerV1).get_user_data()
proc getVersion*(zwpLockedPointerV1: ptr ZwpLockedPointerV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpLockedPointerV1).get_version()
proc destroy*(zwpLockedPointerV1: ptr ZwpLockedPointerV1) {.inline.} =
  ## destroy the locked pointer object
  ## 
  ## Destroy the locked pointer object. If applicable, the compositor will
  ## 	unlock the pointer.
  ## 
  cast[ptr Proxy](zwpLockedPointerV1).marshal_flags(ZwpLockedPointerV1Request_destroy.ord, nil, cast[ptr Proxy](zwpLockedPointerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setCursorPositionHint*(zwpLockedPointerV1: ptr ZwpLockedPointerV1; surfaceX: Fixed; surfaceY: Fixed) {.inline.} =
  ## set the pointer cursor position hint
  ## 
  ## Set the cursor position hint relative to the top left corner of the
  ## 	surface.
  ## 
  ## 	If the client is drawing its own cursor, it should update the position
  ## 	hint to the position of its own cursor. A compositor may use this
  ## 	information to warp the pointer upon unlock in order to avoid pointer
  ## 	jumps.
  ## 
  ## 	The cursor position hint is double-buffered state, see
  ## 	wl_surface.commit.
  ## 
  cast[ptr Proxy](zwpLockedPointerV1).marshal_flags(ZwpLockedPointerV1Request_set_cursor_position_hint.ord, nil, cast[ptr Proxy](zwpLockedPointerV1).get_version(), 0, surfaceX, surfaceY)
proc setRegion*(zwpLockedPointerV1: ptr ZwpLockedPointerV1; region: ptr Region) {.inline.} =
  ## set a new lock region
  ## 
  ## Set a new region used to lock the pointer.
  ## 
  ## 	The new lock region is double-buffered, see wl_surface.commit.
  ## 
  ## 	For details about the lock region, see wp_locked_pointer.
  ## 
  cast[ptr Proxy](zwpLockedPointerV1).marshal_flags(ZwpLockedPointerV1Request_set_region.ord, nil, cast[ptr Proxy](zwpLockedPointerV1).get_version(), 0, region)
type ZwpConfinedPointerV1Listener* = object
  confined*: proc(
    data: pointer;
    zwpConfinedPointerV1: ptr ZwpConfinedPointerV1;
  ) {.nimcall.}
  unconfined*: proc(
    data: pointer;
    zwpConfinedPointerV1: ptr ZwpConfinedPointerV1;
  ) {.nimcall.}
proc addListener*(zwpConfinedPointerV1: ptr ZwpConfinedPointerV1; listener: ptr ZwpConfinedPointerV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpConfinedPointerV1).add_listener(listener, data)

proc setUserData*(zwpConfinedPointerV1: ptr ZwpConfinedPointerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpConfinedPointerV1).set_user_data(user_data)
proc getUserData*(zwpConfinedPointerV1: ptr ZwpConfinedPointerV1): pointer {.inline.} =
  cast[ptr Proxy](zwpConfinedPointerV1).get_user_data()
proc getVersion*(zwpConfinedPointerV1: ptr ZwpConfinedPointerV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpConfinedPointerV1).get_version()
proc destroy*(zwpConfinedPointerV1: ptr ZwpConfinedPointerV1) {.inline.} =
  ## destroy the confined pointer object
  ## 
  ## Destroy the confined pointer object. If applicable, the compositor will
  ## 	unconfine the pointer.
  ## 
  cast[ptr Proxy](zwpConfinedPointerV1).marshal_flags(ZwpConfinedPointerV1Request_destroy.ord, nil, cast[ptr Proxy](zwpConfinedPointerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc setRegion*(zwpConfinedPointerV1: ptr ZwpConfinedPointerV1; region: ptr Region) {.inline.} =
  ## set a new confine region
  ## 
  ## Set a new region used to confine the pointer.
  ## 
  ## 	The new confine region is double-buffered, see wl_surface.commit.
  ## 
  ## 	If the confinement is active when the new confinement region is applied
  ## 	and the pointer ends up outside of newly applied region, the pointer may
  ## 	warped to a position within the new confinement region. If warped, a
  ## 	wl_pointer.motion event will be emitted, but no
  ## 	wp_relative_pointer.relative_motion event.
  ## 
  ## 	The compositor may also, instead of using the new region, unconfine the
  ## 	pointer.
  ## 
  ## 	For details about the confine region, see wp_confined_pointer.
  ## 
  cast[ptr Proxy](zwpConfinedPointerV1).marshal_flags(ZwpConfinedPointerV1Request_set_region.ord, nil, cast[ptr Proxy](zwpConfinedPointerV1).get_version(), 0, region)
