# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The idle_inhibit_unstable_v1 CLIENT protocol
## ############################################
## 
## Interfaces
## ==========
## 
## * zwp_idle_inhibit_manager_v1
## * zwp_idle_inhibitor_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2015 Samsung Electronics Co., Ltd
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(zwpIdleInhibitManagerV1: ptr ZwpIdleInhibitManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpIdleInhibitManagerV1).set_user_data(user_data)
proc getUserData*(zwpIdleInhibitManagerV1: ptr ZwpIdleInhibitManagerV1): pointer {.inline.} =
  cast[ptr Proxy](zwpIdleInhibitManagerV1).get_user_data()
proc getVersion*(zwpIdleInhibitManagerV1: ptr ZwpIdleInhibitManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpIdleInhibitManagerV1).get_version()
proc destroy*(zwpIdleInhibitManagerV1: ptr ZwpIdleInhibitManagerV1) {.inline.} =
  ## destroy the idle inhibitor object
  ## 
  ## Destroy the inhibit manager.
  ## 
  cast[ptr Proxy](zwpIdleInhibitManagerV1).marshal_flags(ZwpIdleInhibitManagerV1Request_destroy.ord, nil, cast[ptr Proxy](zwpIdleInhibitManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc createInhibitor*(zwpIdleInhibitManagerV1: ptr ZwpIdleInhibitManagerV1; surface: ptr Surface): ptr ZwpIdleInhibitorV1 {.inline.} =
  ## create a new inhibitor object
  ## 
  ## Create a new inhibitor object associated with the given surface.
  ## 
  cast[ptr ZwpIdleInhibitorV1](cast[ptr Proxy](zwpIdleInhibitManagerV1).marshal_flags(ZwpIdleInhibitManagerV1Request_create_inhibitor.ord, addr zwp_idle_inhibitor_v1_interface, cast[ptr Proxy](zwpIdleInhibitManagerV1).get_version(), 0, nil, surface))
proc setUserData*(zwpIdleInhibitorV1: ptr ZwpIdleInhibitorV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpIdleInhibitorV1).set_user_data(user_data)
proc getUserData*(zwpIdleInhibitorV1: ptr ZwpIdleInhibitorV1): pointer {.inline.} =
  cast[ptr Proxy](zwpIdleInhibitorV1).get_user_data()
proc getVersion*(zwpIdleInhibitorV1: ptr ZwpIdleInhibitorV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpIdleInhibitorV1).get_version()
proc destroy*(zwpIdleInhibitorV1: ptr ZwpIdleInhibitorV1) {.inline.} =
  ## destroy the idle inhibitor object
  ## 
  ## Remove the inhibitor effect from the associated wl_surface.
  ## 
  cast[ptr Proxy](zwpIdleInhibitorV1).marshal_flags(ZwpIdleInhibitorV1Request_destroy.ord, nil, cast[ptr Proxy](zwpIdleInhibitorV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
