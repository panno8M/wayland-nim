# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import code
export code

## The pointer_gestures_unstable_v1 SERVER protocol
## ################################################
## 
## Interfaces
## ==========
## 
## * zwp_pointer_gestures_v1
## * zwp_pointer_gesture_swipe_v1
## * zwp_pointer_gesture_pinch_v1
## * zwp_pointer_gesture_hold_v1

type ZwpPointerGesturesV1Interface* = object
  getSwipeGesture*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    pointer: ptr Resource;
  ) {.nimcall.}
  getPinchGesture*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    pointer: ptr Resource;
  ) {.nimcall.}
  release*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  getHoldGesture*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    pointer: ptr Resource;
  ) {.nimcall.}

type ZwpPointerGestureSwipeV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc zwpPointerGestureSwipeV1SendBegin*(resource: ptr Resource; serial: uint32; time: uint32; surface: ptr Resource; fingers: uint32) {.inline, exportc: "zwp_pointer_gesture_swipe_v1_send_begin".} =
  ## Sends an begin event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *fingers*: number of fingers
  resource.post_event(ZwpPointerGestureSwipeV1Event_begin.ord, serial, time, surface, fingers)

proc zwpPointerGestureSwipeV1SendUpdate*(resource: ptr Resource; time: uint32; dx: Fixed; dy: Fixed) {.inline, exportc: "zwp_pointer_gesture_swipe_v1_send_update".} =
  ## Sends an update event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *dx*: delta x coordinate in surface coordinate space
  ## * *dy*: delta y coordinate in surface coordinate space
  resource.post_event(ZwpPointerGestureSwipeV1Event_update.ord, time, dx, dy)

proc zwpPointerGestureSwipeV1SendEnd*(resource: ptr Resource; serial: uint32; time: uint32; cancelled: int32) {.inline, exportc: "zwp_pointer_gesture_swipe_v1_send_end".} =
  ## Sends an end event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *cancelled*: 1 if the gesture was cancelled, 0 otherwise
  resource.post_event(ZwpPointerGestureSwipeV1Event_end.ord, serial, time, cancelled)

type ZwpPointerGesturePinchV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc zwpPointerGesturePinchV1SendBegin*(resource: ptr Resource; serial: uint32; time: uint32; surface: ptr Resource; fingers: uint32) {.inline, exportc: "zwp_pointer_gesture_pinch_v1_send_begin".} =
  ## Sends an begin event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *fingers*: number of fingers
  resource.post_event(ZwpPointerGesturePinchV1Event_begin.ord, serial, time, surface, fingers)

proc zwpPointerGesturePinchV1SendUpdate*(resource: ptr Resource; time: uint32; dx: Fixed; dy: Fixed; scale: Fixed; rotation: Fixed) {.inline, exportc: "zwp_pointer_gesture_pinch_v1_send_update".} =
  ## Sends an update event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *dx*: delta x coordinate in surface coordinate space
  ## * *dy*: delta y coordinate in surface coordinate space
  ## * *scale*: scale relative to the initial finger position
  ## * *rotation*: angle in degrees cw relative to the previous event
  resource.post_event(ZwpPointerGesturePinchV1Event_update.ord, time, dx, dy, scale, rotation)

proc zwpPointerGesturePinchV1SendEnd*(resource: ptr Resource; serial: uint32; time: uint32; cancelled: int32) {.inline, exportc: "zwp_pointer_gesture_pinch_v1_send_end".} =
  ## Sends an end event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *cancelled*: 1 if the gesture was cancelled, 0 otherwise
  resource.post_event(ZwpPointerGesturePinchV1Event_end.ord, serial, time, cancelled)

type ZwpPointerGestureHoldV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc zwpPointerGestureHoldV1SendBegin*(resource: ptr Resource; serial: uint32; time: uint32; surface: ptr Resource; fingers: uint32) {.inline, exportc: "zwp_pointer_gesture_hold_v1_send_begin".} =
  ## Sends an begin event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *fingers*: number of fingers
  resource.post_event(ZwpPointerGestureHoldV1Event_begin.ord, serial, time, surface, fingers)

proc zwpPointerGestureHoldV1SendEnd*(resource: ptr Resource; serial: uint32; time: uint32; cancelled: int32) {.inline, exportc: "zwp_pointer_gesture_hold_v1_send_end".} =
  ## Sends an end event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *cancelled*: 1 if the gesture was cancelled, 0 otherwise
  resource.post_event(ZwpPointerGestureHoldV1Event_end.ord, serial, time, cancelled)

