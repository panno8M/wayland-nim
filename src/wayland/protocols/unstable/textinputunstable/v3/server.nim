# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import code
export code

## The text_input_unstable_v3 SERVER protocol
## ##########################################
## 
## Interfaces
## ==========
## 
## * zwp_text_input_v3
## * zwp_text_input_manager_v3
## 
## Copyright
## =========
## 
## Copyright © 2012, 2013 Intel Corporation
## Copyright © 2015, 2016 Jan Arne Petersen
## Copyright © 2017, 2018 Red Hat, Inc.
## Copyright © 2018       Purism SPC
## 
## Permission to use, copy, modify, distribute, and sell this
## software and its documentation for any purpose is hereby granted
## without fee, provided that the above copyright notice appear in
## all copies and that both that copyright notice and this permission
## notice appear in supporting documentation, and that the name of
## the copyright holders not be used in advertising or publicity
## pertaining to distribution of the software without specific,
## written prior permission.  The copyright holders make no
## representations about the suitability of this software for any
## purpose.  It is provided "as is" without express or implied
## warranty.
## 
## THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
## SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
## FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
## SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
## WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
## AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
## ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
## THIS SOFTWARE.
## 

type ZwpTextInputV3Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  enable*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  disable*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  setSurroundingText*: proc(
    client: ptr Client;
    resource: ptr Resource;
    text: cstring;
    cursor: int32;
    anchor: int32;
  ) {.nimcall.}
  setTextChangeCause*: proc(
    client: ptr Client;
    resource: ptr Resource;
    cause: uint32;
  ) {.nimcall.}
  setContentType*: proc(
    client: ptr Client;
    resource: ptr Resource;
    hint: uint32;
    purpose: uint32;
  ) {.nimcall.}
  setCursorRectangle*: proc(
    client: ptr Client;
    resource: ptr Resource;
    x: int32;
    y: int32;
    width: int32;
    height: int32;
  ) {.nimcall.}
  commit*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc zwpTextInputV3SendEnter*(resource: ptr Resource; surface: ptr Resource) {.inline, exportc: "zwp_text_input_v3_send_enter".} =
  ## Sends an enter event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTextInputV3Event_enter.ord, surface)

proc zwpTextInputV3SendLeave*(resource: ptr Resource; surface: ptr Resource) {.inline, exportc: "zwp_text_input_v3_send_leave".} =
  ## Sends an leave event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTextInputV3Event_leave.ord, surface)

proc zwpTextInputV3SendPreeditString*(resource: ptr Resource; text: cstring; cursorBegin: int32; cursorEnd: int32) {.inline, exportc: "zwp_text_input_v3_send_preedit_string".} =
  ## Sends an preedit_string event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTextInputV3Event_preedit_string.ord, text, cursorBegin, cursorEnd)

proc zwpTextInputV3SendCommitString*(resource: ptr Resource; text: cstring) {.inline, exportc: "zwp_text_input_v3_send_commit_string".} =
  ## Sends an commit_string event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTextInputV3Event_commit_string.ord, text)

proc zwpTextInputV3SendDeleteSurroundingText*(resource: ptr Resource; beforeLength: uint32; afterLength: uint32) {.inline, exportc: "zwp_text_input_v3_send_delete_surrounding_text".} =
  ## Sends an delete_surrounding_text event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *before_length*: length of text before current cursor position
  ## * *after_length*: length of text after current cursor position
  resource.post_event(ZwpTextInputV3Event_delete_surrounding_text.ord, beforeLength, afterLength)

proc zwpTextInputV3SendDone*(resource: ptr Resource; serial: uint32) {.inline, exportc: "zwp_text_input_v3_send_done".} =
  ## Sends an done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTextInputV3Event_done.ord, serial)

type ZwpTextInputManagerV3Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  getTextInput*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    seat: ptr Resource;
  ) {.nimcall.}

