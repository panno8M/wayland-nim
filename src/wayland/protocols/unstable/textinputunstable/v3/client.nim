# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The text_input_unstable_v3 CLIENT protocol
## ##########################################
## 
## Interfaces
## ==========
## 
## * zwp_text_input_v3
## * zwp_text_input_manager_v3
## 
## Copyright
## =========
## 
## Copyright © 2012, 2013 Intel Corporation
## Copyright © 2015, 2016 Jan Arne Petersen
## Copyright © 2017, 2018 Red Hat, Inc.
## Copyright © 2018       Purism SPC
## 
## Permission to use, copy, modify, distribute, and sell this
## software and its documentation for any purpose is hereby granted
## without fee, provided that the above copyright notice appear in
## all copies and that both that copyright notice and this permission
## notice appear in supporting documentation, and that the name of
## the copyright holders not be used in advertising or publicity
## pertaining to distribution of the software without specific,
## written prior permission.  The copyright holders make no
## representations about the suitability of this software for any
## purpose.  It is provided "as is" without express or implied
## warranty.
## 
## THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
## SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
## FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
## SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
## WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
## AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
## ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
## THIS SOFTWARE.
## 

type ZwpTextInputV3Listener* = object
  enter*: proc(
    data: pointer;
    zwpTextInputV3: ptr ZwpTextInputV3;
    surface: ptr Surface;
  ) {.nimcall.}
  leave*: proc(
    data: pointer;
    zwpTextInputV3: ptr ZwpTextInputV3;
    surface: ptr Surface;
  ) {.nimcall.}
  preeditString*: proc(
    data: pointer;
    zwpTextInputV3: ptr ZwpTextInputV3;
    text: cstring;
    cursorBegin: int32;
    cursorEnd: int32;
  ) {.nimcall.}
  commitString*: proc(
    data: pointer;
    zwpTextInputV3: ptr ZwpTextInputV3;
    text: cstring;
  ) {.nimcall.}
  deleteSurroundingText*: proc(
    data: pointer;
    zwpTextInputV3: ptr ZwpTextInputV3;
    beforeLength: uint32;
    afterLength: uint32;
  ) {.nimcall.}
  done*: proc(
    data: pointer;
    zwpTextInputV3: ptr ZwpTextInputV3;
    serial: uint32;
  ) {.nimcall.}
proc addListener*(zwpTextInputV3: ptr ZwpTextInputV3; listener: ptr ZwpTextInputV3Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpTextInputV3).add_listener(listener, data)

proc setUserData*(zwpTextInputV3: ptr ZwpTextInputV3; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTextInputV3).set_user_data(user_data)
proc getUserData*(zwpTextInputV3: ptr ZwpTextInputV3): pointer {.inline.} =
  cast[ptr Proxy](zwpTextInputV3).get_user_data()
proc getVersion*(zwpTextInputV3: ptr ZwpTextInputV3): uint32 {.inline.} =
  cast[ptr Proxy](zwpTextInputV3).get_version()
proc destroy*(zwpTextInputV3: ptr ZwpTextInputV3) {.inline.} =
  ## Destroy the wp_text_input
  ## 
  ## Destroy the wp_text_input object. Also disables all surfaces enabled
  ## through this wp_text_input object.
  ## 
  cast[ptr Proxy](zwpTextInputV3).marshal_flags(ZwpTextInputV3Request_destroy.ord, nil, cast[ptr Proxy](zwpTextInputV3).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc enable*(zwpTextInputV3: ptr ZwpTextInputV3) {.inline.} =
  ## Request text input to be enabled
  ## 
  ## Requests text input on the surface previously obtained from the enter
  ## event.
  ## 
  ## This request must be issued every time the active text input changes
  ## to a new one, including within the current surface. Use
  ## zwp_text_input_v3.disable when there is no longer any input focus on
  ## the current surface.
  ## 
  ## Clients must not enable more than one text input on the single seat
  ## and should disable the current text input before enabling the new one.
  ## At most one instance of text input may be in enabled state per instance,
  ## Requests to enable the another text input when some text input is active
  ## must be ignored by compositor.
  ## 
  ## This request resets all state associated with previous enable, disable,
  ## set_surrounding_text, set_text_change_cause, set_content_type, and
  ## set_cursor_rectangle requests, as well as the state associated with
  ## preedit_string, commit_string, and delete_surrounding_text events.
  ## 
  ## The set_surrounding_text, set_content_type and set_cursor_rectangle
  ## requests must follow if the text input supports the necessary
  ## functionality.
  ## 
  ## State set with this request is double-buffered. It will get applied on
  ## the next zwp_text_input_v3.commit request, and stay valid until the
  ## next committed enable or disable request.
  ## 
  ## The changes must be applied by the compositor after issuing a
  ## zwp_text_input_v3.commit request.
  ## 
  cast[ptr Proxy](zwpTextInputV3).marshal_flags(ZwpTextInputV3Request_enable.ord, nil, cast[ptr Proxy](zwpTextInputV3).get_version(), 0)
proc disable*(zwpTextInputV3: ptr ZwpTextInputV3) {.inline.} =
  ## Disable text input on a surface
  ## 
  ## Explicitly disable text input on the current surface (typically when
  ## there is no focus on any text entry inside the surface).
  ## 
  ## State set with this request is double-buffered. It will get applied on
  ## the next zwp_text_input_v3.commit request.
  ## 
  cast[ptr Proxy](zwpTextInputV3).marshal_flags(ZwpTextInputV3Request_disable.ord, nil, cast[ptr Proxy](zwpTextInputV3).get_version(), 0)
proc setSurroundingText*(zwpTextInputV3: ptr ZwpTextInputV3; text: cstring; cursor: int32; anchor: int32) {.inline.} =
  ## sets the surrounding text
  ## 
  ## Sets the surrounding plain text around the input, excluding the preedit
  ## text.
  ## 
  ## The client should notify the compositor of any changes in any of the
  ## values carried with this request, including changes caused by handling
  ## incoming text-input events as well as changes caused by other
  ## mechanisms like keyboard typing.
  ## 
  ## If the client is unaware of the text around the cursor, it should not
  ## issue this request, to signify lack of support to the compositor.
  ## 
  ## Text is UTF-8 encoded, and should include the cursor position, the
  ## complete selection and additional characters before and after them.
  ## There is a maximum length of wayland messages, so text can not be
  ## longer than 4000 bytes.
  ## 
  ## Cursor is the byte offset of the cursor within text buffer.
  ## 
  ## Anchor is the byte offset of the selection anchor within text buffer.
  ## If there is no selected text, anchor is the same as cursor.
  ## 
  ## If any preedit text is present, it is replaced with a cursor for the
  ## purpose of this event.
  ## 
  ## Values set with this request are double-buffered. They will get applied
  ## on the next zwp_text_input_v3.commit request, and stay valid until the
  ## next committed enable or disable request.
  ## 
  ## The initial state for affected fields is empty, meaning that the text
  ## input does not support sending surrounding text. If the empty values
  ## get applied, subsequent attempts to change them may have no effect.
  ## 
  cast[ptr Proxy](zwpTextInputV3).marshal_flags(ZwpTextInputV3Request_set_surrounding_text.ord, nil, cast[ptr Proxy](zwpTextInputV3).get_version(), 0, text, cursor, anchor)
proc setTextChangeCause*(zwpTextInputV3: ptr ZwpTextInputV3; cause: uint32) {.inline.} =
  ## indicates the cause of surrounding text change
  ## 
  ## Tells the compositor why the text surrounding the cursor changed.
  ## 
  ## Whenever the client detects an external change in text, cursor, or
  ## anchor posision, it must issue this request to the compositor. This
  ## request is intended to give the input method a chance to update the
  ## preedit text in an appropriate way, e.g. by removing it when the user
  ## starts typing with a keyboard.
  ## 
  ## cause describes the source of the change.
  ## 
  ## The value set with this request is double-buffered. It must be applied
  ## and reset to initial at the next zwp_text_input_v3.commit request.
  ## 
  ## The initial value of cause is input_method.
  ## 
  cast[ptr Proxy](zwpTextInputV3).marshal_flags(ZwpTextInputV3Request_set_text_change_cause.ord, nil, cast[ptr Proxy](zwpTextInputV3).get_version(), 0, cause)
proc setContentType*(zwpTextInputV3: ptr ZwpTextInputV3; hint: uint32; purpose: uint32) {.inline.} =
  ## set content purpose and hint
  ## 
  ## Sets the content purpose and content hint. While the purpose is the
  ## basic purpose of an input field, the hint flags allow to modify some of
  ## the behavior.
  ## 
  ## Values set with this request are double-buffered. They will get applied
  ## on the next zwp_text_input_v3.commit request.
  ## Subsequent attempts to update them may have no effect. The values
  ## remain valid until the next committed enable or disable request.
  ## 
  ## The initial value for hint is none, and the initial value for purpose
  ## is normal.
  ## 
  cast[ptr Proxy](zwpTextInputV3).marshal_flags(ZwpTextInputV3Request_set_content_type.ord, nil, cast[ptr Proxy](zwpTextInputV3).get_version(), 0, hint, purpose)
proc setCursorRectangle*(zwpTextInputV3: ptr ZwpTextInputV3; x: int32; y: int32; width: int32; height: int32) {.inline.} =
  ## set cursor position
  ## 
  ## Marks an area around the cursor as a x, y, width, height rectangle in
  ## surface local coordinates.
  ## 
  ## Allows the compositor to put a window with word suggestions near the
  ## cursor, without obstructing the text being input.
  ## 
  ## If the client is unaware of the position of edited text, it should not
  ## issue this request, to signify lack of support to the compositor.
  ## 
  ## Values set with this request are double-buffered. They will get applied
  ## on the next zwp_text_input_v3.commit request, and stay valid until the
  ## next committed enable or disable request.
  ## 
  ## The initial values describing a cursor rectangle are empty. That means
  ## the text input does not support describing the cursor area. If the
  ## empty values get applied, subsequent attempts to change them may have
  ## no effect.
  ## 
  cast[ptr Proxy](zwpTextInputV3).marshal_flags(ZwpTextInputV3Request_set_cursor_rectangle.ord, nil, cast[ptr Proxy](zwpTextInputV3).get_version(), 0, x, y, width, height)
proc commit*(zwpTextInputV3: ptr ZwpTextInputV3) {.inline.} =
  ## commit state
  ## 
  ## Atomically applies state changes recently sent to the compositor.
  ## 
  ## The commit request establishes and updates the state of the client, and
  ## must be issued after any changes to apply them.
  ## 
  ## Text input state (enabled status, content purpose, content hint,
  ## surrounding text and change cause, cursor rectangle) is conceptually
  ## double-buffered within the context of a text input, i.e. between a
  ## committed enable request and the following committed enable or disable
  ## request.
  ## 
  ## Protocol requests modify the pending state, as opposed to the current
  ## state in use by the input method. A commit request atomically applies
  ## all pending state, replacing the current state. After commit, the new
  ## pending state is as documented for each related request.
  ## 
  ## Requests are applied in the order of arrival.
  ## 
  ## Neither current nor pending state are modified unless noted otherwise.
  ## 
  ## The compositor must count the number of commit requests coming from
  ## each zwp_text_input_v3 object and use the count as the serial in done
  ## events.
  ## 
  cast[ptr Proxy](zwpTextInputV3).marshal_flags(ZwpTextInputV3Request_commit.ord, nil, cast[ptr Proxy](zwpTextInputV3).get_version(), 0)
proc setUserData*(zwpTextInputManagerV3: ptr ZwpTextInputManagerV3; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTextInputManagerV3).set_user_data(user_data)
proc getUserData*(zwpTextInputManagerV3: ptr ZwpTextInputManagerV3): pointer {.inline.} =
  cast[ptr Proxy](zwpTextInputManagerV3).get_user_data()
proc getVersion*(zwpTextInputManagerV3: ptr ZwpTextInputManagerV3): uint32 {.inline.} =
  cast[ptr Proxy](zwpTextInputManagerV3).get_version()
proc destroy*(zwpTextInputManagerV3: ptr ZwpTextInputManagerV3) {.inline.} =
  ## Destroy the wp_text_input_manager
  ## 
  ## Destroy the wp_text_input_manager object.
  ## 
  cast[ptr Proxy](zwpTextInputManagerV3).marshal_flags(ZwpTextInputManagerV3Request_destroy.ord, nil, cast[ptr Proxy](zwpTextInputManagerV3).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getTextInput*(zwpTextInputManagerV3: ptr ZwpTextInputManagerV3; seat: ptr Seat): ptr ZwpTextInputV3 {.inline.} =
  ## create a new text input object
  ## 
  ## Creates a new text-input object for a given seat.
  ## 
  cast[ptr ZwpTextInputV3](cast[ptr Proxy](zwpTextInputManagerV3).marshal_flags(ZwpTextInputManagerV3Request_get_text_input.ord, addr zwp_text_input_v3_interface, cast[ptr Proxy](zwpTextInputManagerV3).get_version(), 0, nil, seat))
