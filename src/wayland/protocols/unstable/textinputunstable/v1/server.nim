# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import code
export code

## The text_input_unstable_v1 SERVER protocol
## ##########################################
## 
## Interfaces
## ==========
## 
## * zwp_text_input_v1
## * zwp_text_input_manager_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2012, 2013 Intel Corporation
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type ZwpTextInputV1Interface* = object
  activate*: proc(
    client: ptr Client;
    resource: ptr Resource;
    seat: ptr Resource;
    surface: ptr Resource;
  ) {.nimcall.}
  deactivate*: proc(
    client: ptr Client;
    resource: ptr Resource;
    seat: ptr Resource;
  ) {.nimcall.}
  showInputPanel*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  hideInputPanel*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  reset*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  setSurroundingText*: proc(
    client: ptr Client;
    resource: ptr Resource;
    text: cstring;
    cursor: uint32;
    anchor: uint32;
  ) {.nimcall.}
  setContentType*: proc(
    client: ptr Client;
    resource: ptr Resource;
    hint: uint32;
    purpose: uint32;
  ) {.nimcall.}
  setCursorRectangle*: proc(
    client: ptr Client;
    resource: ptr Resource;
    x: int32;
    y: int32;
    width: int32;
    height: int32;
  ) {.nimcall.}
  setPreferredLanguage*: proc(
    client: ptr Client;
    resource: ptr Resource;
    language: cstring;
  ) {.nimcall.}
  commitState*: proc(
    client: ptr Client;
    resource: ptr Resource;
    serial: uint32;
  ) {.nimcall.}
  invokeAction*: proc(
    client: ptr Client;
    resource: ptr Resource;
    button: uint32;
    index: uint32;
  ) {.nimcall.}

proc zwpTextInputV1SendEnter*(resource: ptr Resource; surface: ptr Resource) {.inline, exportc: "zwp_text_input_v1_send_enter".} =
  ## Sends an enter event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTextInputV1Event_enter.ord, surface)

proc zwpTextInputV1SendLeave*(resource: ptr Resource) {.inline, exportc: "zwp_text_input_v1_send_leave".} =
  ## Sends an leave event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTextInputV1Event_leave.ord)

proc zwpTextInputV1SendModifiersMap*(resource: ptr Resource; map: ptr Array) {.inline, exportc: "zwp_text_input_v1_send_modifiers_map".} =
  ## Sends an modifiers_map event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTextInputV1Event_modifiers_map.ord, map)

proc zwpTextInputV1SendInputPanelState*(resource: ptr Resource; state: uint32) {.inline, exportc: "zwp_text_input_v1_send_input_panel_state".} =
  ## Sends an input_panel_state event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTextInputV1Event_input_panel_state.ord, state)

proc zwpTextInputV1SendPreeditString*(resource: ptr Resource; serial: uint32; text: cstring; commit: cstring) {.inline, exportc: "zwp_text_input_v1_send_preedit_string".} =
  ## Sends an preedit_string event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial of the latest known text input state
  resource.post_event(ZwpTextInputV1Event_preedit_string.ord, serial, text, commit)

proc zwpTextInputV1SendPreeditStyling*(resource: ptr Resource; index: uint32; length: uint32; style: uint32) {.inline, exportc: "zwp_text_input_v1_send_preedit_styling".} =
  ## Sends an preedit_styling event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTextInputV1Event_preedit_styling.ord, index, length, style)

proc zwpTextInputV1SendPreeditCursor*(resource: ptr Resource; index: int32) {.inline, exportc: "zwp_text_input_v1_send_preedit_cursor".} =
  ## Sends an preedit_cursor event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTextInputV1Event_preedit_cursor.ord, index)

proc zwpTextInputV1SendCommitString*(resource: ptr Resource; serial: uint32; text: cstring) {.inline, exportc: "zwp_text_input_v1_send_commit_string".} =
  ## Sends an commit_string event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial of the latest known text input state
  resource.post_event(ZwpTextInputV1Event_commit_string.ord, serial, text)

proc zwpTextInputV1SendCursorPosition*(resource: ptr Resource; index: int32; anchor: int32) {.inline, exportc: "zwp_text_input_v1_send_cursor_position".} =
  ## Sends an cursor_position event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTextInputV1Event_cursor_position.ord, index, anchor)

proc zwpTextInputV1SendDeleteSurroundingText*(resource: ptr Resource; index: int32; length: uint32) {.inline, exportc: "zwp_text_input_v1_send_delete_surrounding_text".} =
  ## Sends an delete_surrounding_text event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpTextInputV1Event_delete_surrounding_text.ord, index, length)

proc zwpTextInputV1SendKeysym*(resource: ptr Resource; serial: uint32; time: uint32; sym: uint32; state: uint32; modifiers: uint32) {.inline, exportc: "zwp_text_input_v1_send_keysym".} =
  ## Sends an keysym event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial of the latest known text input state
  resource.post_event(ZwpTextInputV1Event_keysym.ord, serial, time, sym, state, modifiers)

proc zwpTextInputV1SendLanguage*(resource: ptr Resource; serial: uint32; language: cstring) {.inline, exportc: "zwp_text_input_v1_send_language".} =
  ## Sends an language event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial of the latest known text input state
  resource.post_event(ZwpTextInputV1Event_language.ord, serial, language)

proc zwpTextInputV1SendTextDirection*(resource: ptr Resource; serial: uint32; direction: uint32) {.inline, exportc: "zwp_text_input_v1_send_text_direction".} =
  ## Sends an text_direction event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial of the latest known text input state
  resource.post_event(ZwpTextInputV1Event_text_direction.ord, serial, direction)

type ZwpTextInputManagerV1Interface* = object
  createTextInput*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
  ) {.nimcall.}

