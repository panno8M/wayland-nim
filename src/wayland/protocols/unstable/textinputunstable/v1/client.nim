# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The text_input_unstable_v1 CLIENT protocol
## ##########################################
## 
## Interfaces
## ==========
## 
## * zwp_text_input_v1
## * zwp_text_input_manager_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2012, 2013 Intel Corporation
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type ZwpTextInputV1Listener* = object
  enter*: proc(
    data: pointer;
    zwpTextInputV1: ptr ZwpTextInputV1;
    surface: ptr Surface;
  ) {.nimcall.}
  leave*: proc(
    data: pointer;
    zwpTextInputV1: ptr ZwpTextInputV1;
  ) {.nimcall.}
  modifiersMap*: proc(
    data: pointer;
    zwpTextInputV1: ptr ZwpTextInputV1;
    map: ptr Array;
  ) {.nimcall.}
  inputPanelState*: proc(
    data: pointer;
    zwpTextInputV1: ptr ZwpTextInputV1;
    state: uint32;
  ) {.nimcall.}
  preeditString*: proc(
    data: pointer;
    zwpTextInputV1: ptr ZwpTextInputV1;
    serial: uint32;
    text: cstring;
    commit: cstring;
  ) {.nimcall.}
  preeditStyling*: proc(
    data: pointer;
    zwpTextInputV1: ptr ZwpTextInputV1;
    index: uint32;
    length: uint32;
    style: uint32;
  ) {.nimcall.}
  preeditCursor*: proc(
    data: pointer;
    zwpTextInputV1: ptr ZwpTextInputV1;
    index: int32;
  ) {.nimcall.}
  commitString*: proc(
    data: pointer;
    zwpTextInputV1: ptr ZwpTextInputV1;
    serial: uint32;
    text: cstring;
  ) {.nimcall.}
  cursorPosition*: proc(
    data: pointer;
    zwpTextInputV1: ptr ZwpTextInputV1;
    index: int32;
    anchor: int32;
  ) {.nimcall.}
  deleteSurroundingText*: proc(
    data: pointer;
    zwpTextInputV1: ptr ZwpTextInputV1;
    index: int32;
    length: uint32;
  ) {.nimcall.}
  keysym*: proc(
    data: pointer;
    zwpTextInputV1: ptr ZwpTextInputV1;
    serial: uint32;
    time: uint32;
    sym: uint32;
    state: uint32;
    modifiers: uint32;
  ) {.nimcall.}
  language*: proc(
    data: pointer;
    zwpTextInputV1: ptr ZwpTextInputV1;
    serial: uint32;
    language: cstring;
  ) {.nimcall.}
  textDirection*: proc(
    data: pointer;
    zwpTextInputV1: ptr ZwpTextInputV1;
    serial: uint32;
    direction: uint32;
  ) {.nimcall.}
proc addListener*(zwpTextInputV1: ptr ZwpTextInputV1; listener: ptr ZwpTextInputV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpTextInputV1).add_listener(listener, data)

proc setUserData*(zwpTextInputV1: ptr ZwpTextInputV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTextInputV1).set_user_data(user_data)
proc getUserData*(zwpTextInputV1: ptr ZwpTextInputV1): pointer {.inline.} =
  cast[ptr Proxy](zwpTextInputV1).get_user_data()
proc getVersion*(zwpTextInputV1: ptr ZwpTextInputV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpTextInputV1).get_version()
proc destroy*(zwpTextInputV1: ptr ZwpTextInputV1) {.inline.} =
  destroy cast[ptr Proxy](zwpTextInputV1)
proc activate*(zwpTextInputV1: ptr ZwpTextInputV1; seat: ptr Seat; surface: ptr Surface) {.inline.} =
  ## request activation
  ## 
  ## Requests the text_input object to be activated (typically when the
  ## 	text entry gets focus).
  ## 
  ## 	The seat argument is a wl_seat which maintains the focus for this
  ## 	activation. The surface argument is a wl_surface assigned to the
  ## 	text_input object and tracked for focus lost. The enter event
  ## 	is emitted on successful activation.
  ## 
  cast[ptr Proxy](zwpTextInputV1).marshal_flags(ZwpTextInputV1Request_activate.ord, nil, cast[ptr Proxy](zwpTextInputV1).get_version(), 0, seat, surface)
proc deactivate*(zwpTextInputV1: ptr ZwpTextInputV1; seat: ptr Seat) {.inline.} =
  ## request deactivation
  ## 
  ## Requests the text_input object to be deactivated (typically when the
  ## 	text entry lost focus). The seat argument is a wl_seat which was used
  ## 	for activation.
  ## 
  cast[ptr Proxy](zwpTextInputV1).marshal_flags(ZwpTextInputV1Request_deactivate.ord, nil, cast[ptr Proxy](zwpTextInputV1).get_version(), 0, seat)
proc showInputPanel*(zwpTextInputV1: ptr ZwpTextInputV1) {.inline.} =
  ## show input panels
  ## 
  ## Requests input panels (virtual keyboard) to show.
  ## 
  cast[ptr Proxy](zwpTextInputV1).marshal_flags(ZwpTextInputV1Request_show_input_panel.ord, nil, cast[ptr Proxy](zwpTextInputV1).get_version(), 0)
proc hideInputPanel*(zwpTextInputV1: ptr ZwpTextInputV1) {.inline.} =
  ## hide input panels
  ## 
  ## Requests input panels (virtual keyboard) to hide.
  ## 
  cast[ptr Proxy](zwpTextInputV1).marshal_flags(ZwpTextInputV1Request_hide_input_panel.ord, nil, cast[ptr Proxy](zwpTextInputV1).get_version(), 0)
proc reset*(zwpTextInputV1: ptr ZwpTextInputV1) {.inline.} =
  ## reset
  ## 
  ## Should be called by an editor widget when the input state should be
  ## 	reset, for example after the text was changed outside of the normal
  ## 	input method flow.
  ## 
  cast[ptr Proxy](zwpTextInputV1).marshal_flags(ZwpTextInputV1Request_reset.ord, nil, cast[ptr Proxy](zwpTextInputV1).get_version(), 0)
proc setSurroundingText*(zwpTextInputV1: ptr ZwpTextInputV1; text: cstring; cursor: uint32; anchor: uint32) {.inline.} =
  ## sets the surrounding text
  ## 
  ## Sets the plain surrounding text around the input position. Text is
  ## 	UTF-8 encoded. Cursor is the byte offset within the
  ## 	surrounding text. Anchor is the byte offset of the
  ## 	selection anchor within the surrounding text. If there is no selected
  ## 	text anchor, then it is the same as cursor.
  ## 
  cast[ptr Proxy](zwpTextInputV1).marshal_flags(ZwpTextInputV1Request_set_surrounding_text.ord, nil, cast[ptr Proxy](zwpTextInputV1).get_version(), 0, text, cursor, anchor)
proc setContentType*(zwpTextInputV1: ptr ZwpTextInputV1; hint: uint32; purpose: uint32) {.inline.} =
  ## set content purpose and hint
  ## 
  ## Sets the content purpose and content hint. While the purpose is the
  ## 	basic purpose of an input field, the hint flags allow to modify some
  ## 	of the behavior.
  ## 
  ## 	When no content type is explicitly set, a normal content purpose with
  ## 	default hints (auto completion, auto correction, auto capitalization)
  ## 	should be assumed.
  ## 
  cast[ptr Proxy](zwpTextInputV1).marshal_flags(ZwpTextInputV1Request_set_content_type.ord, nil, cast[ptr Proxy](zwpTextInputV1).get_version(), 0, hint, purpose)
proc setCursorRectangle*(zwpTextInputV1: ptr ZwpTextInputV1; x: int32; y: int32; width: int32; height: int32) {.inline.} =
  cast[ptr Proxy](zwpTextInputV1).marshal_flags(ZwpTextInputV1Request_set_cursor_rectangle.ord, nil, cast[ptr Proxy](zwpTextInputV1).get_version(), 0, x, y, width, height)
proc setPreferredLanguage*(zwpTextInputV1: ptr ZwpTextInputV1; language: cstring) {.inline.} =
  ## sets preferred language
  ## 
  ## Sets a specific language. This allows for example a virtual keyboard to
  ## 	show a language specific layout. The "language" argument is an RFC-3066
  ## 	format language tag.
  ## 
  ## 	It could be used for example in a word processor to indicate the
  ## 	language of the currently edited document or in an instant message
  ## 	application which tracks languages of contacts.
  ## 
  cast[ptr Proxy](zwpTextInputV1).marshal_flags(ZwpTextInputV1Request_set_preferred_language.ord, nil, cast[ptr Proxy](zwpTextInputV1).get_version(), 0, language)
proc commitState*(zwpTextInputV1: ptr ZwpTextInputV1; serial: uint32) {.inline.} =
  cast[ptr Proxy](zwpTextInputV1).marshal_flags(ZwpTextInputV1Request_commit_state.ord, nil, cast[ptr Proxy](zwpTextInputV1).get_version(), 0, serial)
proc invokeAction*(zwpTextInputV1: ptr ZwpTextInputV1; button: uint32; index: uint32) {.inline.} =
  cast[ptr Proxy](zwpTextInputV1).marshal_flags(ZwpTextInputV1Request_invoke_action.ord, nil, cast[ptr Proxy](zwpTextInputV1).get_version(), 0, button, index)
proc setUserData*(zwpTextInputManagerV1: ptr ZwpTextInputManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpTextInputManagerV1).set_user_data(user_data)
proc getUserData*(zwpTextInputManagerV1: ptr ZwpTextInputManagerV1): pointer {.inline.} =
  cast[ptr Proxy](zwpTextInputManagerV1).get_user_data()
proc getVersion*(zwpTextInputManagerV1: ptr ZwpTextInputManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpTextInputManagerV1).get_version()
proc destroy*(zwpTextInputManagerV1: ptr ZwpTextInputManagerV1) {.inline.} =
  destroy cast[ptr Proxy](zwpTextInputManagerV1)
proc createTextInput*(zwpTextInputManagerV1: ptr ZwpTextInputManagerV1): ptr ZwpTextInputV1 {.inline.} =
  ## create text input
  ## 
  ## Creates a new text_input object.
  ## 
  cast[ptr ZwpTextInputV1](cast[ptr Proxy](zwpTextInputManagerV1).marshal_flags(ZwpTextInputManagerV1Request_create_text_input.ord, addr zwp_text_input_v1_interface, cast[ptr Proxy](zwpTextInputManagerV1).get_version(), 0, nil))
