# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The xwayland_keyboard_grab_unstable_v1 CLIENT protocol
## ######################################################
## 
## Interfaces
## ==========
## 
## * zwp_xwayland_keyboard_grab_manager_v1
## * zwp_xwayland_keyboard_grab_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2017 Red Hat Inc.
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(zwpXwaylandKeyboardGrabManagerV1: ptr ZwpXwaylandKeyboardGrabManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpXwaylandKeyboardGrabManagerV1).set_user_data(user_data)
proc getUserData*(zwpXwaylandKeyboardGrabManagerV1: ptr ZwpXwaylandKeyboardGrabManagerV1): pointer {.inline.} =
  cast[ptr Proxy](zwpXwaylandKeyboardGrabManagerV1).get_user_data()
proc getVersion*(zwpXwaylandKeyboardGrabManagerV1: ptr ZwpXwaylandKeyboardGrabManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpXwaylandKeyboardGrabManagerV1).get_version()
proc destroy*(zwpXwaylandKeyboardGrabManagerV1: ptr ZwpXwaylandKeyboardGrabManagerV1) {.inline.} =
  ## destroy the keyboard grab manager
  ## 
  ## Destroy the keyboard grab manager.
  ## 
  cast[ptr Proxy](zwpXwaylandKeyboardGrabManagerV1).marshal_flags(ZwpXwaylandKeyboardGrabManagerV1Request_destroy.ord, nil, cast[ptr Proxy](zwpXwaylandKeyboardGrabManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc grabKeyboard*(zwpXwaylandKeyboardGrabManagerV1: ptr ZwpXwaylandKeyboardGrabManagerV1; surface: ptr Surface; seat: ptr Seat): ptr ZwpXwaylandKeyboardGrabV1 {.inline.} =
  ## grab the keyboard to a surface
  ## 
  ## The grab_keyboard request asks for a grab of the keyboard, forcing
  ## 	the keyboard focus for the given seat upon the given surface.
  ## 
  ## 	The protocol provides no guarantee that the grab is ever satisfied,
  ## 	and does not require the compositor to send an error if the grab
  ## 	cannot ever be satisfied. It is thus possible to request a keyboard
  ## 	grab that will never be effective.
  ## 
  ## 	The protocol:
  ## 
  ## 	* does not guarantee that the grab itself is applied for a surface,
  ## 	  the grab request may be silently ignored by the compositor,
  ## 	* does not guarantee that any events are sent to this client even
  ## 	  if the grab is applied to a surface,
  ## 	* does not guarantee that events sent to this client are exhaustive,
  ## 	  a compositor may filter some events for its own consumption,
  ## 	* does not guarantee that events sent to this client are continuous,
  ## 	  a compositor may change and reroute keyboard events while the grab
  ## 	  is nominally active.
  ## 
  cast[ptr ZwpXwaylandKeyboardGrabV1](cast[ptr Proxy](zwpXwaylandKeyboardGrabManagerV1).marshal_flags(ZwpXwaylandKeyboardGrabManagerV1Request_grab_keyboard.ord, addr zwp_xwayland_keyboard_grab_v1_interface, cast[ptr Proxy](zwpXwaylandKeyboardGrabManagerV1).get_version(), 0, nil, surface, seat))
proc setUserData*(zwpXwaylandKeyboardGrabV1: ptr ZwpXwaylandKeyboardGrabV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpXwaylandKeyboardGrabV1).set_user_data(user_data)
proc getUserData*(zwpXwaylandKeyboardGrabV1: ptr ZwpXwaylandKeyboardGrabV1): pointer {.inline.} =
  cast[ptr Proxy](zwpXwaylandKeyboardGrabV1).get_user_data()
proc getVersion*(zwpXwaylandKeyboardGrabV1: ptr ZwpXwaylandKeyboardGrabV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpXwaylandKeyboardGrabV1).get_version()
proc destroy*(zwpXwaylandKeyboardGrabV1: ptr ZwpXwaylandKeyboardGrabV1) {.inline.} =
  ## destroy the grabbed keyboard object
  ## 
  ## Destroy the grabbed keyboard object. If applicable, the compositor
  ## 	will ungrab the keyboard.
  ## 
  cast[ptr Proxy](zwpXwaylandKeyboardGrabV1).marshal_flags(ZwpXwaylandKeyboardGrabV1Request_destroy.ord, nil, cast[ptr Proxy](zwpXwaylandKeyboardGrabV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
