# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The fullscreen_shell_unstable_v1 CLIENT protocol
## ################################################
## 
## Interfaces
## ==========
## 
## * zwp_fullscreen_shell_v1
## * zwp_fullscreen_shell_mode_feedback_v1
## 
## Copyright
## =========
## 
## Copyright © 2016 Yong Bakos
## Copyright © 2015 Jason Ekstrand
## Copyright © 2015 Jonas Ådahl
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type ZwpFullscreenShellV1Listener* = object
  capability*: proc(
    data: pointer;
    zwpFullscreenShellV1: ptr ZwpFullscreenShellV1;
    capability: uint32;
  ) {.nimcall.}
proc addListener*(zwpFullscreenShellV1: ptr ZwpFullscreenShellV1; listener: ptr ZwpFullscreenShellV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpFullscreenShellV1).add_listener(listener, data)

proc setUserData*(zwpFullscreenShellV1: ptr ZwpFullscreenShellV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpFullscreenShellV1).set_user_data(user_data)
proc getUserData*(zwpFullscreenShellV1: ptr ZwpFullscreenShellV1): pointer {.inline.} =
  cast[ptr Proxy](zwpFullscreenShellV1).get_user_data()
proc getVersion*(zwpFullscreenShellV1: ptr ZwpFullscreenShellV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpFullscreenShellV1).get_version()
proc destroy*(zwpFullscreenShellV1: ptr ZwpFullscreenShellV1) {.inline.} =
  destroy cast[ptr Proxy](zwpFullscreenShellV1)
proc release*(zwpFullscreenShellV1: ptr ZwpFullscreenShellV1) {.inline.} =
  ## release the wl_fullscreen_shell interface
  ## 
  ## Release the binding from the wl_fullscreen_shell interface.
  ## 
  ## 	This destroys the server-side object and frees this binding.  If
  ## 	the client binds to wl_fullscreen_shell multiple times, it may wish
  ## 	to free some of those bindings.
  ## 
  cast[ptr Proxy](zwpFullscreenShellV1).marshal_flags(ZwpFullscreenShellV1Request_release.ord, nil, cast[ptr Proxy](zwpFullscreenShellV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc presentSurface*(zwpFullscreenShellV1: ptr ZwpFullscreenShellV1; surface: ptr Surface; `method`: uint32; output: ptr Output) {.inline.} =
  ## present surface for display
  ## 
  ## Present a surface on the given output.
  ## 
  ## 	If the output is null, the compositor will present the surface on
  ## 	whatever display (or displays) it thinks best.  In particular, this
  ## 	may replace any or all surfaces currently presented so it should
  ## 	not be used in combination with placing surfaces on specific
  ## 	outputs.
  ## 
  ## 	The method parameter is a hint to the compositor for how the surface
  ## 	is to be presented.  In particular, it tells the compositor how to
  ## 	handle a size mismatch between the presented surface and the
  ## 	output.  The compositor is free to ignore this parameter.
  ## 
  ## 	The "zoom", "zoom_crop", and "stretch" methods imply a scaling
  ## 	operation on the surface.  This will override any kind of output
  ## 	scaling, so the buffer_scale property of the surface is effectively
  ## 	ignored.
  ## 
  ## 	This request gives the surface the role of a fullscreen shell surface.
  ## 	If the surface already has another role, it raises a role protocol
  ## 	error.
  ## 
  cast[ptr Proxy](zwpFullscreenShellV1).marshal_flags(ZwpFullscreenShellV1Request_present_surface.ord, nil, cast[ptr Proxy](zwpFullscreenShellV1).get_version(), 0, surface, `method`, output)
proc presentSurfaceForMode*(zwpFullscreenShellV1: ptr ZwpFullscreenShellV1; surface: ptr Surface; output: ptr Output; framerate: int32): ptr ZwpFullscreenShellModeFeedbackV1 {.inline.} =
  ## present surface for display at a particular mode
  ## 
  ## Presents a surface on the given output for a particular mode.
  ## 
  ## 	If the current size of the output differs from that of the surface,
  ## 	the compositor will attempt to change the size of the output to
  ## 	match the surface.  The result of the mode-switch operation will be
  ## 	returned via the provided wl_fullscreen_shell_mode_feedback object.
  ## 
  ## 	If the current output mode matches the one requested or if the
  ## 	compositor successfully switches the mode to match the surface,
  ## 	then the mode_successful event will be sent and the output will
  ## 	contain the contents of the given surface.  If the compositor
  ## 	cannot match the output size to the surface size, the mode_failed
  ## 	will be sent and the output will contain the contents of the
  ## 	previously presented surface (if any).  If another surface is
  ## 	presented on the given output before either of these has a chance
  ## 	to happen, the present_cancelled event will be sent.
  ## 
  ## 	Due to race conditions and other issues unknown to the client, no
  ## 	mode-switch operation is guaranteed to succeed.  However, if the
  ## 	mode is one advertised by wl_output.mode or if the compositor
  ## 	advertises the ARBITRARY_MODES capability, then the client should
  ## 	expect that the mode-switch operation will usually succeed.
  ## 
  ## 	If the size of the presented surface changes, the resulting output
  ## 	is undefined.  The compositor may attempt to change the output mode
  ## 	to compensate.  However, there is no guarantee that a suitable mode
  ## 	will be found and the client has no way to be notified of success
  ## 	or failure.
  ## 
  ## 	The framerate parameter specifies the desired framerate for the
  ## 	output in mHz.  The compositor is free to ignore this parameter.  A
  ## 	value of 0 indicates that the client has no preference.
  ## 
  ## 	If the value of wl_output.scale differs from wl_surface.buffer_scale,
  ## 	then the compositor may choose a mode that matches either the buffer
  ## 	size or the surface size.  In either case, the surface will fill the
  ## 	output.
  ## 
  ## 	This request gives the surface the role of a fullscreen shell surface.
  ## 	If the surface already has another role, it raises a role protocol
  ## 	error.
  ## 
  cast[ptr ZwpFullscreenShellModeFeedbackV1](cast[ptr Proxy](zwpFullscreenShellV1).marshal_flags(ZwpFullscreenShellV1Request_present_surface_for_mode.ord, addr zwp_fullscreen_shell_mode_feedback_v1_interface, cast[ptr Proxy](zwpFullscreenShellV1).get_version(), 0, surface, output, framerate, nil))
type ZwpFullscreenShellModeFeedbackV1Listener* = object
  modeSuccessful*: proc(
    data: pointer;
    zwpFullscreenShellModeFeedbackV1: ptr ZwpFullscreenShellModeFeedbackV1;
  ) {.nimcall.}
  modeFailed*: proc(
    data: pointer;
    zwpFullscreenShellModeFeedbackV1: ptr ZwpFullscreenShellModeFeedbackV1;
  ) {.nimcall.}
  presentCancelled*: proc(
    data: pointer;
    zwpFullscreenShellModeFeedbackV1: ptr ZwpFullscreenShellModeFeedbackV1;
  ) {.nimcall.}
proc addListener*(zwpFullscreenShellModeFeedbackV1: ptr ZwpFullscreenShellModeFeedbackV1; listener: ptr ZwpFullscreenShellModeFeedbackV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zwpFullscreenShellModeFeedbackV1).add_listener(listener, data)

proc setUserData*(zwpFullscreenShellModeFeedbackV1: ptr ZwpFullscreenShellModeFeedbackV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zwpFullscreenShellModeFeedbackV1).set_user_data(user_data)
proc getUserData*(zwpFullscreenShellModeFeedbackV1: ptr ZwpFullscreenShellModeFeedbackV1): pointer {.inline.} =
  cast[ptr Proxy](zwpFullscreenShellModeFeedbackV1).get_user_data()
proc getVersion*(zwpFullscreenShellModeFeedbackV1: ptr ZwpFullscreenShellModeFeedbackV1): uint32 {.inline.} =
  cast[ptr Proxy](zwpFullscreenShellModeFeedbackV1).get_version()
proc destroy*(zwpFullscreenShellModeFeedbackV1: ptr ZwpFullscreenShellModeFeedbackV1) {.inline.} =
  destroy cast[ptr Proxy](zwpFullscreenShellModeFeedbackV1)
