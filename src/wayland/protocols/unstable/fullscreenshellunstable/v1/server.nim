# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import code
export code

## The fullscreen_shell_unstable_v1 SERVER protocol
## ################################################
## 
## Interfaces
## ==========
## 
## * zwp_fullscreen_shell_v1
## * zwp_fullscreen_shell_mode_feedback_v1
## 
## Copyright
## =========
## 
## Copyright © 2016 Yong Bakos
## Copyright © 2015 Jason Ekstrand
## Copyright © 2015 Jonas Ådahl
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type ZwpFullscreenShellV1Interface* = object
  release*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  presentSurface*: proc(
    client: ptr Client;
    resource: ptr Resource;
    surface: ptr Resource;
    `method`: uint32;
    output: ptr Resource;
  ) {.nimcall.}
  presentSurfaceForMode*: proc(
    client: ptr Client;
    resource: ptr Resource;
    surface: ptr Resource;
    output: ptr Resource;
    framerate: int32;
    feedback: uint32;
  ) {.nimcall.}

proc zwpFullscreenShellV1SendCapability*(resource: ptr Resource; capability: uint32) {.inline, exportc: "zwp_fullscreen_shell_v1_send_capability".} =
  ## Sends an capability event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpFullscreenShellV1Event_capability.ord, capability)

proc zwpFullscreenShellModeFeedbackV1SendModeSuccessful*(resource: ptr Resource) {.inline, exportc: "zwp_fullscreen_shell_mode_feedback_v1_send_mode_successful".} =
  ## Sends an mode_successful event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpFullscreenShellModeFeedbackV1Event_mode_successful.ord)

proc zwpFullscreenShellModeFeedbackV1SendModeFailed*(resource: ptr Resource) {.inline, exportc: "zwp_fullscreen_shell_mode_feedback_v1_send_mode_failed".} =
  ## Sends an mode_failed event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpFullscreenShellModeFeedbackV1Event_mode_failed.ord)

proc zwpFullscreenShellModeFeedbackV1SendPresentCancelled*(resource: ptr Resource) {.inline, exportc: "zwp_fullscreen_shell_mode_feedback_v1_send_present_cancelled".} =
  ## Sends an present_cancelled event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZwpFullscreenShellModeFeedbackV1Event_present_cancelled.ord)

