# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/client
import wayland/native/common
import code
export code

## The xdg_output_unstable_v1 CLIENT protocol
## ##########################################
## 
## Interfaces
## ==========
## 
## * zxdg_output_manager_v1
## * zxdg_output_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2017 Red Hat Inc.
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

proc setUserData*(zxdgOutputManagerV1: ptr ZxdgOutputManagerV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zxdgOutputManagerV1).set_user_data(user_data)
proc getUserData*(zxdgOutputManagerV1: ptr ZxdgOutputManagerV1): pointer {.inline.} =
  cast[ptr Proxy](zxdgOutputManagerV1).get_user_data()
proc getVersion*(zxdgOutputManagerV1: ptr ZxdgOutputManagerV1): uint32 {.inline.} =
  cast[ptr Proxy](zxdgOutputManagerV1).get_version()
proc destroy*(zxdgOutputManagerV1: ptr ZxdgOutputManagerV1) {.inline.} =
  ## destroy the xdg_output_manager object
  ## 
  ## Using this request a client can tell the server that it is not
  ## 	going to use the xdg_output_manager object anymore.
  ## 
  ## 	Any objects already created through this instance are not affected.
  ## 
  cast[ptr Proxy](zxdgOutputManagerV1).marshal_flags(ZxdgOutputManagerV1Request_destroy.ord, nil, cast[ptr Proxy](zxdgOutputManagerV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
proc getXdgOutput*(zxdgOutputManagerV1: ptr ZxdgOutputManagerV1; output: ptr Output): ptr ZxdgOutputV1 {.inline.} =
  ## create an xdg output from a wl_output
  ## 
  ## This creates a new xdg_output object for the given wl_output.
  ## 
  cast[ptr ZxdgOutputV1](cast[ptr Proxy](zxdgOutputManagerV1).marshal_flags(ZxdgOutputManagerV1Request_get_xdg_output.ord, addr zxdg_output_v1_interface, cast[ptr Proxy](zxdgOutputManagerV1).get_version(), 0, nil, output))
type ZxdgOutputV1Listener* = object
  logicalPosition*: proc(
    data: pointer;
    zxdgOutputV1: ptr ZxdgOutputV1;
    x: int32;
    y: int32;
  ) {.nimcall.}
  logicalSize*: proc(
    data: pointer;
    zxdgOutputV1: ptr ZxdgOutputV1;
    width: int32;
    height: int32;
  ) {.nimcall.}
  done*: proc(
    data: pointer;
    zxdgOutputV1: ptr ZxdgOutputV1;
  ) {.nimcall.}
  name*: proc(
    data: pointer;
    zxdgOutputV1: ptr ZxdgOutputV1;
    name: cstring;
  ) {.nimcall.}
  description*: proc(
    data: pointer;
    zxdgOutputV1: ptr ZxdgOutputV1;
    description: cstring;
  ) {.nimcall.}
proc addListener*(zxdgOutputV1: ptr ZxdgOutputV1; listener: ptr ZxdgOutputV1Listener; data: pointer): int {.inline.} =
  cast[ptr Proxy](zxdgOutputV1).add_listener(listener, data)

proc setUserData*(zxdgOutputV1: ptr ZxdgOutputV1; userData: pointer) {.inline.} =
  cast[ptr Proxy](zxdgOutputV1).set_user_data(user_data)
proc getUserData*(zxdgOutputV1: ptr ZxdgOutputV1): pointer {.inline.} =
  cast[ptr Proxy](zxdgOutputV1).get_user_data()
proc getVersion*(zxdgOutputV1: ptr ZxdgOutputV1): uint32 {.inline.} =
  cast[ptr Proxy](zxdgOutputV1).get_version()
proc destroy*(zxdgOutputV1: ptr ZxdgOutputV1) {.inline.} =
  ## destroy the xdg_output object
  ## 
  ## Using this request a client can tell the server that it is not
  ## 	going to use the xdg_output object anymore.
  ## 
  cast[ptr Proxy](zxdgOutputV1).marshal_flags(ZxdgOutputV1Request_destroy.ord, nil, cast[ptr Proxy](zxdgOutputV1).get_version(), WL_MARSHAL_FLAG_DESTROY)
