# Generated by wayland-nim-scanner 1.23.1
{.warning[UnusedImport]:off.}
import wayland/native/server
import wayland/native/common
import code
export code

## The xdg_output_unstable_v1 SERVER protocol
## ##########################################
## 
## Interfaces
## ==========
## 
## * zxdg_output_manager_v1
## * zxdg_output_v1
## 
## Copyright
## =========
## 
## Copyright Â© 2017 Red Hat Inc.
## 
## Permission is hereby granted, free of charge, to any person obtaining a
## copy of this software and associated documentation files (the "Software"),
## to deal in the Software without restriction, including without limitation
## the rights to use, copy, modify, merge, publish, distribute, sublicense,
## and/or sell copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the next
## paragraph) shall be included in all copies or substantial portions of the
## Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
## DEALINGS IN THE SOFTWARE.
## 

type ZxdgOutputManagerV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  getXdgOutput*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    output: ptr Resource;
  ) {.nimcall.}

type ZxdgOutputV1Interface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc zxdgOutputV1SendLogicalPosition*(resource: ptr Resource; x: int32; y: int32) {.inline, exportc: "zxdg_output_v1_send_logical_position".} =
  ## Sends an logical_position event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *x*: x position within the global compositor space
  ## * *y*: y position within the global compositor space
  resource.post_event(ZxdgOutputV1Event_logical_position.ord, x, y)

proc zxdgOutputV1SendLogicalSize*(resource: ptr Resource; width: int32; height: int32) {.inline, exportc: "zxdg_output_v1_send_logical_size".} =
  ## Sends an logical_size event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *width*: width in global compositor space
  ## * *height*: height in global compositor space
  resource.post_event(ZxdgOutputV1Event_logical_size.ord, width, height)

proc zxdgOutputV1SendDone*(resource: ptr Resource) {.inline, exportc: "zxdg_output_v1_send_done".} =
  ## Sends an done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ZxdgOutputV1Event_done.ord)

proc zxdgOutputV1SendName*(resource: ptr Resource; name: cstring) {.inline, exportc: "zxdg_output_v1_send_name".} =
  ## Sends an name event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *name*: output name
  resource.post_event(ZxdgOutputV1Event_name.ord, name)

proc zxdgOutputV1SendDescription*(resource: ptr Resource; description: cstring) {.inline, exportc: "zxdg_output_v1_send_description".} =
  ## Sends an description event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *description*: output description
  resource.post_event(ZxdgOutputV1Event_description.ord, description)

