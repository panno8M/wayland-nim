# Generated by wayland-nim-scanner 1.23.1
import wayland/native/server_core
import wayland/native/common
import code
export code

## The wayland SERVER protocol
## ###########################
## 
## Interfaces
## ==========
## 
## * wl_display
## * wl_registry
## * wl_callback
## * wl_compositor
## * wl_shm_pool
## * wl_shm
## * wl_buffer
## * wl_data_offer
## * wl_data_source
## * wl_data_device
## * wl_data_device_manager
## * wl_shell
## * wl_shell_surface
## * wl_surface
## * wl_seat
## * wl_pointer
## * wl_keyboard
## * wl_touch
## * wl_output
## * wl_region
## * wl_subcompositor
## * wl_subsurface
## 
## Copyright
## =========
## 
## Copyright © 2008-2011 Kristian Høgsberg
## Copyright © 2010-2011 Intel Corporation
## Copyright © 2012-2013 Collabora, Ltd.
## 
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation files
## (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software,
## and to permit persons to whom the Software is furnished to do so,
## subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the
## next paragraph) shall be included in all copies or substantial
## portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
## NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
## BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
## ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
## CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
## 

type DisplayInterface* = object
  sync*: proc(
    client: ptr Client;
    resource: ptr Resource;
    callback: uint32;
  ) {.nimcall.}
  getRegistry*: proc(
    client: ptr Client;
    resource: ptr Resource;
    registry: uint32;
  ) {.nimcall.}

proc displaySendError*(resource: ptr Resource; objectId: ptr Resource; code: uint32; message: cstring) {.inline, exportc: "wl_display_send_error".} =
  ## Sends an error event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *object_id*: object where the error occurred
  ## * *code*: error code
  ## * *message*: error description
  resource.post_event(DisplayEvent_error.ord, objectId, code, message)

proc displaySendDeleteId*(resource: ptr Resource; id: uint32) {.inline, exportc: "wl_display_send_delete_id".} =
  ## Sends an delete_id event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *id*: deleted object ID
  resource.post_event(DisplayEvent_delete_id.ord, id)

type RegistryInterface* = object
  `bind`*: proc(
    client: ptr Client;
    resource: ptr Resource;
    name: uint32;
    ifce: cstring;
    version: uint32;
    id: uint32;
  ) {.nimcall.}

proc registrySendGlobal*(resource: ptr Resource; name: uint32; `interface`: cstring; version: uint32) {.inline, exportc: "wl_registry_send_global".} =
  ## Sends an global event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *name*: numeric name of the global object
  ## * *interface*: interface implemented by the object
  ## * *version*: interface version
  resource.post_event(RegistryEvent_global.ord, name, `interface`, version)

proc registrySendGlobalRemove*(resource: ptr Resource; name: uint32) {.inline, exportc: "wl_registry_send_global_remove".} =
  ## Sends an global_remove event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *name*: numeric name of the global object
  resource.post_event(RegistryEvent_global_remove.ord, name)

proc callbackSendDone*(resource: ptr Resource; callbackData: uint32) {.inline, exportc: "wl_callback_send_done".} =
  ## Sends an done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *callback_data*: request-specific data for the callback
  resource.post_event(CallbackEvent_done.ord, callbackData)

type CompositorInterface* = object
  createSurface*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
  ) {.nimcall.}
  createRegion*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
  ) {.nimcall.}

type ShmPoolInterface* = object
  createBuffer*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    offset: int32;
    width: int32;
    height: int32;
    stride: int32;
    format: uint32;
  ) {.nimcall.}
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  resize*: proc(
    client: ptr Client;
    resource: ptr Resource;
    size: int32;
  ) {.nimcall.}

type ShmInterface* = object
  createPool*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    fd: int32;
    size: int32;
  ) {.nimcall.}
  release*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc shmSendFormat*(resource: ptr Resource; format: uint32) {.inline, exportc: "wl_shm_send_format".} =
  ## Sends an format event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *format*: buffer pixel format
  resource.post_event(ShmEvent_format.ord, format)

type BufferInterface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc bufferSendRelease*(resource: ptr Resource) {.inline, exportc: "wl_buffer_send_release".} =
  ## Sends an release event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(BufferEvent_release.ord)

type DataOfferInterface* = object
  accept*: proc(
    client: ptr Client;
    resource: ptr Resource;
    serial: uint32;
    mimeType: cstring;
  ) {.nimcall.}
  receive*: proc(
    client: ptr Client;
    resource: ptr Resource;
    mimeType: cstring;
    fd: int32;
  ) {.nimcall.}
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  finish*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  setActions*: proc(
    client: ptr Client;
    resource: ptr Resource;
    dndActions: uint32;
    preferredAction: uint32;
  ) {.nimcall.}

proc dataOfferSendOffer*(resource: ptr Resource; mimeType: cstring) {.inline, exportc: "wl_data_offer_send_offer".} =
  ## Sends an offer event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *mime_type*: offered mime type
  resource.post_event(DataOfferEvent_offer.ord, mimeType)

proc dataOfferSendSourceActions*(resource: ptr Resource; sourceActions: uint32) {.inline, exportc: "wl_data_offer_send_source_actions".} =
  ## Sends an source_actions event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *source_actions*: actions offered by the data source
  resource.post_event(DataOfferEvent_source_actions.ord, sourceActions)

proc dataOfferSendAction*(resource: ptr Resource; dndAction: uint32) {.inline, exportc: "wl_data_offer_send_action".} =
  ## Sends an action event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *dnd_action*: action selected by the compositor
  resource.post_event(DataOfferEvent_action.ord, dndAction)

type DataSourceInterface* = object
  offer*: proc(
    client: ptr Client;
    resource: ptr Resource;
    mimeType: cstring;
  ) {.nimcall.}
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  setActions*: proc(
    client: ptr Client;
    resource: ptr Resource;
    dndActions: uint32;
  ) {.nimcall.}

proc dataSourceSendTarget*(resource: ptr Resource; mimeType: cstring) {.inline, exportc: "wl_data_source_send_target".} =
  ## Sends an target event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *mime_type*: mime type accepted by the target
  resource.post_event(DataSourceEvent_target.ord, mimeType)

proc dataSourceSendSend*(resource: ptr Resource; mimeType: cstring; fd: int32) {.inline, exportc: "wl_data_source_send_send".} =
  ## Sends an send event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *mime_type*: mime type for the data
  ## * *fd*: file descriptor for the data
  resource.post_event(DataSourceEvent_send.ord, mimeType, fd)

proc dataSourceSendCancelled*(resource: ptr Resource) {.inline, exportc: "wl_data_source_send_cancelled".} =
  ## Sends an cancelled event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(DataSourceEvent_cancelled.ord)

proc dataSourceSendDndDropPerformed*(resource: ptr Resource) {.inline, exportc: "wl_data_source_send_dnd_drop_performed".} =
  ## Sends an dnd_drop_performed event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(DataSourceEvent_dnd_drop_performed.ord)

proc dataSourceSendDndFinished*(resource: ptr Resource) {.inline, exportc: "wl_data_source_send_dnd_finished".} =
  ## Sends an dnd_finished event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(DataSourceEvent_dnd_finished.ord)

proc dataSourceSendAction*(resource: ptr Resource; dndAction: uint32) {.inline, exportc: "wl_data_source_send_action".} =
  ## Sends an action event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *dnd_action*: action selected by the compositor
  resource.post_event(DataSourceEvent_action.ord, dndAction)

type DataDeviceInterface* = object
  startDrag*: proc(
    client: ptr Client;
    resource: ptr Resource;
    source: ptr Resource;
    origin: ptr Resource;
    icon: ptr Resource;
    serial: uint32;
  ) {.nimcall.}
  setSelection*: proc(
    client: ptr Client;
    resource: ptr Resource;
    source: ptr Resource;
    serial: uint32;
  ) {.nimcall.}
  release*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc dataDeviceSendDataOffer*(resource: ptr Resource; id: ptr Resource) {.inline, exportc: "wl_data_device_send_data_offer".} =
  ## Sends an data_offer event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *id*: the new data_offer object
  resource.post_event(DataDeviceEvent_data_offer.ord, id)

proc dataDeviceSendEnter*(resource: ptr Resource; serial: uint32; surface: ptr Resource; x: Fixed; y: Fixed; id: ptr Resource) {.inline, exportc: "wl_data_device_send_enter".} =
  ## Sends an enter event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the enter event
  ## * *surface*: client surface entered
  ## * *x*: surface-local x coordinate
  ## * *y*: surface-local y coordinate
  ## * *id*: source data_offer object
  resource.post_event(DataDeviceEvent_enter.ord, serial, surface, x, y, id)

proc dataDeviceSendLeave*(resource: ptr Resource) {.inline, exportc: "wl_data_device_send_leave".} =
  ## Sends an leave event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(DataDeviceEvent_leave.ord)

proc dataDeviceSendMotion*(resource: ptr Resource; time: uint32; x: Fixed; y: Fixed) {.inline, exportc: "wl_data_device_send_motion".} =
  ## Sends an motion event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *x*: surface-local x coordinate
  ## * *y*: surface-local y coordinate
  resource.post_event(DataDeviceEvent_motion.ord, time, x, y)

proc dataDeviceSendDrop*(resource: ptr Resource) {.inline, exportc: "wl_data_device_send_drop".} =
  ## Sends an drop event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(DataDeviceEvent_drop.ord)

proc dataDeviceSendSelection*(resource: ptr Resource; id: ptr Resource) {.inline, exportc: "wl_data_device_send_selection".} =
  ## Sends an selection event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *id*: selection data_offer object
  resource.post_event(DataDeviceEvent_selection.ord, id)

type DataDeviceManagerInterface* = object
  createDataSource*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
  ) {.nimcall.}
  getDataDevice*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    seat: ptr Resource;
  ) {.nimcall.}

type ShellInterface* = object
  getShellSurface*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    surface: ptr Resource;
  ) {.nimcall.}

type ShellSurfaceInterface* = object
  pong*: proc(
    client: ptr Client;
    resource: ptr Resource;
    serial: uint32;
  ) {.nimcall.}
  move*: proc(
    client: ptr Client;
    resource: ptr Resource;
    seat: ptr Resource;
    serial: uint32;
  ) {.nimcall.}
  resize*: proc(
    client: ptr Client;
    resource: ptr Resource;
    seat: ptr Resource;
    serial: uint32;
    edges: uint32;
  ) {.nimcall.}
  setToplevel*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  setTransient*: proc(
    client: ptr Client;
    resource: ptr Resource;
    parent: ptr Resource;
    x: int32;
    y: int32;
    flags: uint32;
  ) {.nimcall.}
  setFullscreen*: proc(
    client: ptr Client;
    resource: ptr Resource;
    `method`: uint32;
    framerate: uint32;
    output: ptr Resource;
  ) {.nimcall.}
  setPopup*: proc(
    client: ptr Client;
    resource: ptr Resource;
    seat: ptr Resource;
    serial: uint32;
    parent: ptr Resource;
    x: int32;
    y: int32;
    flags: uint32;
  ) {.nimcall.}
  setMaximized*: proc(
    client: ptr Client;
    resource: ptr Resource;
    output: ptr Resource;
  ) {.nimcall.}
  setTitle*: proc(
    client: ptr Client;
    resource: ptr Resource;
    title: cstring;
  ) {.nimcall.}
  setClass*: proc(
    client: ptr Client;
    resource: ptr Resource;
    class: cstring;
  ) {.nimcall.}

proc shellSurfaceSendPing*(resource: ptr Resource; serial: uint32) {.inline, exportc: "wl_shell_surface_send_ping".} =
  ## Sends an ping event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the ping
  resource.post_event(ShellSurfaceEvent_ping.ord, serial)

proc shellSurfaceSendConfigure*(resource: ptr Resource; edges: uint32; width: int32; height: int32) {.inline, exportc: "wl_shell_surface_send_configure".} =
  ## Sends an configure event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *edges*: how the surface was resized
  ## * *width*: new width of the surface
  ## * *height*: new height of the surface
  resource.post_event(ShellSurfaceEvent_configure.ord, edges, width, height)

proc shellSurfaceSendPopupDone*(resource: ptr Resource) {.inline, exportc: "wl_shell_surface_send_popup_done".} =
  ## Sends an popup_done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(ShellSurfaceEvent_popup_done.ord)

type SurfaceInterface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  attach*: proc(
    client: ptr Client;
    resource: ptr Resource;
    buffer: ptr Resource;
    x: int32;
    y: int32;
  ) {.nimcall.}
  damage*: proc(
    client: ptr Client;
    resource: ptr Resource;
    x: int32;
    y: int32;
    width: int32;
    height: int32;
  ) {.nimcall.}
  frame*: proc(
    client: ptr Client;
    resource: ptr Resource;
    callback: uint32;
  ) {.nimcall.}
  setOpaqueRegion*: proc(
    client: ptr Client;
    resource: ptr Resource;
    region: ptr Resource;
  ) {.nimcall.}
  setInputRegion*: proc(
    client: ptr Client;
    resource: ptr Resource;
    region: ptr Resource;
  ) {.nimcall.}
  commit*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  setBufferTransform*: proc(
    client: ptr Client;
    resource: ptr Resource;
    transform: int32;
  ) {.nimcall.}
  setBufferScale*: proc(
    client: ptr Client;
    resource: ptr Resource;
    scale: int32;
  ) {.nimcall.}
  damageBuffer*: proc(
    client: ptr Client;
    resource: ptr Resource;
    x: int32;
    y: int32;
    width: int32;
    height: int32;
  ) {.nimcall.}
  offset*: proc(
    client: ptr Client;
    resource: ptr Resource;
    x: int32;
    y: int32;
  ) {.nimcall.}

proc surfaceSendEnter*(resource: ptr Resource; output: ptr Resource) {.inline, exportc: "wl_surface_send_enter".} =
  ## Sends an enter event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *output*: output entered by the surface
  resource.post_event(SurfaceEvent_enter.ord, output)

proc surfaceSendLeave*(resource: ptr Resource; output: ptr Resource) {.inline, exportc: "wl_surface_send_leave".} =
  ## Sends an leave event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *output*: output left by the surface
  resource.post_event(SurfaceEvent_leave.ord, output)

proc surfaceSendPreferredBufferScale*(resource: ptr Resource; factor: int32) {.inline, exportc: "wl_surface_send_preferred_buffer_scale".} =
  ## Sends an preferred_buffer_scale event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *factor*: preferred scaling factor
  resource.post_event(SurfaceEvent_preferred_buffer_scale.ord, factor)

proc surfaceSendPreferredBufferTransform*(resource: ptr Resource; transform: uint32) {.inline, exportc: "wl_surface_send_preferred_buffer_transform".} =
  ## Sends an preferred_buffer_transform event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *transform*: preferred transform
  resource.post_event(SurfaceEvent_preferred_buffer_transform.ord, transform)

type SeatInterface* = object
  getPointer*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
  ) {.nimcall.}
  getKeyboard*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
  ) {.nimcall.}
  getTouch*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
  ) {.nimcall.}
  release*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc seatSendCapabilities*(resource: ptr Resource; capabilities: uint32) {.inline, exportc: "wl_seat_send_capabilities".} =
  ## Sends an capabilities event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *capabilities*: capabilities of the seat
  resource.post_event(SeatEvent_capabilities.ord, capabilities)

proc seatSendName*(resource: ptr Resource; name: cstring) {.inline, exportc: "wl_seat_send_name".} =
  ## Sends an name event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *name*: seat identifier
  resource.post_event(SeatEvent_name.ord, name)

type PointerInterface* = object
  setCursor*: proc(
    client: ptr Client;
    resource: ptr Resource;
    serial: uint32;
    surface: ptr Resource;
    hotspotX: int32;
    hotspotY: int32;
  ) {.nimcall.}
  release*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc pointerSendEnter*(resource: ptr Resource; serial: uint32; surface: ptr Resource; surfaceX: Fixed; surfaceY: Fixed) {.inline, exportc: "wl_pointer_send_enter".} =
  ## Sends an enter event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the enter event
  ## * *surface*: surface entered by the pointer
  ## * *surface_x*: surface-local x coordinate
  ## * *surface_y*: surface-local y coordinate
  resource.post_event(PointerEvent_enter.ord, serial, surface, surfaceX, surfaceY)

proc pointerSendLeave*(resource: ptr Resource; serial: uint32; surface: ptr Resource) {.inline, exportc: "wl_pointer_send_leave".} =
  ## Sends an leave event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the leave event
  ## * *surface*: surface left by the pointer
  resource.post_event(PointerEvent_leave.ord, serial, surface)

proc pointerSendMotion*(resource: ptr Resource; time: uint32; surfaceX: Fixed; surfaceY: Fixed) {.inline, exportc: "wl_pointer_send_motion".} =
  ## Sends an motion event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *surface_x*: surface-local x coordinate
  ## * *surface_y*: surface-local y coordinate
  resource.post_event(PointerEvent_motion.ord, time, surfaceX, surfaceY)

proc pointerSendButton*(resource: ptr Resource; serial: uint32; time: uint32; button: uint32; state: uint32) {.inline, exportc: "wl_pointer_send_button".} =
  ## Sends an button event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the button event
  ## * *time*: timestamp with millisecond granularity
  ## * *button*: button that produced the event
  ## * *state*: physical state of the button
  resource.post_event(PointerEvent_button.ord, serial, time, button, state)

proc pointerSendAxis*(resource: ptr Resource; time: uint32; axis: uint32; value: Fixed) {.inline, exportc: "wl_pointer_send_axis".} =
  ## Sends an axis event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *axis*: axis type
  ## * *value*: length of vector in surface-local coordinate space
  resource.post_event(PointerEvent_axis.ord, time, axis, value)

proc pointerSendFrame*(resource: ptr Resource) {.inline, exportc: "wl_pointer_send_frame".} =
  ## Sends an frame event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(PointerEvent_frame.ord)

proc pointerSendAxisSource*(resource: ptr Resource; axisSource: uint32) {.inline, exportc: "wl_pointer_send_axis_source".} =
  ## Sends an axis_source event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *axis_source*: source of the axis event
  resource.post_event(PointerEvent_axis_source.ord, axisSource)

proc pointerSendAxisStop*(resource: ptr Resource; time: uint32; axis: uint32) {.inline, exportc: "wl_pointer_send_axis_stop".} =
  ## Sends an axis_stop event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *axis*: the axis stopped with this event
  resource.post_event(PointerEvent_axis_stop.ord, time, axis)

proc pointerSendAxisDiscrete*(resource: ptr Resource; axis: uint32; discrete: int32) {.inline, exportc: "wl_pointer_send_axis_discrete".} =
  ## Sends an axis_discrete event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *axis*: axis type
  ## * *discrete*: number of steps
  resource.post_event(PointerEvent_axis_discrete.ord, axis, discrete)

proc pointerSendAxisValue120*(resource: ptr Resource; axis: uint32; value120: int32) {.inline, exportc: "wl_pointer_send_axis_value120".} =
  ## Sends an axis_value120 event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *axis*: axis type
  ## * *value120*: scroll distance as fraction of 120
  resource.post_event(PointerEvent_axis_value120.ord, axis, value120)

proc pointerSendAxisRelativeDirection*(resource: ptr Resource; axis: uint32; direction: uint32) {.inline, exportc: "wl_pointer_send_axis_relative_direction".} =
  ## Sends an axis_relative_direction event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *axis*: axis type
  ## * *direction*: physical direction relative to axis motion
  resource.post_event(PointerEvent_axis_relative_direction.ord, axis, direction)

type KeyboardInterface* = object
  release*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc keyboardSendKeymap*(resource: ptr Resource; format: uint32; fd: int32; size: uint32) {.inline, exportc: "wl_keyboard_send_keymap".} =
  ## Sends an keymap event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *format*: keymap format
  ## * *fd*: keymap file descriptor
  ## * *size*: keymap size, in bytes
  resource.post_event(KeyboardEvent_keymap.ord, format, fd, size)

proc keyboardSendEnter*(resource: ptr Resource; serial: uint32; surface: ptr Resource; keys: ptr Array) {.inline, exportc: "wl_keyboard_send_enter".} =
  ## Sends an enter event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the enter event
  ## * *surface*: surface gaining keyboard focus
  ## * *keys*: the keys currently logically down
  resource.post_event(KeyboardEvent_enter.ord, serial, surface, keys)

proc keyboardSendLeave*(resource: ptr Resource; serial: uint32; surface: ptr Resource) {.inline, exportc: "wl_keyboard_send_leave".} =
  ## Sends an leave event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the leave event
  ## * *surface*: surface that lost keyboard focus
  resource.post_event(KeyboardEvent_leave.ord, serial, surface)

proc keyboardSendKey*(resource: ptr Resource; serial: uint32; time: uint32; key: uint32; state: uint32) {.inline, exportc: "wl_keyboard_send_key".} =
  ## Sends an key event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the key event
  ## * *time*: timestamp with millisecond granularity
  ## * *key*: key that produced the event
  ## * *state*: physical state of the key
  resource.post_event(KeyboardEvent_key.ord, serial, time, key, state)

proc keyboardSendModifiers*(resource: ptr Resource; serial: uint32; modsDepressed: uint32; modsLatched: uint32; modsLocked: uint32; group: uint32) {.inline, exportc: "wl_keyboard_send_modifiers".} =
  ## Sends an modifiers event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the modifiers event
  ## * *mods_depressed*: depressed modifiers
  ## * *mods_latched*: latched modifiers
  ## * *mods_locked*: locked modifiers
  ## * *group*: keyboard layout
  resource.post_event(KeyboardEvent_modifiers.ord, serial, modsDepressed, modsLatched, modsLocked, group)

proc keyboardSendRepeatInfo*(resource: ptr Resource; rate: int32; delay: int32) {.inline, exportc: "wl_keyboard_send_repeat_info".} =
  ## Sends an repeat_info event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *rate*: the rate of repeating keys in characters per second
  ## * *delay*: delay in milliseconds since key down until repeating starts
  resource.post_event(KeyboardEvent_repeat_info.ord, rate, delay)

type TouchInterface* = object
  release*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc touchSendDown*(resource: ptr Resource; serial: uint32; time: uint32; surface: ptr Resource; id: int32; x: Fixed; y: Fixed) {.inline, exportc: "wl_touch_send_down".} =
  ## Sends an down event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the touch down event
  ## * *time*: timestamp with millisecond granularity
  ## * *surface*: surface touched
  ## * *id*: the unique ID of this touch point
  ## * *x*: surface-local x coordinate
  ## * *y*: surface-local y coordinate
  resource.post_event(TouchEvent_down.ord, serial, time, surface, id, x, y)

proc touchSendUp*(resource: ptr Resource; serial: uint32; time: uint32; id: int32) {.inline, exportc: "wl_touch_send_up".} =
  ## Sends an up event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the touch up event
  ## * *time*: timestamp with millisecond granularity
  ## * *id*: the unique ID of this touch point
  resource.post_event(TouchEvent_up.ord, serial, time, id)

proc touchSendMotion*(resource: ptr Resource; time: uint32; id: int32; x: Fixed; y: Fixed) {.inline, exportc: "wl_touch_send_motion".} =
  ## Sends an motion event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *id*: the unique ID of this touch point
  ## * *x*: surface-local x coordinate
  ## * *y*: surface-local y coordinate
  resource.post_event(TouchEvent_motion.ord, time, id, x, y)

proc touchSendFrame*(resource: ptr Resource) {.inline, exportc: "wl_touch_send_frame".} =
  ## Sends an frame event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(TouchEvent_frame.ord)

proc touchSendCancel*(resource: ptr Resource) {.inline, exportc: "wl_touch_send_cancel".} =
  ## Sends an cancel event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(TouchEvent_cancel.ord)

proc touchSendShape*(resource: ptr Resource; id: int32; major: Fixed; minor: Fixed) {.inline, exportc: "wl_touch_send_shape".} =
  ## Sends an shape event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *id*: the unique ID of this touch point
  ## * *major*: length of the major axis in surface-local coordinates
  ## * *minor*: length of the minor axis in surface-local coordinates
  resource.post_event(TouchEvent_shape.ord, id, major, minor)

proc touchSendOrientation*(resource: ptr Resource; id: int32; orientation: Fixed) {.inline, exportc: "wl_touch_send_orientation".} =
  ## Sends an orientation event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *id*: the unique ID of this touch point
  ## * *orientation*: angle between major axis and positive surface y-axis in degrees
  resource.post_event(TouchEvent_orientation.ord, id, orientation)

type OutputInterface* = object
  release*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

proc outputSendGeometry*(resource: ptr Resource; x: int32; y: int32; physicalWidth: int32; physicalHeight: int32; subpixel: int32; make: cstring; model: cstring; transform: int32) {.inline, exportc: "wl_output_send_geometry".} =
  ## Sends an geometry event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *x*: x position within the global compositor space
  ## * *y*: y position within the global compositor space
  ## * *physical_width*: width in millimeters of the output
  ## * *physical_height*: height in millimeters of the output
  ## * *subpixel*: subpixel orientation of the output
  ## * *make*: textual description of the manufacturer
  ## * *model*: textual description of the model
  ## * *transform*: additional transformation applied to buffer contents during presentation
  resource.post_event(OutputEvent_geometry.ord, x, y, physicalWidth, physicalHeight, subpixel, make, model, transform)

proc outputSendMode*(resource: ptr Resource; flags: uint32; width: int32; height: int32; refresh: int32) {.inline, exportc: "wl_output_send_mode".} =
  ## Sends an mode event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *flags*: bitfield of mode flags
  ## * *width*: width of the mode in hardware units
  ## * *height*: height of the mode in hardware units
  ## * *refresh*: vertical refresh rate in mHz
  resource.post_event(OutputEvent_mode.ord, flags, width, height, refresh)

proc outputSendDone*(resource: ptr Resource) {.inline, exportc: "wl_output_send_done".} =
  ## Sends an done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(OutputEvent_done.ord)

proc outputSendScale*(resource: ptr Resource; factor: int32) {.inline, exportc: "wl_output_send_scale".} =
  ## Sends an scale event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *factor*: scaling factor of output
  resource.post_event(OutputEvent_scale.ord, factor)

proc outputSendName*(resource: ptr Resource; name: cstring) {.inline, exportc: "wl_output_send_name".} =
  ## Sends an name event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *name*: output name
  resource.post_event(OutputEvent_name.ord, name)

proc outputSendDescription*(resource: ptr Resource; description: cstring) {.inline, exportc: "wl_output_send_description".} =
  ## Sends an description event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *description*: output description
  resource.post_event(OutputEvent_description.ord, description)

type RegionInterface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  add*: proc(
    client: ptr Client;
    resource: ptr Resource;
    x: int32;
    y: int32;
    width: int32;
    height: int32;
  ) {.nimcall.}
  subtract*: proc(
    client: ptr Client;
    resource: ptr Resource;
    x: int32;
    y: int32;
    width: int32;
    height: int32;
  ) {.nimcall.}

type SubcompositorInterface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  getSubsurface*: proc(
    client: ptr Client;
    resource: ptr Resource;
    id: uint32;
    surface: ptr Resource;
    parent: ptr Resource;
  ) {.nimcall.}

type SubsurfaceInterface* = object
  destroy*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  setPosition*: proc(
    client: ptr Client;
    resource: ptr Resource;
    x: int32;
    y: int32;
  ) {.nimcall.}
  placeAbove*: proc(
    client: ptr Client;
    resource: ptr Resource;
    sibling: ptr Resource;
  ) {.nimcall.}
  placeBelow*: proc(
    client: ptr Client;
    resource: ptr Resource;
    sibling: ptr Resource;
  ) {.nimcall.}
  setSync*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}
  setDesync*: proc(
    client: ptr Client;
    resource: ptr Resource;
  ) {.nimcall.}

