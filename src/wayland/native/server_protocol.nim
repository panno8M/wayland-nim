# Generated by wayland-nim-scanner 1.23.1
import wayland/native/server_core
import wayland/native/common
import protocol_code
export protocol_code

## The wayland SERVER protocol
## ###########################
## 
## Interfaces
## ==========
## 
## * wl_display
## * wl_registry
## * wl_callback
## * wl_compositor
## * wl_shm_pool
## * wl_shm
## * wl_buffer
## * wl_data_offer
## * wl_data_source
## * wl_data_device
## * wl_data_device_manager
## * wl_shell
## * wl_shell_surface
## * wl_surface
## * wl_seat
## * wl_pointer
## * wl_keyboard
## * wl_touch
## * wl_output
## * wl_region
## * wl_subcompositor
## * wl_subsurface
## 
## Copyright
## =========
## 
## Copyright © 2008-2011 Kristian Høgsberg
## Copyright © 2010-2011 Intel Corporation
## Copyright © 2012-2013 Collabora, Ltd.
## 
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation files
## (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software,
## and to permit persons to whom the Software is furnished to do so,
## subject to the following conditions:
## 
## The above copyright notice and this permission notice (including the
## next paragraph) shall be included in all copies or substantial
## portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
## NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
## BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
## ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
## CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
## 

type WlDisplayInterface* = object
  sync*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    callback: uint32;
  ) {.nimcall.}
  get_registry*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    registry: uint32;
  ) {.nimcall.}

type WlRegistryInterface* = object
  `bind`*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    name: uint32;
    ifce: cstring;
    version: uint32;
    id: uint32;
  ) {.nimcall.}

proc wl_registry_send_global*(resource: ptr wl_resource; name: uint32; `interface`: cstring; version: uint32) {.inline, exportc: "wl_registry_send_global".} =
  ## Sends an global event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *name*: numeric name of the global object
  ## * *interface*: interface implemented by the object
  ## * *version*: interface version
  resource.post_event(wl_registry_event_global.ord, name, `interface`, version)

proc wl_registry_send_global_remove*(resource: ptr wl_resource; name: uint32) {.inline, exportc: "wl_registry_send_global_remove".} =
  ## Sends an global_remove event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *name*: numeric name of the global object
  resource.post_event(wl_registry_event_global_remove.ord, name)

proc wl_callback_send_done*(resource: ptr wl_resource; callback_data: uint32) {.inline, exportc: "wl_callback_send_done".} =
  ## Sends an done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *callback_data*: request-specific data for the callback
  resource.post_event(wl_callback_event_done.ord, callback_data)

type WlCompositorInterface* = object
  create_surface*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    id: uint32;
  ) {.nimcall.}
  create_region*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    id: uint32;
  ) {.nimcall.}

type WlShmPoolInterface* = object
  create_buffer*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    id: uint32;
    offset: int32;
    width: int32;
    height: int32;
    stride: int32;
    format: uint32;
  ) {.nimcall.}
  destroy*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}
  resize*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    size: int32;
  ) {.nimcall.}

type WlShmInterface* = object
  create_pool*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    id: uint32;
    fd: int32;
    size: int32;
  ) {.nimcall.}
  release*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}

proc wl_shm_send_format*(resource: ptr wl_resource; format: uint32) {.inline, exportc: "wl_shm_send_format".} =
  ## Sends an format event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *format*: buffer pixel format
  resource.post_event(wl_shm_event_format.ord, format)

type WlBufferInterface* = object
  destroy*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}

proc wl_buffer_send_release*(resource: ptr wl_resource) {.inline, exportc: "wl_buffer_send_release".} =
  ## Sends an release event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(wl_buffer_event_release.ord)

type WlDataOfferInterface* = object
  accept*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    serial: uint32;
    mime_type: cstring;
  ) {.nimcall.}
  receive*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    mime_type: cstring;
    fd: int32;
  ) {.nimcall.}
  destroy*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}
  finish*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}
  set_actions*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    dnd_actions: uint32;
    preferred_action: uint32;
  ) {.nimcall.}

proc wl_data_offer_send_offer*(resource: ptr wl_resource; mime_type: cstring) {.inline, exportc: "wl_data_offer_send_offer".} =
  ## Sends an offer event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *mime_type*: offered mime type
  resource.post_event(wl_data_offer_event_offer.ord, mime_type)

proc wl_data_offer_send_source_actions*(resource: ptr wl_resource; source_actions: uint32) {.inline, exportc: "wl_data_offer_send_source_actions".} =
  ## Sends an source_actions event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *source_actions*: actions offered by the data source
  resource.post_event(wl_data_offer_event_source_actions.ord, source_actions)

proc wl_data_offer_send_action*(resource: ptr wl_resource; dnd_action: uint32) {.inline, exportc: "wl_data_offer_send_action".} =
  ## Sends an action event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *dnd_action*: action selected by the compositor
  resource.post_event(wl_data_offer_event_action.ord, dnd_action)

type WlDataSourceInterface* = object
  offer*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    mime_type: cstring;
  ) {.nimcall.}
  destroy*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}
  set_actions*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    dnd_actions: uint32;
  ) {.nimcall.}

proc wl_data_source_send_target*(resource: ptr wl_resource; mime_type: cstring) {.inline, exportc: "wl_data_source_send_target".} =
  ## Sends an target event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *mime_type*: mime type accepted by the target
  resource.post_event(wl_data_source_event_target.ord, mime_type)

proc wl_data_source_send_send*(resource: ptr wl_resource; mime_type: cstring; fd: int32) {.inline, exportc: "wl_data_source_send_send".} =
  ## Sends an send event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *mime_type*: mime type for the data
  ## * *fd*: file descriptor for the data
  resource.post_event(wl_data_source_event_send.ord, mime_type, fd)

proc wl_data_source_send_cancelled*(resource: ptr wl_resource) {.inline, exportc: "wl_data_source_send_cancelled".} =
  ## Sends an cancelled event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(wl_data_source_event_cancelled.ord)

proc wl_data_source_send_dnd_drop_performed*(resource: ptr wl_resource) {.inline, exportc: "wl_data_source_send_dnd_drop_performed".} =
  ## Sends an dnd_drop_performed event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(wl_data_source_event_dnd_drop_performed.ord)

proc wl_data_source_send_dnd_finished*(resource: ptr wl_resource) {.inline, exportc: "wl_data_source_send_dnd_finished".} =
  ## Sends an dnd_finished event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(wl_data_source_event_dnd_finished.ord)

proc wl_data_source_send_action*(resource: ptr wl_resource; dnd_action: uint32) {.inline, exportc: "wl_data_source_send_action".} =
  ## Sends an action event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *dnd_action*: action selected by the compositor
  resource.post_event(wl_data_source_event_action.ord, dnd_action)

type WlDataDeviceInterface* = object
  start_drag*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    source: ptr wl_resource;
    origin: ptr wl_resource;
    icon: ptr wl_resource;
    serial: uint32;
  ) {.nimcall.}
  set_selection*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    source: ptr wl_resource;
    serial: uint32;
  ) {.nimcall.}
  release*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}

proc wl_data_device_send_data_offer*(resource: ptr wl_resource; id: ptr wl_resource) {.inline, exportc: "wl_data_device_send_data_offer".} =
  ## Sends an data_offer event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *id*: the new data_offer object
  resource.post_event(wl_data_device_event_data_offer.ord, id)

proc wl_data_device_send_enter*(resource: ptr wl_resource; serial: uint32; surface: ptr wl_resource; x: wl_fixed_t; y: wl_fixed_t; id: ptr wl_resource) {.inline, exportc: "wl_data_device_send_enter".} =
  ## Sends an enter event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the enter event
  ## * *surface*: client surface entered
  ## * *x*: surface-local x coordinate
  ## * *y*: surface-local y coordinate
  ## * *id*: source data_offer object
  resource.post_event(wl_data_device_event_enter.ord, serial, surface, x, y, id)

proc wl_data_device_send_leave*(resource: ptr wl_resource) {.inline, exportc: "wl_data_device_send_leave".} =
  ## Sends an leave event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(wl_data_device_event_leave.ord)

proc wl_data_device_send_motion*(resource: ptr wl_resource; time: uint32; x: wl_fixed_t; y: wl_fixed_t) {.inline, exportc: "wl_data_device_send_motion".} =
  ## Sends an motion event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *x*: surface-local x coordinate
  ## * *y*: surface-local y coordinate
  resource.post_event(wl_data_device_event_motion.ord, time, x, y)

proc wl_data_device_send_drop*(resource: ptr wl_resource) {.inline, exportc: "wl_data_device_send_drop".} =
  ## Sends an drop event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(wl_data_device_event_drop.ord)

proc wl_data_device_send_selection*(resource: ptr wl_resource; id: ptr wl_resource) {.inline, exportc: "wl_data_device_send_selection".} =
  ## Sends an selection event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *id*: selection data_offer object
  resource.post_event(wl_data_device_event_selection.ord, id)

type WlDataDeviceManagerInterface* = object
  create_data_source*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    id: uint32;
  ) {.nimcall.}
  get_data_device*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    id: uint32;
    seat: ptr wl_resource;
  ) {.nimcall.}

type WlShellInterface* = object
  get_shell_surface*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    id: uint32;
    surface: ptr wl_resource;
  ) {.nimcall.}

type WlShellSurfaceInterface* = object
  pong*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    serial: uint32;
  ) {.nimcall.}
  move*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    seat: ptr wl_resource;
    serial: uint32;
  ) {.nimcall.}
  resize*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    seat: ptr wl_resource;
    serial: uint32;
    edges: uint32;
  ) {.nimcall.}
  set_toplevel*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}
  set_transient*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    parent: ptr wl_resource;
    x: int32;
    y: int32;
    flags: uint32;
  ) {.nimcall.}
  set_fullscreen*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    `method`: uint32;
    framerate: uint32;
    output: ptr wl_resource;
  ) {.nimcall.}
  set_popup*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    seat: ptr wl_resource;
    serial: uint32;
    parent: ptr wl_resource;
    x: int32;
    y: int32;
    flags: uint32;
  ) {.nimcall.}
  set_maximized*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    output: ptr wl_resource;
  ) {.nimcall.}
  set_title*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    title: cstring;
  ) {.nimcall.}
  set_class*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    class: cstring;
  ) {.nimcall.}

proc wl_shell_surface_send_ping*(resource: ptr wl_resource; serial: uint32) {.inline, exportc: "wl_shell_surface_send_ping".} =
  ## Sends an ping event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the ping
  resource.post_event(wl_shell_surface_event_ping.ord, serial)

proc wl_shell_surface_send_configure*(resource: ptr wl_resource; edges: uint32; width: int32; height: int32) {.inline, exportc: "wl_shell_surface_send_configure".} =
  ## Sends an configure event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *edges*: how the surface was resized
  ## * *width*: new width of the surface
  ## * *height*: new height of the surface
  resource.post_event(wl_shell_surface_event_configure.ord, edges, width, height)

proc wl_shell_surface_send_popup_done*(resource: ptr wl_resource) {.inline, exportc: "wl_shell_surface_send_popup_done".} =
  ## Sends an popup_done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(wl_shell_surface_event_popup_done.ord)

type WlSurfaceInterface* = object
  destroy*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}
  attach*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    buffer: ptr wl_resource;
    x: int32;
    y: int32;
  ) {.nimcall.}
  damage*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    x: int32;
    y: int32;
    width: int32;
    height: int32;
  ) {.nimcall.}
  frame*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    callback: uint32;
  ) {.nimcall.}
  set_opaque_region*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    region: ptr wl_resource;
  ) {.nimcall.}
  set_input_region*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    region: ptr wl_resource;
  ) {.nimcall.}
  commit*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}
  set_buffer_transform*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    transform: int32;
  ) {.nimcall.}
  set_buffer_scale*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    scale: int32;
  ) {.nimcall.}
  damage_buffer*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    x: int32;
    y: int32;
    width: int32;
    height: int32;
  ) {.nimcall.}
  offset*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    x: int32;
    y: int32;
  ) {.nimcall.}

proc wl_surface_send_enter*(resource: ptr wl_resource; output: ptr wl_resource) {.inline, exportc: "wl_surface_send_enter".} =
  ## Sends an enter event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *output*: output entered by the surface
  resource.post_event(wl_surface_event_enter.ord, output)

proc wl_surface_send_leave*(resource: ptr wl_resource; output: ptr wl_resource) {.inline, exportc: "wl_surface_send_leave".} =
  ## Sends an leave event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *output*: output left by the surface
  resource.post_event(wl_surface_event_leave.ord, output)

proc wl_surface_send_preferred_buffer_scale*(resource: ptr wl_resource; factor: int32) {.inline, exportc: "wl_surface_send_preferred_buffer_scale".} =
  ## Sends an preferred_buffer_scale event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *factor*: preferred scaling factor
  resource.post_event(wl_surface_event_preferred_buffer_scale.ord, factor)

proc wl_surface_send_preferred_buffer_transform*(resource: ptr wl_resource; transform: uint32) {.inline, exportc: "wl_surface_send_preferred_buffer_transform".} =
  ## Sends an preferred_buffer_transform event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *transform*: preferred transform
  resource.post_event(wl_surface_event_preferred_buffer_transform.ord, transform)

type WlSeatInterface* = object
  get_pointer*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    id: uint32;
  ) {.nimcall.}
  get_keyboard*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    id: uint32;
  ) {.nimcall.}
  get_touch*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    id: uint32;
  ) {.nimcall.}
  release*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}

proc wl_seat_send_capabilities*(resource: ptr wl_resource; capabilities: uint32) {.inline, exportc: "wl_seat_send_capabilities".} =
  ## Sends an capabilities event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *capabilities*: capabilities of the seat
  resource.post_event(wl_seat_event_capabilities.ord, capabilities)

proc wl_seat_send_name*(resource: ptr wl_resource; name: cstring) {.inline, exportc: "wl_seat_send_name".} =
  ## Sends an name event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *name*: seat identifier
  resource.post_event(wl_seat_event_name.ord, name)

type WlPointerInterface* = object
  set_cursor*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    serial: uint32;
    surface: ptr wl_resource;
    hotspot_x: int32;
    hotspot_y: int32;
  ) {.nimcall.}
  release*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}

proc wl_pointer_send_enter*(resource: ptr wl_resource; serial: uint32; surface: ptr wl_resource; surface_x: wl_fixed_t; surface_y: wl_fixed_t) {.inline, exportc: "wl_pointer_send_enter".} =
  ## Sends an enter event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the enter event
  ## * *surface*: surface entered by the pointer
  ## * *surface_x*: surface-local x coordinate
  ## * *surface_y*: surface-local y coordinate
  resource.post_event(wl_pointer_event_enter.ord, serial, surface, surface_x, surface_y)

proc wl_pointer_send_leave*(resource: ptr wl_resource; serial: uint32; surface: ptr wl_resource) {.inline, exportc: "wl_pointer_send_leave".} =
  ## Sends an leave event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the leave event
  ## * *surface*: surface left by the pointer
  resource.post_event(wl_pointer_event_leave.ord, serial, surface)

proc wl_pointer_send_motion*(resource: ptr wl_resource; time: uint32; surface_x: wl_fixed_t; surface_y: wl_fixed_t) {.inline, exportc: "wl_pointer_send_motion".} =
  ## Sends an motion event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *surface_x*: surface-local x coordinate
  ## * *surface_y*: surface-local y coordinate
  resource.post_event(wl_pointer_event_motion.ord, time, surface_x, surface_y)

proc wl_pointer_send_button*(resource: ptr wl_resource; serial: uint32; time: uint32; button: uint32; state: uint32) {.inline, exportc: "wl_pointer_send_button".} =
  ## Sends an button event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the button event
  ## * *time*: timestamp with millisecond granularity
  ## * *button*: button that produced the event
  ## * *state*: physical state of the button
  resource.post_event(wl_pointer_event_button.ord, serial, time, button, state)

proc wl_pointer_send_axis*(resource: ptr wl_resource; time: uint32; axis: uint32; value: wl_fixed_t) {.inline, exportc: "wl_pointer_send_axis".} =
  ## Sends an axis event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *axis*: axis type
  ## * *value*: length of vector in surface-local coordinate space
  resource.post_event(wl_pointer_event_axis.ord, time, axis, value)

proc wl_pointer_send_frame*(resource: ptr wl_resource) {.inline, exportc: "wl_pointer_send_frame".} =
  ## Sends an frame event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(wl_pointer_event_frame.ord)

proc wl_pointer_send_axis_source*(resource: ptr wl_resource; axis_source: uint32) {.inline, exportc: "wl_pointer_send_axis_source".} =
  ## Sends an axis_source event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *axis_source*: source of the axis event
  resource.post_event(wl_pointer_event_axis_source.ord, axis_source)

proc wl_pointer_send_axis_stop*(resource: ptr wl_resource; time: uint32; axis: uint32) {.inline, exportc: "wl_pointer_send_axis_stop".} =
  ## Sends an axis_stop event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *axis*: the axis stopped with this event
  resource.post_event(wl_pointer_event_axis_stop.ord, time, axis)

proc wl_pointer_send_axis_discrete*(resource: ptr wl_resource; axis: uint32; discrete: int32) {.inline, exportc: "wl_pointer_send_axis_discrete".} =
  ## Sends an axis_discrete event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *axis*: axis type
  ## * *discrete*: number of steps
  resource.post_event(wl_pointer_event_axis_discrete.ord, axis, discrete)

proc wl_pointer_send_axis_value120*(resource: ptr wl_resource; axis: uint32; value120: int32) {.inline, exportc: "wl_pointer_send_axis_value120".} =
  ## Sends an axis_value120 event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *axis*: axis type
  ## * *value120*: scroll distance as fraction of 120
  resource.post_event(wl_pointer_event_axis_value120.ord, axis, value120)

proc wl_pointer_send_axis_relative_direction*(resource: ptr wl_resource; axis: uint32; direction: uint32) {.inline, exportc: "wl_pointer_send_axis_relative_direction".} =
  ## Sends an axis_relative_direction event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *axis*: axis type
  ## * *direction*: physical direction relative to axis motion
  resource.post_event(wl_pointer_event_axis_relative_direction.ord, axis, direction)

type WlKeyboardInterface* = object
  release*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}

proc wl_keyboard_send_keymap*(resource: ptr wl_resource; format: uint32; fd: int32; size: uint32) {.inline, exportc: "wl_keyboard_send_keymap".} =
  ## Sends an keymap event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *format*: keymap format
  ## * *fd*: keymap file descriptor
  ## * *size*: keymap size, in bytes
  resource.post_event(wl_keyboard_event_keymap.ord, format, fd, size)

proc wl_keyboard_send_enter*(resource: ptr wl_resource; serial: uint32; surface: ptr wl_resource; keys: ptr wl_array) {.inline, exportc: "wl_keyboard_send_enter".} =
  ## Sends an enter event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the enter event
  ## * *surface*: surface gaining keyboard focus
  ## * *keys*: the keys currently logically down
  resource.post_event(wl_keyboard_event_enter.ord, serial, surface, keys)

proc wl_keyboard_send_leave*(resource: ptr wl_resource; serial: uint32; surface: ptr wl_resource) {.inline, exportc: "wl_keyboard_send_leave".} =
  ## Sends an leave event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the leave event
  ## * *surface*: surface that lost keyboard focus
  resource.post_event(wl_keyboard_event_leave.ord, serial, surface)

proc wl_keyboard_send_key*(resource: ptr wl_resource; serial: uint32; time: uint32; key: uint32; state: uint32) {.inline, exportc: "wl_keyboard_send_key".} =
  ## Sends an key event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the key event
  ## * *time*: timestamp with millisecond granularity
  ## * *key*: key that produced the event
  ## * *state*: physical state of the key
  resource.post_event(wl_keyboard_event_key.ord, serial, time, key, state)

proc wl_keyboard_send_modifiers*(resource: ptr wl_resource; serial: uint32; mods_depressed: uint32; mods_latched: uint32; mods_locked: uint32; group: uint32) {.inline, exportc: "wl_keyboard_send_modifiers".} =
  ## Sends an modifiers event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the modifiers event
  ## * *mods_depressed*: depressed modifiers
  ## * *mods_latched*: latched modifiers
  ## * *mods_locked*: locked modifiers
  ## * *group*: keyboard layout
  resource.post_event(wl_keyboard_event_modifiers.ord, serial, mods_depressed, mods_latched, mods_locked, group)

proc wl_keyboard_send_repeat_info*(resource: ptr wl_resource; rate: int32; delay: int32) {.inline, exportc: "wl_keyboard_send_repeat_info".} =
  ## Sends an repeat_info event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *rate*: the rate of repeating keys in characters per second
  ## * *delay*: delay in milliseconds since key down until repeating starts
  resource.post_event(wl_keyboard_event_repeat_info.ord, rate, delay)

type WlTouchInterface* = object
  release*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}

proc wl_touch_send_down*(resource: ptr wl_resource; serial: uint32; time: uint32; surface: ptr wl_resource; id: int32; x: wl_fixed_t; y: wl_fixed_t) {.inline, exportc: "wl_touch_send_down".} =
  ## Sends an down event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the touch down event
  ## * *time*: timestamp with millisecond granularity
  ## * *surface*: surface touched
  ## * *id*: the unique ID of this touch point
  ## * *x*: surface-local x coordinate
  ## * *y*: surface-local y coordinate
  resource.post_event(wl_touch_event_down.ord, serial, time, surface, id, x, y)

proc wl_touch_send_up*(resource: ptr wl_resource; serial: uint32; time: uint32; id: int32) {.inline, exportc: "wl_touch_send_up".} =
  ## Sends an up event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *serial*: serial number of the touch up event
  ## * *time*: timestamp with millisecond granularity
  ## * *id*: the unique ID of this touch point
  resource.post_event(wl_touch_event_up.ord, serial, time, id)

proc wl_touch_send_motion*(resource: ptr wl_resource; time: uint32; id: int32; x: wl_fixed_t; y: wl_fixed_t) {.inline, exportc: "wl_touch_send_motion".} =
  ## Sends an motion event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *time*: timestamp with millisecond granularity
  ## * *id*: the unique ID of this touch point
  ## * *x*: surface-local x coordinate
  ## * *y*: surface-local y coordinate
  resource.post_event(wl_touch_event_motion.ord, time, id, x, y)

proc wl_touch_send_frame*(resource: ptr wl_resource) {.inline, exportc: "wl_touch_send_frame".} =
  ## Sends an frame event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(wl_touch_event_frame.ord)

proc wl_touch_send_cancel*(resource: ptr wl_resource) {.inline, exportc: "wl_touch_send_cancel".} =
  ## Sends an cancel event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(wl_touch_event_cancel.ord)

proc wl_touch_send_shape*(resource: ptr wl_resource; id: int32; major: wl_fixed_t; minor: wl_fixed_t) {.inline, exportc: "wl_touch_send_shape".} =
  ## Sends an shape event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *id*: the unique ID of this touch point
  ## * *major*: length of the major axis in surface-local coordinates
  ## * *minor*: length of the minor axis in surface-local coordinates
  resource.post_event(wl_touch_event_shape.ord, id, major, minor)

proc wl_touch_send_orientation*(resource: ptr wl_resource; id: int32; orientation: wl_fixed_t) {.inline, exportc: "wl_touch_send_orientation".} =
  ## Sends an orientation event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *id*: the unique ID of this touch point
  ## * *orientation*: angle between major axis and positive surface y-axis in degrees
  resource.post_event(wl_touch_event_orientation.ord, id, orientation)

type WlOutputInterface* = object
  release*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}

proc wl_output_send_geometry*(resource: ptr wl_resource; x: int32; y: int32; physical_width: int32; physical_height: int32; subpixel: int32; make: cstring; model: cstring; transform: int32) {.inline, exportc: "wl_output_send_geometry".} =
  ## Sends an geometry event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *x*: x position within the global compositor space
  ## * *y*: y position within the global compositor space
  ## * *physical_width*: width in millimeters of the output
  ## * *physical_height*: height in millimeters of the output
  ## * *subpixel*: subpixel orientation of the output
  ## * *make*: textual description of the manufacturer
  ## * *model*: textual description of the model
  ## * *transform*: additional transformation applied to buffer contents during presentation
  resource.post_event(wl_output_event_geometry.ord, x, y, physical_width, physical_height, subpixel, make, model, transform)

proc wl_output_send_mode*(resource: ptr wl_resource; flags: uint32; width: int32; height: int32; refresh: int32) {.inline, exportc: "wl_output_send_mode".} =
  ## Sends an mode event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *flags*: bitfield of mode flags
  ## * *width*: width of the mode in hardware units
  ## * *height*: height of the mode in hardware units
  ## * *refresh*: vertical refresh rate in mHz
  resource.post_event(wl_output_event_mode.ord, flags, width, height, refresh)

proc wl_output_send_done*(resource: ptr wl_resource) {.inline, exportc: "wl_output_send_done".} =
  ## Sends an done event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  resource.post_event(wl_output_event_done.ord)

proc wl_output_send_scale*(resource: ptr wl_resource; factor: int32) {.inline, exportc: "wl_output_send_scale".} =
  ## Sends an scale event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *factor*: scaling factor of output
  resource.post_event(wl_output_event_scale.ord, factor)

proc wl_output_send_name*(resource: ptr wl_resource; name: cstring) {.inline, exportc: "wl_output_send_name".} =
  ## Sends an name event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *name*: output name
  resource.post_event(wl_output_event_name.ord, name)

proc wl_output_send_description*(resource: ptr wl_resource; description: cstring) {.inline, exportc: "wl_output_send_description".} =
  ## Sends an description event to the client owning the resource.
  ## 
  ## **params**:
  ## * *resource*: The client's resource
  ## * *description*: output description
  resource.post_event(wl_output_event_description.ord, description)

type WlRegionInterface* = object
  destroy*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}
  add*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    x: int32;
    y: int32;
    width: int32;
    height: int32;
  ) {.nimcall.}
  subtract*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    x: int32;
    y: int32;
    width: int32;
    height: int32;
  ) {.nimcall.}

type WlSubcompositorInterface* = object
  destroy*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}
  get_subsurface*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    id: uint32;
    surface: ptr wl_resource;
    parent: ptr wl_resource;
  ) {.nimcall.}

type WlSubsurfaceInterface* = object
  destroy*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}
  set_position*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    x: int32;
    y: int32;
  ) {.nimcall.}
  place_above*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    sibling: ptr wl_resource;
  ) {.nimcall.}
  place_below*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
    sibling: ptr wl_resource;
  ) {.nimcall.}
  set_sync*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}
  set_desync*: proc(
    client: ptr wl_client;
    resource: ptr wl_resource;
  ) {.nimcall.}

